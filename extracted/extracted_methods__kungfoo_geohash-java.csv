Commit Hash,File Name,Method Name,Method Code,Commit Link
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHashEncodingBenchmark.java,setupBenchmark,"	public void setupBenchmark() {
		hashes = new GeoHash[NUMBER_OF_HASHES];
		latitudes = new double[NUMBER_OF_HASHES];
		longitudes = new double[NUMBER_OF_HASHES];

		Random rand = new Random();
		for (int i = 0; i < NUMBER_OF_HASHES; i++) {
			latitudes[i] = rand.nextDouble() * 180 - 90;",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHashEncodingBenchmark.java,benchmarkGeoHashEncoding,"	public void benchmarkGeoHashEncoding() {
		for (int i = 0; i < NUMBER_OF_HASHES; i++) {
			hashes[i] = GeoHash.withBitPrecision(latitudes[i], longitudes[i], 60);",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude,
			double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5
				: 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude,
			int numberOfBits) {
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		return null;
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHash.java,getNeighbour,"	public GeoHash getNeighbour(int direction, int length) {
		return null;
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHash.java,toBase32,"	public String toBase32() {
		StringBuffer buf = new StringBuffer();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		double centerLatitude = (boundingBox[0].latitude + boundingBox[1].latitude) / 2;
		double centerLongitude = (boundingBox[0].longitude + boundingBox[1].longitude) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHash.java,getBoundingBoxPoints,"	public WGS84Point[] getBoundingBoxPoints() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHash.java,toString,"	public String toString() {
		return String.format(""%s -> (%d,%d)"", longToBitString(bits), 0, 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHash.java,mask,"	public final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHash.java,getNorthernNeighbour,"	protected GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHash.java,getSouthernNeighbour,"	protected GeoHash getSouthernNeighbour(){
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		latBits[0] += 1;
		latBits[0] = maskLastNBits(latBits[0], latBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHash.java,getEasternNeighbour,"	protected GeoHash getEasternNeighbour(){
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] += 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHash.java,getWesternNeighbour,"	protected GeoHash getWesternNeighbour(){
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] -= 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				if ((latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				latBits[0] <<= 1;
			} else {
				if ((lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		copyOfBits <<= 1;
		int numberOfBits = getNumberOfLatLonBits()[0];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		int numberOfBits = getNumberOfLatLonBits()[1];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHash.java,longToBitString,"	protected static String longToBitString(long value) {
		StringBuffer buf = new StringBuffer();
		for (int i = 64; i > 0; i--) {
			long bit = value & FIRST_BIT_FLAGGED;
			if (bit == FIRST_BIT_FLAGGED) {
				buf.append('1');
			} else {
				buf.append('0');
			}
			value <<= 1;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHash.java,highCapDesiredPrecision,"	private void highCapDesiredPrecision(int desiredPrecision) {
		if (desiredPrecision > 64)
			desiredPrecision = 64;",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,WGS84Point.java,getLatitude,"	public double getLatitude() {
		return latitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,WGS84Point.java,moveInDirection,"	public static WGS84Point moveInDirection(WGS84Point point,
			double bearingInDegrees, double distanceInMeters) {

		if (bearingInDegrees < 0 || bearingInDegrees > 360) {
			throw new IllegalArgumentException(""direction must be in (0,360)"");
		}

		double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; // WGS-84
		// ellipsiod
		double alpha1 = bearingInDegrees * degToRad;
		double sinAlpha1 = Math.sin(alpha1), cosAlpha1 = Math.cos(alpha1);

		double tanU1 = (1 - f) * Math.tan(point.latitude * degToRad);
		double cosU1 = 1 / Math.sqrt((1 + tanU1 * tanU1)), sinU1 = tanU1
				* cosU1;
		double sigma1 = Math.atan2(tanU1, cosAlpha1);
		double sinAlpha = cosU1 * sinAlpha1;
		double cosSqAlpha = 1 - sinAlpha * sinAlpha;
		double uSq = cosSqAlpha * (a * a - b * b) / (b * b);
		double A = 1 + uSq / 16384
				* (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));
		double B = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));

		double sinSigma = 0, cosSigma = 0, cos2SigmaM = 0;
		double sigma = distanceInMeters / (b * A), sigmaP = 2 * Math.PI;
		while (Math.abs(sigma - sigmaP) > 1e-12) {
			cos2SigmaM = Math.cos(2 * sigma1 + sigma);
			sinSigma = Math.sin(sigma);
			cosSigma = Math.cos(sigma);
			double deltaSigma = B
					* sinSigma
					* (cos2SigmaM + B
							/ 4
							* (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B
									/ 6
									* cos2SigmaM
									* (-3 + 4 * sinSigma * sinSigma)
									* (-3 + 4 * cos2SigmaM * cos2SigmaM)));
			sigmaP = sigma;
			sigma = distanceInMeters / (b * A) + deltaSigma;
		}

		double tmp = sinU1 * sinSigma - cosU1 * cosSigma * cosAlpha1;
		double lat2 = Math.atan2(sinU1 * cosSigma + cosU1 * sinSigma
				* cosAlpha1, (1 - f)
				* Math.sqrt(sinAlpha * sinAlpha + tmp * tmp));
		double lambda = Math.atan2(sinSigma * sinAlpha1, cosU1 * cosSigma
				- sinU1 * sinSigma * cosAlpha1);
		double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
		double L = lambda
				- (1 - C)
				* f
				* sinAlpha
				* (sigma + C
						* sinSigma
						* (cos2SigmaM + C * cosSigma
								* (-1 + 2 * cos2SigmaM * cos2SigmaM)));

		return new WGS84Point(lat2 / degToRad, point.longitude + L / degToRad);
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,WGS84Point.java,distanceInMeters,"	public static double distanceInMeters(WGS84Point foo, WGS84Point bar) {
		double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; // WGS-84
		// ellipsiod
		double L = (bar.longitude - foo.longitude) * degToRad;
		double U1 = Math.atan((1 - f) * Math.tan(foo.latitude * degToRad));
		double U2 = Math.atan((1 - f) * Math.tan(bar.latitude * degToRad));
		double sinU1 = Math.sin(U1), cosU1 = Math.cos(U1);
		double sinU2 = Math.sin(U2), cosU2 = Math.cos(U2);

		double cosSqAlpha, sinSigma, cos2SigmaM, cosSigma, sigma;

		double lambda = L, lambdaP, iterLimit = 20;
		do {
			double sinLambda = Math.sin(lambda), cosLambda = Math.cos(lambda);
			sinSigma = Math.sqrt((cosU2 * sinLambda) * (cosU2 * sinLambda)
					+ (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda)
					* (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda));
			if (sinSigma == 0)
				return 0; // co-incident points
			cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda;
			sigma = Math.atan2(sinSigma, cosSigma);
			double sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma;
			cosSqAlpha = 1 - sinAlpha * sinAlpha;
			cos2SigmaM = cosSigma - 2 * sinU1 * sinU2 / cosSqAlpha;
			if (cos2SigmaM == Double.NaN)
				cos2SigmaM = 0; // equatorial line: cosSqAlpha=0 (6)
			double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
			lambdaP = lambda;
			lambda = L
					+ (1 - C)
					* f
					* sinAlpha
					* (sigma + C
							* sinSigma
							* (cos2SigmaM + C * cosSigma
									* (-1 + 2 * cos2SigmaM * cos2SigmaM)));
		} while (Math.abs(lambda - lambdaP) > EPSILON && --iterLimit > 0);

		if (iterLimit == 0)
			return Double.NaN;
		double uSquared = cosSqAlpha * (a * a - b * b) / (b * b);
		double A = 1
				+ uSquared
				/ 16384
				* (4096 + uSquared * (-768 + uSquared * (320 - 175 * uSquared)));
		double B = uSquared / 1024
				* (256 + uSquared * (-128 + uSquared * (74 - 47 * uSquared)));
		double deltaSigma = B
				* sinSigma
				* (cos2SigmaM + B
						/ 4
						* (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B
								/ 6 * cos2SigmaM
								* (-3 + 4 * sinSigma * sinSigma)
								* (-3 + 4 * cos2SigmaM * cos2SigmaM)));
		double s = b * A * (sigma - deltaSigma);

		return s;
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,WGS84Point.java,getLongitude,"	public double getLongitude() {
		return longitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,WGS84Point.java,toString,"	public String toString() {
		return String.format(""(%f,%f)"", latitude, longitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,WGS84Point.java,equals,"	public boolean equals(Object obj) {
		if (obj instanceof WGS84Point) {
			WGS84Point other = (WGS84Point) obj;
			return latitude == other.latitude && longitude == other.longitude;
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		Assert.assertEquals(0x1l, hash.bits);
		Assert.assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		Assert.assertEquals(0xfl, hash.bits);
		Assert.assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		Assert.assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		Assert.assertEquals(0x10l, hash.bits);
		Assert.assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHashTest.java,testLongToBitString,"	public void testLongToBitString() {
		hash.bits = 0x5555555555555555l;
		Assert
				.assertEquals(",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		Assert.assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash);
		System.out.println(hash.toBase32());
		Assert.assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		Assert.assertTrue(hash.toBase32() + "" should be within ""
				+ bbox.toBase32(), hash.within(bbox));",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		Assert.assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		Assert.assertFalse(hash.toBase32() + "" should NOT be within ""
				+ bbox.toBase32(), hash.within(bbox));",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		Assert.assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		Assert.assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		Assert.assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		Assert.assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		hash = GeoHash.withCharacterPrecision(20, 31, 12);
		Assert.assertEquals(""sew1c2vs2q5r"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20, 31, 12);
		Assert.assertEquals(""ksqn1rje83g2"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20.783236276, 31.9867127312312,
				12);
		Assert.assertEquals(""ksq9zbs0b7vw"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321,
				39.0247389581054, 12);
		Assert.assertEquals(""hf7u8p8gn747"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321,
				39.0247389581054, 8);
		Assert.assertEquals(""hf7u8p8g"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321,
				39.0247389581054, 4);
		Assert.assertEquals(""hf7u"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		Assert.assertEquals(0xaal, latitudeBits[0]);
		Assert.assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		Assert.assertEquals(0x95l, longitudeBits[0]);
		Assert.assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;
		System.out.println(hash);

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		Assert.assertEquals(0x8, lonBits[0]);
		Assert.assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		Assert.assertEquals(0x5, latBits[0]);
		Assert.assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		Assert.assertEquals(0xc000000000000000l, north.bits);
		Assert.assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		Assert.assertEquals(0xd000000000000000l, south.bits);
		Assert.assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		Assert.assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		Assert.assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		Assert.assertEquals(0x5400000000000000l, east.bits);
		
		// and then from there, just a little south of sanity...
		south = east.getSouthernNeighbour();
		Assert.assertEquals(0x0l, south.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter =""
				+ hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out
				.println(String.format(""%s,%s"", hash.getBoundingBoxPoints()[0],",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,WGS84PointTest.java,setUp,"	public void setUp() {

	}

	@Test
	public void testVincenty() {
		WGS84Point startPoint = new WGS84Point(40, 40);

		int distanceInMeters = 10000;
		WGS84Point result = WGS84Point.moveInDirection(startPoint, 120,
				distanceInMeters);
		Assert.assertEquals(40.10134882, result.longitude, DELTA);
		Assert.assertEquals(39.9549245, result.latitude, DELTA);

		Assert.assertEquals(distanceInMeters, WGS84Point.distanceInMeters(
				startPoint, result), DELTA);
		
		
		WGS84Point p1 = new WGS84Point(1,1);
		int tenThousandKilometers = 10000000;
		WGS84Point p2 = WGS84Point.moveInDirection(p1, 270, tenThousandKilometers);
		System.out.println(p2);
		Assert.assertEquals(tenThousandKilometers, WGS84Point.distanceInMeters(p1, p2), DELTA);
	}
}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
ab6a11564c138af0ec9987c23922e5a96080108b,WGS84PointTest.java,testVincenty,"	public void testVincenty() {
		WGS84Point startPoint = new WGS84Point(40, 40);

		int distanceInMeters = 10000;
		WGS84Point result = WGS84Point.moveInDirection(startPoint, 120,
				distanceInMeters);
		Assert.assertEquals(40.10134882, result.longitude, DELTA);
		Assert.assertEquals(39.9549245, result.latitude, DELTA);

		Assert.assertEquals(distanceInMeters, WGS84Point.distanceInMeters(
				startPoint, result), DELTA);
		
		
		WGS84Point p1 = new WGS84Point(1,1);
		int tenThousandKilometers = 10000000;
		WGS84Point p2 = WGS84Point.moveInDirection(p1, 270, tenThousandKilometers);
		System.out.println(p2);
		Assert.assertEquals(tenThousandKilometers, WGS84Point.distanceInMeters(p1, p2), DELTA);
	}",https://www.github.com/kungfoo/geohash-java/commit/ab6a11564c138af0ec9987c23922e5a96080108b
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude,
			double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5
				: 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude,
			int numberOfBits) {
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		return null;
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHash.java,getNeighbour,"	public GeoHash getNeighbour(int direction, int length) {
		return null;
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHash.java,toBase32,"	public String toBase32() {
		StringBuffer buf = new StringBuffer();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		double centerLatitude = (boundingBox[0].latitude + boundingBox[1].latitude) / 2;
		double centerLongitude = (boundingBox[0].longitude + boundingBox[1].longitude) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHash.java,getBoundingBoxPoints,"	public WGS84Point[] getBoundingBoxPoints() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHash.java,toString,"	public String toString() {
		return String.format(""%s -> [%s,%s]"", longToBitString(bits), boundingBox[0], boundingBox[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHash.java,mask,"	public final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHash.java,getNorthernNeighbour,"	protected GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHash.java,getSouthernNeighbour,"	protected GeoHash getSouthernNeighbour(){
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		latBits[0] += 1;
		latBits[0] = maskLastNBits(latBits[0], latBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHash.java,getEasternNeighbour,"	protected GeoHash getEasternNeighbour(){
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] += 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHash.java,getWesternNeighbour,"	protected GeoHash getWesternNeighbour(){
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] -= 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				if ((latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				latBits[0] <<= 1;
			} else {
				if ((lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		copyOfBits <<= 1;
		int numberOfBits = getNumberOfLatLonBits()[0];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		int numberOfBits = getNumberOfLatLonBits()[1];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHash.java,longToBitString,"	protected static String longToBitString(long value) {
		StringBuffer buf = new StringBuffer();
		for (int i = 64; i > 0; i--) {
			long bit = value & FIRST_BIT_FLAGGED;
			if (bit == FIRST_BIT_FLAGGED) {
				buf.append('1');
			} else {
				buf.append('0');
			}
			value <<= 1;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHash.java,highCapDesiredPrecision,"	private void highCapDesiredPrecision(int desiredPrecision) {
		if (desiredPrecision > 64)
			desiredPrecision = 64;",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHashTest.java,testLongToBitString,"	public void testLongToBitString() {
		hash.bits = 0x5555555555555555l;
		assertEquals(
				""0101010101010101010101010101010101010101010101010101010101010101"",",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(),
				hash.within(bbox));",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within ""
				+ bbox.toBase32(), hash.within(bbox));",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		hash = GeoHash.withCharacterPrecision(20, 31, 12);
		assertEquals(""sew1c2vs2q5r"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20, 31, 12);
		assertEquals(""ksqn1rje83g2"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20.783236276, 31.9867127312312,
				12);
		assertEquals(""ksq9zbs0b7vw"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321,
				39.0247389581054, 12);
		assertEquals(""hf7u8p8gn747"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321,
				39.0247389581054, 8);
		assertEquals(""hf7u8p8g"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321,
				39.0247389581054, 4);
		assertEquals(""hf7u"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xc000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xd000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);

		// and then from there, just a little south of sanity...
		south = east.getSouthernNeighbour();
		assertEquals(0x0l, south.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);
		String base32 = hash.toBase32();
		System.out.println(base32);
		assertEquals(""dr4jb0bn2180"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
52dc613c27fdc954abaab97e02a40a111ad256e5,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter =""
				+ hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out
				.println(String.format(""%s,%s"", hash.getBoundingBoxPoints()[0],",https://www.github.com/kungfoo/geohash-java/commit/52dc613c27fdc954abaab97e02a40a111ad256e5
86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude,
			double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5
				: 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b
86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude,
			int numberOfBits) {
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b
86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] points=decode(geohash);
		return GeoHash.withCharacterPrecision(points[0], points[1], geohash.length());
	}",https://www.github.com/kungfoo/geohash-java/commit/86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b
86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b,GeoHash.java,decode,"	public static double[] decode (String geohash){
		double[] lat_interval = {-90.0 , 90.0};
		double[] lon_interval = {-180.0, 180.0};
		
		double lat_err =  90.0;
		double lon_err = 180.0;
		boolean is_even = true;
		int sz = geohash.length();
		int[] bits = {16, 8, 4, 2, 1};
		int bsz = bits.length;
		double latitude, longitude;
		for (int i = 0; i < sz; i++){
			
			int cd = _decodemap.get(geohash.charAt(i));
			
			for (int z = 0; z< bsz; z++){
				int mask = bits[z];
				if (is_even){
					lon_err /= 2;
					if ((cd & mask) != 0){
						lon_interval[0] = (lon_interval[0]+lon_interval[1])/2;
					} else {
						lon_interval[1] = (lon_interval[0]+lon_interval[1])/2;
					}
					
				} else {
					lat_err /=2;
				
					if ( (cd & mask) != 0){
						lat_interval[0] = (lat_interval[0]+lat_interval[1])/2;
					} else {
						lat_interval[1] = (lat_interval[0]+lat_interval[1])/2;
					}
				}
				is_even = is_even ? false : true;
			}
		
		}
		latitude  = (lat_interval[0] + lat_interval[1]) / 2;
		longitude = (lon_interval[0] + lon_interval[1]) / 2;

		return new double []{latitude, longitude, lat_err, lon_err};
	}		",https://www.github.com/kungfoo/geohash-java/commit/86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b
86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b,GeoHash.java,getNeighbour,"	public GeoHash getNeighbour(int direction, int length) {
		return null;
	}",https://www.github.com/kungfoo/geohash-java/commit/86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b
86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b
86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b,GeoHash.java,toBase32,"	public String toBase32() {
		StringBuffer buf = new StringBuffer();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b
86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b
86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b
86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		double centerLatitude = (boundingBox[0].latitude + boundingBox[1].latitude) / 2;
		double centerLongitude = (boundingBox[0].longitude + boundingBox[1].longitude) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b
86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b,GeoHash.java,getBoundingBoxPoints,"	public WGS84Point[] getBoundingBoxPoints() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b
86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b,GeoHash.java,toString,"	public String toString() {
		return String.format(""%s -> [%s,%s]"", longToBitString(bits), boundingBox[0], boundingBox[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b
86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b,GeoHash.java,mask,"	public final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b
86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b,GeoHash.java,getNorthernNeighbour,"	protected GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b
86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b,GeoHash.java,getSouthernNeighbour,"	protected GeoHash getSouthernNeighbour(){
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		latBits[0] += 1;
		latBits[0] = maskLastNBits(latBits[0], latBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b
86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b,GeoHash.java,getEasternNeighbour,"	protected GeoHash getEasternNeighbour(){
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] += 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b
86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b,GeoHash.java,getWesternNeighbour,"	protected GeoHash getWesternNeighbour(){
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] -= 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b
86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				if ((latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				latBits[0] <<= 1;
			} else {
				if ((lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b
86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b
86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		copyOfBits <<= 1;
		int numberOfBits = getNumberOfLatLonBits()[0];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b
86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		int numberOfBits = getNumberOfLatLonBits()[1];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b
86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b
86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b
86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b
86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b,GeoHash.java,longToBitString,"	protected static String longToBitString(long value) {
		StringBuffer buf = new StringBuffer();
		for (int i = 64; i > 0; i--) {
			long bit = value & FIRST_BIT_FLAGGED;
			if (bit == FIRST_BIT_FLAGGED) {
				buf.append('1');
			} else {
				buf.append('0');
			}
			value <<= 1;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b
86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b,GeoHash.java,highCapDesiredPrecision,"	private void highCapDesiredPrecision(int desiredPrecision) {
		if (desiredPrecision > 64)
			desiredPrecision = 64;",https://www.github.com/kungfoo/geohash-java/commit/86c6e339d73ef9b3a45f6956b65c1e6baa7f8f2b
4f75aa51e73be54c0a8f2299758ba088aa425214,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude,
			double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5
				: 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/4f75aa51e73be54c0a8f2299758ba088aa425214
4f75aa51e73be54c0a8f2299758ba088aa425214,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude,
			int numberOfBits) {
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/4f75aa51e73be54c0a8f2299758ba088aa425214
4f75aa51e73be54c0a8f2299758ba088aa425214,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] points=decode(geohash);
		return GeoHash.withCharacterPrecision(points[0], points[1], geohash.length());
	}",https://www.github.com/kungfoo/geohash-java/commit/4f75aa51e73be54c0a8f2299758ba088aa425214
4f75aa51e73be54c0a8f2299758ba088aa425214,GeoHash.java,decode,"	public static double[] decode (String geohash){
		double[] lat_interval = {-90.0 , 90.0};
		double[] lon_interval = {-180.0, 180.0};
		
		double lat_err =  90.0;
		double lon_err = 180.0;
		boolean is_even = true;
		int sz = geohash.length();
		int[] bits = {16, 8, 4, 2, 1};
		int bsz = bits.length;
		double latitude, longitude;
		for (int i = 0; i < sz; i++){
			
			int cd = _decodemap.get(geohash.charAt(i));
			
			for (int z = 0; z< bsz; z++){
				int mask = bits[z];
				if (is_even){
					lon_err /= 2;
					if ((cd & mask) != 0){
						lon_interval[0] = (lon_interval[0]+lon_interval[1])/2;
					} else {
						lon_interval[1] = (lon_interval[0]+lon_interval[1])/2;
					}
					
				} else {
					lat_err /=2;
				
					if ( (cd & mask) != 0){
						lat_interval[0] = (lat_interval[0]+lat_interval[1])/2;
					} else {
						lat_interval[1] = (lat_interval[0]+lat_interval[1])/2;
					}
				}
				is_even = is_even ? false : true;
			}
		
		}
		latitude  = (lat_interval[0] + lat_interval[1]) / 2;
		longitude = (lon_interval[0] + lon_interval[1]) / 2;

		return new double []{latitude, longitude, lat_err, lon_err};
	}		",https://www.github.com/kungfoo/geohash-java/commit/4f75aa51e73be54c0a8f2299758ba088aa425214
4f75aa51e73be54c0a8f2299758ba088aa425214,GeoHash.java,getNeighbour,"	public GeoHash getNeighbour(int direction, int length) {
		return null;
	}",https://www.github.com/kungfoo/geohash-java/commit/4f75aa51e73be54c0a8f2299758ba088aa425214
4f75aa51e73be54c0a8f2299758ba088aa425214,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/4f75aa51e73be54c0a8f2299758ba088aa425214
4f75aa51e73be54c0a8f2299758ba088aa425214,GeoHash.java,toBase32,"	public String toBase32() {
		StringBuffer buf = new StringBuffer();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/4f75aa51e73be54c0a8f2299758ba088aa425214
4f75aa51e73be54c0a8f2299758ba088aa425214,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/4f75aa51e73be54c0a8f2299758ba088aa425214
4f75aa51e73be54c0a8f2299758ba088aa425214,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/4f75aa51e73be54c0a8f2299758ba088aa425214
4f75aa51e73be54c0a8f2299758ba088aa425214,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		double centerLatitude = (boundingBox[0].latitude + boundingBox[1].latitude) / 2;
		double centerLongitude = (boundingBox[0].longitude + boundingBox[1].longitude) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/4f75aa51e73be54c0a8f2299758ba088aa425214
4f75aa51e73be54c0a8f2299758ba088aa425214,GeoHash.java,getBoundingBoxPoints,"	public WGS84Point[] getBoundingBoxPoints() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/4f75aa51e73be54c0a8f2299758ba088aa425214
4f75aa51e73be54c0a8f2299758ba088aa425214,GeoHash.java,toString,"	public String toString() {
		return String.format(""%s -> [%s,%s]"", longToBitString(bits), boundingBox[0], boundingBox[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/4f75aa51e73be54c0a8f2299758ba088aa425214
4f75aa51e73be54c0a8f2299758ba088aa425214,GeoHash.java,mask,"	public final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/4f75aa51e73be54c0a8f2299758ba088aa425214
4f75aa51e73be54c0a8f2299758ba088aa425214,GeoHash.java,getNorthernNeighbour,"	protected GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/4f75aa51e73be54c0a8f2299758ba088aa425214
4f75aa51e73be54c0a8f2299758ba088aa425214,GeoHash.java,getSouthernNeighbour,"	protected GeoHash getSouthernNeighbour(){
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		latBits[0] += 1;
		latBits[0] = maskLastNBits(latBits[0], latBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/4f75aa51e73be54c0a8f2299758ba088aa425214
4f75aa51e73be54c0a8f2299758ba088aa425214,GeoHash.java,getEasternNeighbour,"	protected GeoHash getEasternNeighbour(){
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] += 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/4f75aa51e73be54c0a8f2299758ba088aa425214
4f75aa51e73be54c0a8f2299758ba088aa425214,GeoHash.java,getWesternNeighbour,"	protected GeoHash getWesternNeighbour(){
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] -= 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/4f75aa51e73be54c0a8f2299758ba088aa425214
4f75aa51e73be54c0a8f2299758ba088aa425214,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				if ((latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				latBits[0] <<= 1;
			} else {
				if ((lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/4f75aa51e73be54c0a8f2299758ba088aa425214
4f75aa51e73be54c0a8f2299758ba088aa425214,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/4f75aa51e73be54c0a8f2299758ba088aa425214
4f75aa51e73be54c0a8f2299758ba088aa425214,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		copyOfBits <<= 1;
		int numberOfBits = getNumberOfLatLonBits()[0];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/4f75aa51e73be54c0a8f2299758ba088aa425214
4f75aa51e73be54c0a8f2299758ba088aa425214,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		int numberOfBits = getNumberOfLatLonBits()[1];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/4f75aa51e73be54c0a8f2299758ba088aa425214
4f75aa51e73be54c0a8f2299758ba088aa425214,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/4f75aa51e73be54c0a8f2299758ba088aa425214
4f75aa51e73be54c0a8f2299758ba088aa425214,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/4f75aa51e73be54c0a8f2299758ba088aa425214
4f75aa51e73be54c0a8f2299758ba088aa425214,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/4f75aa51e73be54c0a8f2299758ba088aa425214
4f75aa51e73be54c0a8f2299758ba088aa425214,GeoHash.java,longToBitString,"	protected static String longToBitString(long value) {
		StringBuffer buf = new StringBuffer();
		for (int i = 64; i > 0; i--) {
			long bit = value & FIRST_BIT_FLAGGED;
			if (bit == FIRST_BIT_FLAGGED) {
				buf.append('1');
			} else {
				buf.append('0');
			}
			value <<= 1;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/4f75aa51e73be54c0a8f2299758ba088aa425214
4f75aa51e73be54c0a8f2299758ba088aa425214,GeoHash.java,highCapDesiredPrecision,"	private void highCapDesiredPrecision(int desiredPrecision) {
		if (desiredPrecision > 64)
			desiredPrecision = 64;",https://www.github.com/kungfoo/geohash-java/commit/4f75aa51e73be54c0a8f2299758ba088aa425214
351338a6d8d701804cb895a4fcb0c0f8b18d4d75,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude,
			double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5
				: 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/351338a6d8d701804cb895a4fcb0c0f8b18d4d75
351338a6d8d701804cb895a4fcb0c0f8b18d4d75,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude,
			int numberOfBits) {
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/351338a6d8d701804cb895a4fcb0c0f8b18d4d75
351338a6d8d701804cb895a4fcb0c0f8b18d4d75,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] points=decode(geohash);
		return GeoHash.withCharacterPrecision(points[0], points[1], geohash.length());
	}",https://www.github.com/kungfoo/geohash-java/commit/351338a6d8d701804cb895a4fcb0c0f8b18d4d75
351338a6d8d701804cb895a4fcb0c0f8b18d4d75,GeoHash.java,decode,"	public static double[] decode (String geohash){
		double[] lat_interval = {-90.0 , 90.0};
		double[] lon_interval = {-180.0, 180.0};
		
		double lat_err =  90.0;
		double lon_err = 180.0;
		boolean is_even = true;
		int sz = geohash.length();
		int[] bits = {16, 8, 4, 2, 1};
		int bsz = bits.length;
		double latitude, longitude;
		for (int i = 0; i < sz; i++){
			
			int cd = _decodemap.get(geohash.charAt(i));
			
			for (int z = 0; z< bsz; z++){
				int mask = bits[z];
				if (is_even){
					lon_err /= 2;
					if ((cd & mask) != 0){
						lon_interval[0] = (lon_interval[0]+lon_interval[1])/2;
					} else {
						lon_interval[1] = (lon_interval[0]+lon_interval[1])/2;
					}
					
				} else {
					lat_err /=2;
				
					if ( (cd & mask) != 0){
						lat_interval[0] = (lat_interval[0]+lat_interval[1])/2;
					} else {
						lat_interval[1] = (lat_interval[0]+lat_interval[1])/2;
					}
				}
				is_even = !is_even;
			}
		
		}
		latitude  = (lat_interval[0] + lat_interval[1]) / 2;
		longitude = (lon_interval[0] + lon_interval[1]) / 2;

		return new double []{latitude, longitude, lat_err, lon_err};
	}		",https://www.github.com/kungfoo/geohash-java/commit/351338a6d8d701804cb895a4fcb0c0f8b18d4d75
351338a6d8d701804cb895a4fcb0c0f8b18d4d75,GeoHash.java,getNeighbour,"	public GeoHash getNeighbour(int direction, int length) {
		return null;
	}",https://www.github.com/kungfoo/geohash-java/commit/351338a6d8d701804cb895a4fcb0c0f8b18d4d75
351338a6d8d701804cb895a4fcb0c0f8b18d4d75,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/351338a6d8d701804cb895a4fcb0c0f8b18d4d75
351338a6d8d701804cb895a4fcb0c0f8b18d4d75,GeoHash.java,toBase32,"	public String toBase32() {
		StringBuffer buf = new StringBuffer();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/351338a6d8d701804cb895a4fcb0c0f8b18d4d75
351338a6d8d701804cb895a4fcb0c0f8b18d4d75,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/351338a6d8d701804cb895a4fcb0c0f8b18d4d75
351338a6d8d701804cb895a4fcb0c0f8b18d4d75,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/351338a6d8d701804cb895a4fcb0c0f8b18d4d75
351338a6d8d701804cb895a4fcb0c0f8b18d4d75,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		double centerLatitude = (boundingBox[0].latitude + boundingBox[1].latitude) / 2;
		double centerLongitude = (boundingBox[0].longitude + boundingBox[1].longitude) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/351338a6d8d701804cb895a4fcb0c0f8b18d4d75
351338a6d8d701804cb895a4fcb0c0f8b18d4d75,GeoHash.java,getBoundingBoxPoints,"	public WGS84Point[] getBoundingBoxPoints() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/351338a6d8d701804cb895a4fcb0c0f8b18d4d75
351338a6d8d701804cb895a4fcb0c0f8b18d4d75,GeoHash.java,toString,"	public String toString() {
		return String.format(""%s -> [%s,%s]"", longToBitString(bits), boundingBox[0], boundingBox[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/351338a6d8d701804cb895a4fcb0c0f8b18d4d75
351338a6d8d701804cb895a4fcb0c0f8b18d4d75,GeoHash.java,mask,"	public final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/351338a6d8d701804cb895a4fcb0c0f8b18d4d75
351338a6d8d701804cb895a4fcb0c0f8b18d4d75,GeoHash.java,getNorthernNeighbour,"	protected GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/351338a6d8d701804cb895a4fcb0c0f8b18d4d75
351338a6d8d701804cb895a4fcb0c0f8b18d4d75,GeoHash.java,getSouthernNeighbour,"	protected GeoHash getSouthernNeighbour(){
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		latBits[0] += 1;
		latBits[0] = maskLastNBits(latBits[0], latBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/351338a6d8d701804cb895a4fcb0c0f8b18d4d75
351338a6d8d701804cb895a4fcb0c0f8b18d4d75,GeoHash.java,getEasternNeighbour,"	protected GeoHash getEasternNeighbour(){
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] += 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/351338a6d8d701804cb895a4fcb0c0f8b18d4d75
351338a6d8d701804cb895a4fcb0c0f8b18d4d75,GeoHash.java,getWesternNeighbour,"	protected GeoHash getWesternNeighbour(){
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] -= 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/351338a6d8d701804cb895a4fcb0c0f8b18d4d75
351338a6d8d701804cb895a4fcb0c0f8b18d4d75,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				if ((latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				latBits[0] <<= 1;
			} else {
				if ((lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/351338a6d8d701804cb895a4fcb0c0f8b18d4d75
351338a6d8d701804cb895a4fcb0c0f8b18d4d75,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/351338a6d8d701804cb895a4fcb0c0f8b18d4d75
351338a6d8d701804cb895a4fcb0c0f8b18d4d75,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		copyOfBits <<= 1;
		int numberOfBits = getNumberOfLatLonBits()[0];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/351338a6d8d701804cb895a4fcb0c0f8b18d4d75
351338a6d8d701804cb895a4fcb0c0f8b18d4d75,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		int numberOfBits = getNumberOfLatLonBits()[1];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/351338a6d8d701804cb895a4fcb0c0f8b18d4d75
351338a6d8d701804cb895a4fcb0c0f8b18d4d75,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/351338a6d8d701804cb895a4fcb0c0f8b18d4d75
351338a6d8d701804cb895a4fcb0c0f8b18d4d75,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/351338a6d8d701804cb895a4fcb0c0f8b18d4d75
351338a6d8d701804cb895a4fcb0c0f8b18d4d75,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/351338a6d8d701804cb895a4fcb0c0f8b18d4d75
351338a6d8d701804cb895a4fcb0c0f8b18d4d75,GeoHash.java,longToBitString,"	protected static String longToBitString(long value) {
		StringBuffer buf = new StringBuffer();
		for (int i = 64; i > 0; i--) {
			long bit = value & FIRST_BIT_FLAGGED;
			if (bit == FIRST_BIT_FLAGGED) {
				buf.append('1');
			} else {
				buf.append('0');
			}
			value <<= 1;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/351338a6d8d701804cb895a4fcb0c0f8b18d4d75
351338a6d8d701804cb895a4fcb0c0f8b18d4d75,GeoHash.java,highCapDesiredPrecision,"	private void highCapDesiredPrecision(int desiredPrecision) {
		if (desiredPrecision > 64)
			desiredPrecision = 64;",https://www.github.com/kungfoo/geohash-java/commit/351338a6d8d701804cb895a4fcb0c0f8b18d4d75
2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
	}",https://www.github.com/kungfoo/geohash-java/commit/2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d
2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d
2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d
2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d,GeoHashTest.java,testLongToBitString,"	public void testLongToBitString() {
		hash.bits = 0x5555555555555555l;
		assertEquals(
				""0101010101010101010101010101010101010101010101010101010101010101"",",https://www.github.com/kungfoo/geohash-java/commit/2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d
2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d
2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d,GeoHashTest.java,testDecode,"	public void testDecode() {
		//for all lat/lon pairs check decoded point is in the same bbox as the geohash formed by encoder
		//TODO could possibly be less brute-force here and be more scientific about possible failure points
		for (double lat=-90;lat<=90;lat++) {
			for (double lng=-180;lng<=180;lng++) {				",https://www.github.com/kungfoo/geohash-java/commit/2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d
2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(),
				hash.within(bbox));",https://www.github.com/kungfoo/geohash-java/commit/2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d
2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within ""
				+ bbox.toBase32(), hash.within(bbox));",https://www.github.com/kungfoo/geohash-java/commit/2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d
2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d
2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d
2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		hash = GeoHash.withCharacterPrecision(20, 31, 12);
		assertEquals(""sew1c2vs2q5r"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20, 31, 12);
		assertEquals(""ksqn1rje83g2"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20.783236276, 31.9867127312312,
				12);
		assertEquals(""ksq9zbs0b7vw"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321,
				39.0247389581054, 12);
		assertEquals(""hf7u8p8gn747"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321,
				39.0247389581054, 8);
		assertEquals(""hf7u8p8g"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321,
				39.0247389581054, 4);
		assertEquals(""hf7u"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d
2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d
2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d
2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xc000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xd000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);

		// and then from there, just a little south of sanity...
		south = east.getSouthernNeighbour();
		assertEquals(0x0l, south.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d
2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);
		String base32 = hash.toBase32();
		System.out.println(base32);
		assertEquals(""dr4jb0bn2180"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d
2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter =""
				+ hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out
				.println(String.format(""%s,%s"", hash.getBoundingBoxPoints()[0],",https://www.github.com/kungfoo/geohash-java/commit/2c9c4837dadbd6ece2d9d68fdd2d328f56039e0d
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude,
			double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5
				: 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude,
			int numberOfBits) {
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] points=decode(geohash);
		return GeoHash.withCharacterPrecision(points[0], points[1], geohash.length());
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHash.java,decode,"	public static double[] decode (String geohash){
		double[] lat_interval = {-90.0 , 90.0};
		double[] lon_interval = {-180.0, 180.0};
		
		double lat_err =  90.0;
		double lon_err = 180.0;
		boolean is_even = true;
		int sz = geohash.length();
		int[] bits = {16, 8, 4, 2, 1};
		int bsz = bits.length;
		double latitude, longitude;
		for (int i = 0; i < sz; i++){
			
			int cd = _decodemap.get(geohash.charAt(i));
			
			for (int z = 0; z< bsz; z++){
				int mask = bits[z];
				if (is_even){
					lon_err /= 2;
					if ((cd & mask) != 0){
						lon_interval[0] = (lon_interval[0]+lon_interval[1])/2;
					} else {
						lon_interval[1] = (lon_interval[0]+lon_interval[1])/2;
					}
					
				} else {
					lat_err /=2;
				
					if ( (cd & mask) != 0){
						lat_interval[0] = (lat_interval[0]+lat_interval[1])/2;
					} else {
						lat_interval[1] = (lat_interval[0]+lat_interval[1])/2;
					}
				}
				is_even = is_even ? false : true;
			}
		
		}
		latitude  = (lat_interval[0] + lat_interval[1]) / 2;
		longitude = (lon_interval[0] + lon_interval[1]) / 2;

		return new double []{latitude, longitude, lat_err, lon_err};
	}		",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHash.java,getNeighbour,"	public GeoHash getNeighbour(int direction, int length) {
		return null;
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHash.java,toBase32,"	public String toBase32() {
		StringBuffer buf = new StringBuffer();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		double centerLatitude = (boundingBox[0].latitude + boundingBox[1].latitude) / 2;
		double centerLongitude = (boundingBox[0].longitude + boundingBox[1].longitude) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHash.java,getBoundingBoxPoints,"	public WGS84Point[] getBoundingBoxPoints() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHash.java,toString,"	public String toString() {
		return String.format(""%s -> [%s,%s]"", longToBitString(bits), boundingBox[0], boundingBox[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHash.java,mask,"	public final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHash.java,getNorthernNeighbour,"	protected GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHash.java,getSouthernNeighbour,"	protected GeoHash getSouthernNeighbour(){
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		latBits[0] += 1;
		latBits[0] = maskLastNBits(latBits[0], latBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHash.java,getEasternNeighbour,"	protected GeoHash getEasternNeighbour(){
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] += 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHash.java,getWesternNeighbour,"	protected GeoHash getWesternNeighbour(){
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] -= 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				if ((latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				latBits[0] <<= 1;
			} else {
				if ((lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		copyOfBits <<= 1;
		int numberOfBits = getNumberOfLatLonBits()[0];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		int numberOfBits = getNumberOfLatLonBits()[1];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHash.java,longToBitString,"	protected static String longToBitString(long value) {
		StringBuffer buf = new StringBuffer();
		for (int i = 64; i > 0; i--) {
			long bit = value & FIRST_BIT_FLAGGED;
			if (bit == FIRST_BIT_FLAGGED) {
				buf.append('1');
			} else {
				buf.append('0');
			}
			value <<= 1;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHash.java,highCapDesiredPrecision,"	private void highCapDesiredPrecision(int desiredPrecision) {
		if (desiredPrecision > 64)
			desiredPrecision = 64;",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHashTest.java,testLongToBitString,"	public void testLongToBitString() {
		hash.bits = 0x5555555555555555l;
		assertEquals(
				""0101010101010101010101010101010101010101010101010101010101010101"",",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHashTest.java,testDecode,"	public void testDecode() {
		//for all lat/lon pairs check decoded point is in the same bbox as the geohash formed by encoder
		//TODO could possibly be less brute-force here and be more scientific about possible failure points
		for (double lat = -90; lat <= 90; lat += 1) {
			for (double lon = -180; lon <= 180; lon += 1) {",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(),
				hash.within(bbox));",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within ""
				+ bbox.toBase32(), hash.within(bbox));",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		hash = GeoHash.withCharacterPrecision(20, 31, 12);
		assertEquals(""sew1c2vs2q5r"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20, 31, 12);
		assertEquals(""ksqn1rje83g2"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20.783236276, 31.9867127312312,
				12);
		assertEquals(""ksq9zbs0b7vw"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321,
				39.0247389581054, 12);
		assertEquals(""hf7u8p8gn747"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321,
				39.0247389581054, 8);
		assertEquals(""hf7u8p8g"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321,
				39.0247389581054, 4);
		assertEquals(""hf7u"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xc000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xd000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);

		// and then from there, just a little south of sanity...
		south = east.getSouthernNeighbour();
		assertEquals(0x0l, south.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);
		String base32 = hash.toBase32();
		System.out.println(base32);
		assertEquals(""dr4jb0bn2180"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
8386280f55a3cb617e0dbe387021eba6d4766883,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter =""
				+ hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out
				.println(String.format(""%s,%s"", hash.getBoundingBoxPoints()[0],",https://www.github.com/kungfoo/geohash-java/commit/8386280f55a3cb617e0dbe387021eba6d4766883
503d075a44cd84957cdef0696de9da55cdf810d2,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
	}",https://www.github.com/kungfoo/geohash-java/commit/503d075a44cd84957cdef0696de9da55cdf810d2
503d075a44cd84957cdef0696de9da55cdf810d2,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/503d075a44cd84957cdef0696de9da55cdf810d2
503d075a44cd84957cdef0696de9da55cdf810d2,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/503d075a44cd84957cdef0696de9da55cdf810d2
503d075a44cd84957cdef0696de9da55cdf810d2,GeoHashTest.java,testLongToBitString,"	public void testLongToBitString() {
		hash.bits = 0x5555555555555555l;
		assertEquals(
				""0101010101010101010101010101010101010101010101010101010101010101"",",https://www.github.com/kungfoo/geohash-java/commit/503d075a44cd84957cdef0696de9da55cdf810d2
503d075a44cd84957cdef0696de9da55cdf810d2,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/503d075a44cd84957cdef0696de9da55cdf810d2
503d075a44cd84957cdef0696de9da55cdf810d2,GeoHashTest.java,testDecode,"	public void testDecode() {
		//for all lat/lon pairs check decoded point is in the same bbox as the geohash formed by encoder
		//TODO could possibly be less brute-force here and be more scientific about possible failure points
		for (double lat = -90; lat <= 90; lat += 1) {
			for (double lon = -180; lon <= 180; lon += 1) {",https://www.github.com/kungfoo/geohash-java/commit/503d075a44cd84957cdef0696de9da55cdf810d2
503d075a44cd84957cdef0696de9da55cdf810d2,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(),
				hash.within(bbox));",https://www.github.com/kungfoo/geohash-java/commit/503d075a44cd84957cdef0696de9da55cdf810d2
503d075a44cd84957cdef0696de9da55cdf810d2,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within ""
				+ bbox.toBase32(), hash.within(bbox));",https://www.github.com/kungfoo/geohash-java/commit/503d075a44cd84957cdef0696de9da55cdf810d2
503d075a44cd84957cdef0696de9da55cdf810d2,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/503d075a44cd84957cdef0696de9da55cdf810d2
503d075a44cd84957cdef0696de9da55cdf810d2,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/503d075a44cd84957cdef0696de9da55cdf810d2
503d075a44cd84957cdef0696de9da55cdf810d2,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		hash = GeoHash.withCharacterPrecision(20, 31, 12);
		assertEquals(""sew1c2vs2q5r"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20, 31, 12);
		assertEquals(""ksqn1rje83g2"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20.783236276, 31.9867127312312,
				12);
		assertEquals(""ksq9zbs0b7vw"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321,
				39.0247389581054, 12);
		assertEquals(""hf7u8p8gn747"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321,
				39.0247389581054, 8);
		assertEquals(""hf7u8p8g"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321,
				39.0247389581054, 4);
		assertEquals(""hf7u"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/503d075a44cd84957cdef0696de9da55cdf810d2
503d075a44cd84957cdef0696de9da55cdf810d2,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/503d075a44cd84957cdef0696de9da55cdf810d2
503d075a44cd84957cdef0696de9da55cdf810d2,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/503d075a44cd84957cdef0696de9da55cdf810d2
503d075a44cd84957cdef0696de9da55cdf810d2,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xc000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xd000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);

		// and then from there, just a little south of sanity...
		south = east.getSouthernNeighbour();
		assertEquals(0x0l, south.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/503d075a44cd84957cdef0696de9da55cdf810d2
503d075a44cd84957cdef0696de9da55cdf810d2,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);
		String base32 = hash.toBase32();
		System.out.println(base32);
		assertEquals(""dr4jb0bn2180"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/503d075a44cd84957cdef0696de9da55cdf810d2
503d075a44cd84957cdef0696de9da55cdf810d2,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter =""
				+ hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out
				.println(String.format(""%s,%s"", hash.getBoundingBoxPoints()[0],",https://www.github.com/kungfoo/geohash-java/commit/503d075a44cd84957cdef0696de9da55cdf810d2
7d4978b8bb6d49358f68a11437e3b6f436b7f575,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/7d4978b8bb6d49358f68a11437e3b6f436b7f575
7d4978b8bb6d49358f68a11437e3b6f436b7f575,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/7d4978b8bb6d49358f68a11437e3b6f436b7f575
7d4978b8bb6d49358f68a11437e3b6f436b7f575,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] lat_interval = { -90.0, 90.0 };
		double[] lon_interval = { -180.0, 180.0 };
		
		double lat_err = 90.0;
		double lon_err = 180.0;
		boolean is_even = true;
		int sz = geohash.length();
		int[] bits = { 16, 8, 4, 2, 1 };
		int bsz = bits.length;
		double latitude, longitude;
		for (int i = 0; i < sz; i++) {
		
			int cd = _decodemap.get(geohash.charAt(i));
		
			for (int z = 0; z < bsz; z++) {
				int mask = bits[z];
				if (is_even) {
					lon_err /= 2;
					if ((cd & mask) != 0) {
						lon_interval[0] = (lon_interval[0] + lon_interval[1]) / 2;
					} else {
						lon_interval[1] = (lon_interval[0] + lon_interval[1]) / 2;
					}
		
				} else {
					lat_err /= 2;
		
					if ((cd & mask) != 0) {
						lat_interval[0] = (lat_interval[0] + lat_interval[1]) / 2;
					} else {
						lat_interval[1] = (lat_interval[0] + lat_interval[1]) / 2;
					}
				}
				is_even = !is_even;
			}
		
		}
		latitude = (lat_interval[0] + lat_interval[1]) / 2;
		longitude = (lon_interval[0] + lon_interval[1]) / 2;
		double[] points = new double[] { latitude, longitude, lat_err, lon_err };
		
		// TODO: replace duplicate decoding/encoding.
		return GeoHash.withCharacterPrecision(points[0], points[1], geohash.length());
	}",https://www.github.com/kungfoo/geohash-java/commit/7d4978b8bb6d49358f68a11437e3b6f436b7f575
7d4978b8bb6d49358f68a11437e3b6f436b7f575,GeoHash.java,getNeighbour,"	public GeoHash getNeighbour(int direction, int length) {
		return null;
	}",https://www.github.com/kungfoo/geohash-java/commit/7d4978b8bb6d49358f68a11437e3b6f436b7f575
7d4978b8bb6d49358f68a11437e3b6f436b7f575,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/7d4978b8bb6d49358f68a11437e3b6f436b7f575
7d4978b8bb6d49358f68a11437e3b6f436b7f575,GeoHash.java,toBase32,"	public String toBase32() {
		StringBuffer buf = new StringBuffer();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/7d4978b8bb6d49358f68a11437e3b6f436b7f575
7d4978b8bb6d49358f68a11437e3b6f436b7f575,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/7d4978b8bb6d49358f68a11437e3b6f436b7f575
7d4978b8bb6d49358f68a11437e3b6f436b7f575,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/7d4978b8bb6d49358f68a11437e3b6f436b7f575
7d4978b8bb6d49358f68a11437e3b6f436b7f575,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		double centerLatitude = (boundingBox[0].latitude + boundingBox[1].latitude) / 2;
		double centerLongitude = (boundingBox[0].longitude + boundingBox[1].longitude) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/7d4978b8bb6d49358f68a11437e3b6f436b7f575
7d4978b8bb6d49358f68a11437e3b6f436b7f575,GeoHash.java,getBoundingBoxPoints,"	public WGS84Point[] getBoundingBoxPoints() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/7d4978b8bb6d49358f68a11437e3b6f436b7f575
7d4978b8bb6d49358f68a11437e3b6f436b7f575,GeoHash.java,toString,"	public String toString() {
		return String.format(""%s -> [%s,%s]"", longToBitString(bits), boundingBox[0], boundingBox[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/7d4978b8bb6d49358f68a11437e3b6f436b7f575
7d4978b8bb6d49358f68a11437e3b6f436b7f575,GeoHash.java,mask,"	public final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/7d4978b8bb6d49358f68a11437e3b6f436b7f575
7d4978b8bb6d49358f68a11437e3b6f436b7f575,GeoHash.java,getNorthernNeighbour,"	protected GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/7d4978b8bb6d49358f68a11437e3b6f436b7f575
7d4978b8bb6d49358f68a11437e3b6f436b7f575,GeoHash.java,getSouthernNeighbour,"	protected GeoHash getSouthernNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		latBits[0] += 1;
		latBits[0] = maskLastNBits(latBits[0], latBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/7d4978b8bb6d49358f68a11437e3b6f436b7f575
7d4978b8bb6d49358f68a11437e3b6f436b7f575,GeoHash.java,getEasternNeighbour,"	protected GeoHash getEasternNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] += 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/7d4978b8bb6d49358f68a11437e3b6f436b7f575
7d4978b8bb6d49358f68a11437e3b6f436b7f575,GeoHash.java,getWesternNeighbour,"	protected GeoHash getWesternNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] -= 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/7d4978b8bb6d49358f68a11437e3b6f436b7f575
7d4978b8bb6d49358f68a11437e3b6f436b7f575,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				if ((latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				latBits[0] <<= 1;
			} else {
				if ((lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/7d4978b8bb6d49358f68a11437e3b6f436b7f575
7d4978b8bb6d49358f68a11437e3b6f436b7f575,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/7d4978b8bb6d49358f68a11437e3b6f436b7f575
7d4978b8bb6d49358f68a11437e3b6f436b7f575,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		copyOfBits <<= 1;
		int numberOfBits = getNumberOfLatLonBits()[0];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/7d4978b8bb6d49358f68a11437e3b6f436b7f575
7d4978b8bb6d49358f68a11437e3b6f436b7f575,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		int numberOfBits = getNumberOfLatLonBits()[1];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/7d4978b8bb6d49358f68a11437e3b6f436b7f575
7d4978b8bb6d49358f68a11437e3b6f436b7f575,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/7d4978b8bb6d49358f68a11437e3b6f436b7f575
7d4978b8bb6d49358f68a11437e3b6f436b7f575,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/7d4978b8bb6d49358f68a11437e3b6f436b7f575
7d4978b8bb6d49358f68a11437e3b6f436b7f575,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/7d4978b8bb6d49358f68a11437e3b6f436b7f575
7d4978b8bb6d49358f68a11437e3b6f436b7f575,GeoHash.java,longToBitString,"	protected static String longToBitString(long value) {
		StringBuffer buf = new StringBuffer();
		for (int i = 64; i > 0; i--) {
			long bit = value & FIRST_BIT_FLAGGED;
			if (bit == FIRST_BIT_FLAGGED) {
				buf.append('1');
			} else {
				buf.append('0');
			}
			value <<= 1;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/7d4978b8bb6d49358f68a11437e3b6f436b7f575
7d4978b8bb6d49358f68a11437e3b6f436b7f575,GeoHash.java,highCapDesiredPrecision,"	private void highCapDesiredPrecision(int desiredPrecision) {
		if (desiredPrecision > 64)
			desiredPrecision = 64;",https://www.github.com/kungfoo/geohash-java/commit/7d4978b8bb6d49358f68a11437e3b6f436b7f575
c11a97234a7dd7768ed1cfdf4ec57519b586599e,GeoHashDecodingBenchmark.java,setup,"	public void setup(){
		
	}
	
	@Benchmark
	public void benchmarkRandomEncoding(){
		
	}
}",https://www.github.com/kungfoo/geohash-java/commit/c11a97234a7dd7768ed1cfdf4ec57519b586599e
c11a97234a7dd7768ed1cfdf4ec57519b586599e,GeoHashDecodingBenchmark.java,benchmarkRandomEncoding,"	public void benchmarkRandomEncoding(){
		
	}
}",https://www.github.com/kungfoo/geohash-java/commit/c11a97234a7dd7768ed1cfdf4ec57519b586599e
c11a97234a7dd7768ed1cfdf4ec57519b586599e,GeoHashEncodingBenchmark.java,setupBenchmark,"	public void setupBenchmark() {
		hashes = new GeoHash[NUMBER_OF_HASHES];
		latitudes = new double[NUMBER_OF_HASHES];
		longitudes = new double[NUMBER_OF_HASHES];

		Random rand = new Random();
		for (int i = 0; i < NUMBER_OF_HASHES; i++) {
			latitudes[i] = rand.nextDouble() * 180 - 90;",https://www.github.com/kungfoo/geohash-java/commit/c11a97234a7dd7768ed1cfdf4ec57519b586599e
c11a97234a7dd7768ed1cfdf4ec57519b586599e,GeoHashEncodingBenchmark.java,benchmarkGeoHashEncoding,"	public void benchmarkGeoHashEncoding() {
		for (int i = 0; i < NUMBER_OF_HASHES; i++) {
			hashes[i] = GeoHash.withBitPrecision(latitudes[i], longitudes[i], 60);",https://www.github.com/kungfoo/geohash-java/commit/c11a97234a7dd7768ed1cfdf4ec57519b586599e
dc7dccb9a5580ef3bb8d255ebbadbc92a8453fce,GeoHashDecodingBenchmark.java,setup,"	public void setup(){
		randomHashes = new String[NUMBER_OF_HASHES];
		Random rand = new Random();
		for(int i = 0; i < NUMBER_OF_HASHES; i++){
			// at least two chars",https://www.github.com/kungfoo/geohash-java/commit/dc7dccb9a5580ef3bb8d255ebbadbc92a8453fce
dc7dccb9a5580ef3bb8d255ebbadbc92a8453fce,GeoHashDecodingBenchmark.java,benchmarkRandomDecoding,"	public void benchmarkRandomDecoding(){
		for(String hash : randomHashes){
			GeoHash geoHash = GeoHash.fromGeohashString(hash);",https://www.github.com/kungfoo/geohash-java/commit/dc7dccb9a5580ef3bb8d255ebbadbc92a8453fce
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] lat_interval = { -90.0, 90.0 };
		double[] lon_interval = { -180.0, 180.0 };

		double lat_err = 90.0;
		double lon_err = 180.0;
		boolean is_even = true;
		int sz = geohash.length();
		int[] bits = { 16, 8, 4, 2, 1 };
		int bsz = bits.length;
		double latitude, longitude;
		for (int i = 0; i < sz; i++) {

			int cd = _decodemap.get(geohash.charAt(i));

			for (int z = 0; z < bsz; z++) {
				int mask = bits[z];
				if (is_even) {
					lon_err /= 2;
					if ((cd & mask) != 0) {
						lon_interval[0] = (lon_interval[0] + lon_interval[1]) / 2;
					} else {
						lon_interval[1] = (lon_interval[0] + lon_interval[1]) / 2;
					}

				} else {
					lat_err /= 2;

					if ((cd & mask) != 0) {
						lat_interval[0] = (lat_interval[0] + lat_interval[1]) / 2;
					} else {
						lat_interval[1] = (lat_interval[0] + lat_interval[1]) / 2;
					}
				}
				is_even = !is_even;
			}

		}
		latitude = (lat_interval[0] + lat_interval[1]) / 2;
		longitude = (lon_interval[0] + lon_interval[1]) / 2;
		double[] points = new double[] { latitude, longitude, lat_err, lon_err };

		// TODO: replace duplicate decoding/encoding.
		return GeoHash.withCharacterPrecision(points[0], points[1], geohash.length());
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHash.java,getNeighbour,"	public GeoHash getNeighbour(int direction, int length) {
		return null;
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHash.java,toBase32,"	public String toBase32() {
		StringBuffer buf = new StringBuffer();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		double centerLatitude = (boundingBox[0].latitude + boundingBox[1].latitude) / 2;
		double centerLongitude = (boundingBox[0].longitude + boundingBox[1].longitude) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHash.java,getBoundingBoxPoints,"	public WGS84Point[] getBoundingBoxPoints() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHash.java,toString,"	public String toString() {
		return String.format(""%s -> %s"", longToBitString(bits), boundingBox != null ? boundingBox : ""null"");
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHash.java,mask,"	public final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHash.java,getNorthernNeighbour,"	protected GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHash.java,getSouthernNeighbour,"	protected GeoHash getSouthernNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		latBits[0] += 1;
		latBits[0] = maskLastNBits(latBits[0], latBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHash.java,getEasternNeighbour,"	protected GeoHash getEasternNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] += 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHash.java,getWesternNeighbour,"	protected GeoHash getWesternNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] -= 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				if ((latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				latBits[0] <<= 1;
			} else {
				if ((lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		copyOfBits <<= 1;
		int numberOfBits = getNumberOfLatLonBits()[0];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		int numberOfBits = getNumberOfLatLonBits()[1];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHash.java,longToBitString,"	protected static String longToBitString(long value) {
		StringBuffer buf = new StringBuffer();
		for (int i = 64; i > 0; i--) {
			long bit = value & FIRST_BIT_FLAGGED;
			if (bit == FIRST_BIT_FLAGGED) {
				buf.append('1');
			} else {
				buf.append('0');
			}
			value <<= 1;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHash.java,highCapDesiredPrecision,"	private void highCapDesiredPrecision(int desiredPrecision) {
		if (desiredPrecision > 64)
			desiredPrecision = 64;",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHashTest.java,testLongToBitString,"	public void testLongToBitString() {
		hash.bits = 0x5555555555555555l;
		assertEquals(""0101010101010101010101010101010101010101010101010101010101010101"", GeoHash
				.longToBitString(hash.bits));",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		// TODO could possibly be less brute-force here and be more scientific
		// about possible failure points
		for (double lat = -90; lat <= 90; lat += 1) {
			for (double lon = -180; lon <= 180; lon += 1) {",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		hash = GeoHash.withCharacterPrecision(20, 31, 12);
		assertEquals(""sew1c2vs2q5r"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20, 31, 12);
		assertEquals(""ksqn1rje83g2"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20.783236276, 31.9867127312312, 12);
		assertEquals(""ksq9zbs0b7vw"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 12);
		assertEquals(""hf7u8p8gn747"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 8);
		assertEquals(""hf7u8p8g"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 4);
		assertEquals(""hf7u"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xc000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xd000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);

		// and then from there, just a little south of sanity...
		south = east.getSouthernNeighbour();
		assertEquals(0x0l, south.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHashTest.java,testEquals,"	public void testEquals() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHashTest.java,testMoveAroundWorldOnLongitudeStrip,"	public void testMoveAroundWorldOnLongitudeStrip() {
		for (int bits = 2; bits < 12; bits++) {
			// this divides the longitude range by 2^bits",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;

		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);
		String base32 = hash.toBase32();
		System.out.println(base32);
		assertEquals(""dr4jb0bn2180"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
151cf475a4b1e30da88ad882eec636ec1a0ce232,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(String.format(""%s,%s"", hash.getBoundingBoxPoints()[0], hash.getBoundingBoxPoints()[1]));
	}",https://www.github.com/kungfoo/geohash-java/commit/151cf475a4b1e30da88ad882eec636ec1a0ce232
ae50efb15b6ae04eee916a764bc7039490b6c590,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
	}",https://www.github.com/kungfoo/geohash-java/commit/ae50efb15b6ae04eee916a764bc7039490b6c590
ae50efb15b6ae04eee916a764bc7039490b6c590,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/ae50efb15b6ae04eee916a764bc7039490b6c590
ae50efb15b6ae04eee916a764bc7039490b6c590,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/ae50efb15b6ae04eee916a764bc7039490b6c590
ae50efb15b6ae04eee916a764bc7039490b6c590,GeoHashTest.java,testLongToBitString,"	public void testLongToBitString() {
		hash.bits = 0x5555555555555555l;
		assertEquals(""0101010101010101010101010101010101010101010101010101010101010101"", GeoHash
				.longToBitString(hash.bits));",https://www.github.com/kungfoo/geohash-java/commit/ae50efb15b6ae04eee916a764bc7039490b6c590
ae50efb15b6ae04eee916a764bc7039490b6c590,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/ae50efb15b6ae04eee916a764bc7039490b6c590
ae50efb15b6ae04eee916a764bc7039490b6c590,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		// TODO could possibly be less brute-force here and be more scientific
		// about possible failure points
		for (double lat = -90; lat <= 90; lat += 1) {
			for (double lon = -180; lon <= 180; lon += 1) {",https://www.github.com/kungfoo/geohash-java/commit/ae50efb15b6ae04eee916a764bc7039490b6c590
ae50efb15b6ae04eee916a764bc7039490b6c590,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/ae50efb15b6ae04eee916a764bc7039490b6c590
ae50efb15b6ae04eee916a764bc7039490b6c590,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/ae50efb15b6ae04eee916a764bc7039490b6c590
ae50efb15b6ae04eee916a764bc7039490b6c590,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/ae50efb15b6ae04eee916a764bc7039490b6c590
ae50efb15b6ae04eee916a764bc7039490b6c590,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/ae50efb15b6ae04eee916a764bc7039490b6c590
ae50efb15b6ae04eee916a764bc7039490b6c590,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		hash = GeoHash.withCharacterPrecision(20, 31, 12);
		assertEquals(""sew1c2vs2q5r"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20, 31, 12);
		assertEquals(""ksqn1rje83g2"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20.783236276, 31.9867127312312, 12);
		assertEquals(""ksq9zbs0b7vw"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 12);
		assertEquals(""hf7u8p8gn747"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 8);
		assertEquals(""hf7u8p8g"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 4);
		assertEquals(""hf7u"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/ae50efb15b6ae04eee916a764bc7039490b6c590
ae50efb15b6ae04eee916a764bc7039490b6c590,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/ae50efb15b6ae04eee916a764bc7039490b6c590
ae50efb15b6ae04eee916a764bc7039490b6c590,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/ae50efb15b6ae04eee916a764bc7039490b6c590
ae50efb15b6ae04eee916a764bc7039490b6c590,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xc000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xd000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);

		// and then from there, just a little south of sanity...
		south = east.getSouthernNeighbour();
		assertEquals(0x0l, south.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/ae50efb15b6ae04eee916a764bc7039490b6c590
ae50efb15b6ae04eee916a764bc7039490b6c590,GeoHashTest.java,testEquals,"	public void testEquals() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));
	}",https://www.github.com/kungfoo/geohash-java/commit/ae50efb15b6ae04eee916a764bc7039490b6c590
ae50efb15b6ae04eee916a764bc7039490b6c590,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException{
		String[] directions = {""Northern"", ""Eastern"", ""Southern"", ""Western""};
		for(String direction : directions){
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/ae50efb15b6ae04eee916a764bc7039490b6c590
ae50efb15b6ae04eee916a764bc7039490b6c590,GeoHashTest.java,checkMoveAroundStrip,"	public void checkMoveAroundStrip(String direction) throws SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {
		for (int bits = 2; bits < 12; bits++) {
			// this divides the range by 2^bits",https://www.github.com/kungfoo/geohash-java/commit/ae50efb15b6ae04eee916a764bc7039490b6c590
ae50efb15b6ae04eee916a764bc7039490b6c590,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;

		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);
		String base32 = hash.toBase32();
		System.out.println(base32);
		assertEquals(""dr4jb0bn2180"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/ae50efb15b6ae04eee916a764bc7039490b6c590
ae50efb15b6ae04eee916a764bc7039490b6c590,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(String.format(""%s,%s"", hash.getBoundingBoxPoints()[0], hash.getBoundingBoxPoints()[1]));
	}",https://www.github.com/kungfoo/geohash-java/commit/ae50efb15b6ae04eee916a764bc7039490b6c590
5f1bdda11f0134f692bc2f6877df5a6204e0adf9,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
	}",https://www.github.com/kungfoo/geohash-java/commit/5f1bdda11f0134f692bc2f6877df5a6204e0adf9
5f1bdda11f0134f692bc2f6877df5a6204e0adf9,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/5f1bdda11f0134f692bc2f6877df5a6204e0adf9
5f1bdda11f0134f692bc2f6877df5a6204e0adf9,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/5f1bdda11f0134f692bc2f6877df5a6204e0adf9
5f1bdda11f0134f692bc2f6877df5a6204e0adf9,GeoHashTest.java,testLongToBitString,"	public void testLongToBitString() {
		hash.bits = 0x5555555555555555l;
		assertEquals(""0101010101010101010101010101010101010101010101010101010101010101"", GeoHash
				.longToBitString(hash.bits));",https://www.github.com/kungfoo/geohash-java/commit/5f1bdda11f0134f692bc2f6877df5a6204e0adf9
5f1bdda11f0134f692bc2f6877df5a6204e0adf9,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/5f1bdda11f0134f692bc2f6877df5a6204e0adf9
5f1bdda11f0134f692bc2f6877df5a6204e0adf9,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		// TODO could possibly be less brute-force here and be more scientific
		// about possible failure points
		Random rand = new Random();
		for (double lat = -90; lat <= 90; lat += rand.nextDouble() + 0.5) {
			for (double lon = -180; lon <= 180; lon += rand.nextDouble() + 0.5) {",https://www.github.com/kungfoo/geohash-java/commit/5f1bdda11f0134f692bc2f6877df5a6204e0adf9
5f1bdda11f0134f692bc2f6877df5a6204e0adf9,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/5f1bdda11f0134f692bc2f6877df5a6204e0adf9
5f1bdda11f0134f692bc2f6877df5a6204e0adf9,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/5f1bdda11f0134f692bc2f6877df5a6204e0adf9
5f1bdda11f0134f692bc2f6877df5a6204e0adf9,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/5f1bdda11f0134f692bc2f6877df5a6204e0adf9
5f1bdda11f0134f692bc2f6877df5a6204e0adf9,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/5f1bdda11f0134f692bc2f6877df5a6204e0adf9
5f1bdda11f0134f692bc2f6877df5a6204e0adf9,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		hash = GeoHash.withCharacterPrecision(20, 31, 12);
		assertEquals(""sew1c2vs2q5r"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20, 31, 12);
		assertEquals(""ksqn1rje83g2"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20.783236276, 31.9867127312312, 12);
		assertEquals(""ksq9zbs0b7vw"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 12);
		assertEquals(""hf7u8p8gn747"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 8);
		assertEquals(""hf7u8p8g"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 4);
		assertEquals(""hf7u"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/5f1bdda11f0134f692bc2f6877df5a6204e0adf9
5f1bdda11f0134f692bc2f6877df5a6204e0adf9,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/5f1bdda11f0134f692bc2f6877df5a6204e0adf9
5f1bdda11f0134f692bc2f6877df5a6204e0adf9,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/5f1bdda11f0134f692bc2f6877df5a6204e0adf9
5f1bdda11f0134f692bc2f6877df5a6204e0adf9,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xc000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xd000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);

		// and then from there, just a little south of sanity...
		south = east.getSouthernNeighbour();
		assertEquals(0x0l, south.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/5f1bdda11f0134f692bc2f6877df5a6204e0adf9
5f1bdda11f0134f692bc2f6877df5a6204e0adf9,GeoHashTest.java,testEquals,"	public void testEquals() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));
	}",https://www.github.com/kungfoo/geohash-java/commit/5f1bdda11f0134f692bc2f6877df5a6204e0adf9
5f1bdda11f0134f692bc2f6877df5a6204e0adf9,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws SecurityException, NoSuchMethodException,
			IllegalArgumentException, IllegalAccessException, InvocationTargetException {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/5f1bdda11f0134f692bc2f6877df5a6204e0adf9
5f1bdda11f0134f692bc2f6877df5a6204e0adf9,GeoHashTest.java,checkMoveAroundStrip,"	public void checkMoveAroundStrip(String direction) throws SecurityException, NoSuchMethodException,
			IllegalArgumentException, IllegalAccessException, InvocationTargetException {
		for (int bits = 2; bits < 12; bits++) {
			// this divides the range by 2^bits",https://www.github.com/kungfoo/geohash-java/commit/5f1bdda11f0134f692bc2f6877df5a6204e0adf9
5f1bdda11f0134f692bc2f6877df5a6204e0adf9,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		GeoHash fromRef = GeoHash.fromGeohashString(""dr4jb0bn2180"");
		System.out.println(hash);
		System.out.println(fromRef);
		assertEquals(hash, fromRef);
	}",https://www.github.com/kungfoo/geohash-java/commit/5f1bdda11f0134f692bc2f6877df5a6204e0adf9
5f1bdda11f0134f692bc2f6877df5a6204e0adf9,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(String.format(""%s,%s"", hash.getBoundingBoxPoints()[0], hash.getBoundingBoxPoints()[1]));
	}",https://www.github.com/kungfoo/geohash-java/commit/5f1bdda11f0134f692bc2f6877df5a6204e0adf9
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] lat_interval = { -90.0, 90.0 };
		double[] lon_interval = { -180.0, 180.0 };

		double lat_err = 90.0;
		double lon_err = 180.0;
		boolean is_even = true;
		int sz = geohash.length();
		int[] bits = { 16, 8, 4, 2, 1 };
		int bsz = bits.length;
		double latitude, longitude;
		for (int i = 0; i < sz; i++) {

			int cd = _decodemap.get(geohash.charAt(i));

			for (int z = 0; z < bsz; z++) {
				int mask = bits[z];
				if (is_even) {
					lon_err /= 2;
					if ((cd & mask) != 0) {
						lon_interval[0] = (lon_interval[0] + lon_interval[1]) / 2;
					} else {
						lon_interval[1] = (lon_interval[0] + lon_interval[1]) / 2;
					}

				} else {
					lat_err /= 2;

					if ((cd & mask) != 0) {
						lat_interval[0] = (lat_interval[0] + lat_interval[1]) / 2;
					} else {
						lat_interval[1] = (lat_interval[0] + lat_interval[1]) / 2;
					}
				}
				is_even = !is_even;
			}

		}
		latitude = (lat_interval[0] + lat_interval[1]) / 2;
		longitude = (lon_interval[0] + lon_interval[1]) / 2;
		double[] points = new double[] { latitude, longitude, lat_err, lon_err };

		// TODO: replace duplicate decoding/encoding.
		return GeoHash.withCharacterPrecision(points[0], points[1], geohash.length());
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHash.java,getNeighbour,"	public GeoHash getNeighbour(int direction, int length) {
		return null;
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHash.java,toBase32,"	public String toBase32() {
		StringBuffer buf = new StringBuffer();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		double centerLatitude = (boundingBox[0].latitude + boundingBox[1].latitude) / 2;
		double centerLongitude = (boundingBox[0].longitude + boundingBox[1].longitude) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHash.java,getBoundingBoxPoints,"	public WGS84Point[] getBoundingBoxPoints() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHash.java,toString,"	public String toString() {
		return String.format(""%s -> %s"", longToBitString(bits), boundingBox != null ? boundingBox : ""null"");
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHash.java,mask,"	public final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHash.java,getNorthernNeighbour,"	protected GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHash.java,getSouthernNeighbour,"	protected GeoHash getSouthernNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		latBits[0] += 1;
		latBits[0] = maskLastNBits(latBits[0], latBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHash.java,getEasternNeighbour,"	protected GeoHash getEasternNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] += 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHash.java,getWesternNeighbour,"	protected GeoHash getWesternNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] -= 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				if ((latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				latBits[0] <<= 1;
			} else {
				if ((lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		copyOfBits <<= 1;
		int numberOfBits = getNumberOfLatLonBits()[0];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		int numberOfBits = getNumberOfLatLonBits()[1];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHash.java,longToBitString,"	protected static String longToBitString(long value) {
		StringBuffer buf = new StringBuffer();
		for (int i = 64; i > 0; i--) {
			long bit = value & FIRST_BIT_FLAGGED;
			if (bit == FIRST_BIT_FLAGGED) {
				buf.append('1');
			} else {
				buf.append('0');
			}
			value <<= 1;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHash.java,highCapDesiredPrecision,"	private void highCapDesiredPrecision(int desiredPrecision) {
		if (desiredPrecision > 64)
			desiredPrecision = 64;",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHashTest.java,testLongToBitString,"	public void testLongToBitString() {
		hash.bits = 0x5555555555555555l;
		assertEquals(""0101010101010101010101010101010101010101010101010101010101010101"", GeoHash
				.longToBitString(hash.bits));",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		// TODO could possibly be less brute-force here and be more scientific
		// about possible failure points
		Random rand = new Random();
		for (double lat = -90; lat <= 90; lat += rand.nextDouble() + 0.5) {
			for (double lon = -180; lon <= 180; lon += rand.nextDouble() + 0.5) {",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		hash = GeoHash.withCharacterPrecision(20, 31, 12);
		assertEquals(""sew1c2vs2q5r"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20, 31, 12);
		assertEquals(""ksqn1rje83g2"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20.783236276, 31.9867127312312, 12);
		assertEquals(""ksq9zbs0b7vw"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 12);
		assertEquals(""hf7u8p8gn747"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 8);
		assertEquals(""hf7u8p8g"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 4);
		assertEquals(""hf7u"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xc000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xd000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);

		// and then from there, just a little south of sanity...
		south = east.getSouthernNeighbour();
		assertEquals(0x0l, south.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));
		
		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws SecurityException, NoSuchMethodException,
			IllegalArgumentException, IllegalAccessException, InvocationTargetException {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHashTest.java,checkMoveAroundStrip,"	public void checkMoveAroundStrip(String direction) throws SecurityException, NoSuchMethodException,
			IllegalArgumentException, IllegalAccessException, InvocationTargetException {
		for (int bits = 2; bits < 12; bits++) {
			// this divides the range by 2^bits",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		GeoHash fromRef = GeoHash.fromGeohashString(""dr4jb0bn2180"");
		System.out.println(hash);
		System.out.println(fromRef);
		assertEquals(hash, fromRef);
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
d9549afaa68dcd55b5d6cce604e5709552af45a4,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(String.format(""%s,%s"", hash.getBoundingBoxPoints()[0], hash.getBoundingBoxPoints()[1]));
	}",https://www.github.com/kungfoo/geohash-java/commit/d9549afaa68dcd55b5d6cce604e5709552af45a4
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] lat_interval = { -90.0, 90.0 };
		double[] lon_interval = { -180.0, 180.0 };

		double lat_err = 90.0;
		double lon_err = 180.0;
		boolean is_even = true;
		int sz = geohash.length();
		int[] bits = { 16, 8, 4, 2, 1 };
		int bsz = bits.length;
		double latitude, longitude;
		for (int i = 0; i < sz; i++) {

			int cd = _decodemap.get(geohash.charAt(i));

			for (int z = 0; z < bsz; z++) {
				int mask = bits[z];
				if (is_even) {
					lon_err /= 2;
					if ((cd & mask) != 0) {
						lon_interval[0] = (lon_interval[0] + lon_interval[1]) / 2;
					} else {
						lon_interval[1] = (lon_interval[0] + lon_interval[1]) / 2;
					}

				} else {
					lat_err /= 2;

					if ((cd & mask) != 0) {
						lat_interval[0] = (lat_interval[0] + lat_interval[1]) / 2;
					} else {
						lat_interval[1] = (lat_interval[0] + lat_interval[1]) / 2;
					}
				}
				is_even = !is_even;
			}

		}
		latitude = (lat_interval[0] + lat_interval[1]) / 2;
		longitude = (lon_interval[0] + lon_interval[1]) / 2;
		double[] points = new double[] { latitude, longitude, lat_err, lon_err };

		// TODO: replace duplicate decoding/encoding.
		return GeoHash.withCharacterPrecision(points[0], points[1], geohash.length());
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHash.java,getNeighbour,"	public GeoHash getNeighbour(int direction, int length) {
		return null;
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern, southern.getWesternNeighbour(), western, northern.getWesternNeighbour() };",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHash.java,toBase32,"	public String toBase32() {
		StringBuffer buf = new StringBuffer();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		double centerLatitude = (boundingBox[0].latitude + boundingBox[1].latitude) / 2;
		double centerLongitude = (boundingBox[0].longitude + boundingBox[1].longitude) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHash.java,getBoundingBoxPoints,"	public WGS84Point[] getBoundingBoxPoints() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHash.java,toString,"	public String toString() {
		return String.format(""%s -> %s"", longToBitString(bits), boundingBox != null ? boundingBox : ""null"");
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHash.java,mask,"	public final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHash.java,getNorthernNeighbour,"	protected GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHash.java,getSouthernNeighbour,"	protected GeoHash getSouthernNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		latBits[0] += 1;
		latBits[0] = maskLastNBits(latBits[0], latBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHash.java,getEasternNeighbour,"	protected GeoHash getEasternNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] += 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHash.java,getWesternNeighbour,"	protected GeoHash getWesternNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] -= 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				if ((latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				latBits[0] <<= 1;
			} else {
				if ((lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		copyOfBits <<= 1;
		int numberOfBits = getNumberOfLatLonBits()[0];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		int numberOfBits = getNumberOfLatLonBits()[1];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHash.java,longToBitString,"	protected String longToBitString(long value) {
		StringBuilder buf = new StringBuilder();
		for (int i = significantBits; i > 0; i--) {
			long bit = value & FIRST_BIT_FLAGGED;
			if (bit == FIRST_BIT_FLAGGED) {
				buf.append('1');
			} else {
				buf.append('0');
			}
			value <<= 1;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHash.java,highCapDesiredPrecision,"	private void highCapDesiredPrecision(int desiredPrecision) {
		if (desiredPrecision > 64)
			desiredPrecision = 64;",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,WGS84Point.java,getLatitude,"	public double getLatitude() {
		return latitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,WGS84Point.java,moveInDirection,"	public static WGS84Point moveInDirection(WGS84Point point,
			double bearingInDegrees, double distanceInMeters) {

		if (bearingInDegrees < 0 || bearingInDegrees > 360) {
			throw new IllegalArgumentException(""direction must be in (0,360)"");
		}

		double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; // WGS-84
		// ellipsiod
		double alpha1 = bearingInDegrees * degToRad;
		double sinAlpha1 = Math.sin(alpha1), cosAlpha1 = Math.cos(alpha1);

		double tanU1 = (1 - f) * Math.tan(point.latitude * degToRad);
		double cosU1 = 1 / Math.sqrt((1 + tanU1 * tanU1)), sinU1 = tanU1
				* cosU1;
		double sigma1 = Math.atan2(tanU1, cosAlpha1);
		double sinAlpha = cosU1 * sinAlpha1;
		double cosSqAlpha = 1 - sinAlpha * sinAlpha;
		double uSq = cosSqAlpha * (a * a - b * b) / (b * b);
		double A = 1 + uSq / 16384
				* (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));
		double B = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));

		double sinSigma = 0, cosSigma = 0, cos2SigmaM = 0;
		double sigma = distanceInMeters / (b * A), sigmaP = 2 * Math.PI;
		while (Math.abs(sigma - sigmaP) > 1e-12) {
			cos2SigmaM = Math.cos(2 * sigma1 + sigma);
			sinSigma = Math.sin(sigma);
			cosSigma = Math.cos(sigma);
			double deltaSigma = B
					* sinSigma
					* (cos2SigmaM + B
							/ 4
							* (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B
									/ 6
									* cos2SigmaM
									* (-3 + 4 * sinSigma * sinSigma)
									* (-3 + 4 * cos2SigmaM * cos2SigmaM)));
			sigmaP = sigma;
			sigma = distanceInMeters / (b * A) + deltaSigma;
		}

		double tmp = sinU1 * sinSigma - cosU1 * cosSigma * cosAlpha1;
		double lat2 = Math.atan2(sinU1 * cosSigma + cosU1 * sinSigma
				* cosAlpha1, (1 - f)
				* Math.sqrt(sinAlpha * sinAlpha + tmp * tmp));
		double lambda = Math.atan2(sinSigma * sinAlpha1, cosU1 * cosSigma
				- sinU1 * sinSigma * cosAlpha1);
		double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
		double L = lambda
				- (1 - C)
				* f
				* sinAlpha
				* (sigma + C
						* sinSigma
						* (cos2SigmaM + C * cosSigma
								* (-1 + 2 * cos2SigmaM * cos2SigmaM)));

		return new WGS84Point(lat2 / degToRad, point.longitude + L / degToRad);
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,WGS84Point.java,distanceInMeters,"	public static double distanceInMeters(WGS84Point foo, WGS84Point bar) {
		double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; // WGS-84
		// ellipsiod
		double L = (bar.longitude - foo.longitude) * degToRad;
		double U1 = Math.atan((1 - f) * Math.tan(foo.latitude * degToRad));
		double U2 = Math.atan((1 - f) * Math.tan(bar.latitude * degToRad));
		double sinU1 = Math.sin(U1), cosU1 = Math.cos(U1);
		double sinU2 = Math.sin(U2), cosU2 = Math.cos(U2);

		double cosSqAlpha, sinSigma, cos2SigmaM, cosSigma, sigma;

		double lambda = L, lambdaP, iterLimit = 20;
		do {
			double sinLambda = Math.sin(lambda), cosLambda = Math.cos(lambda);
			sinSigma = Math.sqrt((cosU2 * sinLambda) * (cosU2 * sinLambda)
					+ (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda)
					* (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda));
			if (sinSigma == 0)
				return 0; // co-incident points
			cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda;
			sigma = Math.atan2(sinSigma, cosSigma);
			double sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma;
			cosSqAlpha = 1 - sinAlpha * sinAlpha;
			cos2SigmaM = cosSigma - 2 * sinU1 * sinU2 / cosSqAlpha;
			if (cos2SigmaM == Double.NaN)
				cos2SigmaM = 0; // equatorial line: cosSqAlpha=0 (�6)
			double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
			lambdaP = lambda;
			lambda = L
					+ (1 - C)
					* f
					* sinAlpha
					* (sigma + C
							* sinSigma
							* (cos2SigmaM + C * cosSigma
									* (-1 + 2 * cos2SigmaM * cos2SigmaM)));
		} while (Math.abs(lambda - lambdaP) > EPSILON && --iterLimit > 0);

		if (iterLimit == 0)
			return Double.NaN;
		double uSquared = cosSqAlpha * (a * a - b * b) / (b * b);
		double A = 1
				+ uSquared
				/ 16384
				* (4096 + uSquared * (-768 + uSquared * (320 - 175 * uSquared)));
		double B = uSquared / 1024
				* (256 + uSquared * (-128 + uSquared * (74 - 47 * uSquared)));
		double deltaSigma = B
				* sinSigma
				* (cos2SigmaM + B
						/ 4
						* (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B
								/ 6 * cos2SigmaM
								* (-3 + 4 * sinSigma * sinSigma)
								* (-3 + 4 * cos2SigmaM * cos2SigmaM)));
		double s = b * A * (sigma - deltaSigma);

		return s;
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,WGS84Point.java,getLongitude,"	public double getLongitude() {
		return longitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,WGS84Point.java,toString,"	public String toString() {
		return String.format(""(%f,%f)"", latitude, longitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,WGS84Point.java,equals,"	public boolean equals(Object obj) {
		if (obj instanceof WGS84Point) {
			WGS84Point other = (WGS84Point) obj;
			return latitude == other.latitude && longitude == other.longitude;
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		// TODO could possibly be less brute-force here and be more scientific
		// about possible failure points
		Random rand = new Random();
		for (double lat = -90; lat <= 90; lat += rand.nextDouble() + 0.5) {
			for (double lon = -180; lon <= 180; lon += rand.nextDouble() + 0.5) {",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		hash = GeoHash.withCharacterPrecision(20, 31, 12);
		assertEquals(""sew1c2vs2q5r"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20, 31, 12);
		assertEquals(""ksqn1rje83g2"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20.783236276, 31.9867127312312, 12);
		assertEquals(""ksq9zbs0b7vw"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 12);
		assertEquals(""hf7u8p8gn747"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 8);
		assertEquals(""hf7u8p8g"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 4);
		assertEquals(""hf7u"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xc000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xd000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);

		// and then from there, just a little south of sanity...
		south = east.getSouthernNeighbour();
		assertEquals(0x0l, south.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle(){
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws SecurityException, NoSuchMethodException,
			IllegalArgumentException, IllegalAccessException, InvocationTargetException {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws SecurityException, NoSuchMethodException,
			IllegalArgumentException, IllegalAccessException, InvocationTargetException {
		for (int bits = 2; bits < 12; bits++) {
			// this divides the range by 2^bits",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		GeoHash fromRef = GeoHash.fromGeohashString(""dr4jb0bn2180"");
		System.out.println(hash);
		System.out.println(fromRef);
		assertEquals(hash, fromRef);
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(String.format(""%s,%s"", hash.getBoundingBoxPoints()[0], hash.getBoundingBoxPoints()[1]));
	}",https://www.github.com/kungfoo/geohash-java/commit/cb0ce585ee205eaff0f3e48ec148c674d2fb2c9f
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] lat_interval = { -90.0, 90.0 };
		double[] lon_interval = { -180.0, 180.0 };

		double lat_err = 90.0;
		double lon_err = 180.0;
		boolean is_even = true;
		int sz = geohash.length();
		int[] bits = { 16, 8, 4, 2, 1 };
		int bsz = bits.length;
		double latitude, longitude;
		for (int i = 0; i < sz; i++) {

			int cd = _decodemap.get(geohash.charAt(i));

			for (int z = 0; z < bsz; z++) {
				int mask = bits[z];
				if (is_even) {
					lon_err /= 2;
					if ((cd & mask) != 0) {
						lon_interval[0] = (lon_interval[0] + lon_interval[1]) / 2;
					} else {
						lon_interval[1] = (lon_interval[0] + lon_interval[1]) / 2;
					}

				} else {
					lat_err /= 2;

					if ((cd & mask) != 0) {
						lat_interval[0] = (lat_interval[0] + lat_interval[1]) / 2;
					} else {
						lat_interval[1] = (lat_interval[0] + lat_interval[1]) / 2;
					}
				}
				is_even = !is_even;
			}

		}
		latitude = (lat_interval[0] + lat_interval[1]) / 2;
		longitude = (lon_interval[0] + lon_interval[1]) / 2;
		double[] points = new double[] { latitude, longitude, lat_err, lon_err };

		// TODO: replace duplicate decoding/encoding.
		return GeoHash.withCharacterPrecision(points[0], points[1], geohash.length());
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern, southern.getWesternNeighbour(), western, northern.getWesternNeighbour() };",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHash.java,toBase32,"	public String toBase32() {
		StringBuffer buf = new StringBuffer();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		double centerLatitude = (upperLeft.latitude + lowerRight.latitude) / 2;
		double centerLongitude = (upperLeft.longitude + lowerRight.longitude) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHash.java,getBoundingBoxPoints,"	public WGS84Point[] getBoundingBoxPoints() {
		return new WGS84Point[] { upperLeft, lowerRight };
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHash.java,getFourBoundingBoxPoints,"	public WGS84Point[] getFourBoundingBoxPoints() {
		WGS84Point upperRight = new WGS84Point(upperLeft.latitude, lowerRight.longitude);
		WGS84Point lowerLeft = new WGS84Point(lowerRight.latitude, upperLeft.longitude);
		return new WGS84Point[] { upperLeft, upperRight, lowerLeft, lowerRight };
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHash.java,toString,"	public String toString() {
		return String.format(""%s -> %s,%s"", longToBitString(bits), upperLeft, lowerRight);
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHash.java,mask,"	public final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHash.java,getNorthernNeighbour,"	protected GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHash.java,getSouthernNeighbour,"	protected GeoHash getSouthernNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		latBits[0] += 1;
		latBits[0] = maskLastNBits(latBits[0], latBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHash.java,getEasternNeighbour,"	protected GeoHash getEasternNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] += 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHash.java,getWesternNeighbour,"	protected GeoHash getWesternNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] -= 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				if ((latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				latBits[0] <<= 1;
			} else {
				if ((lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		copyOfBits <<= 1;
		int numberOfBits = getNumberOfLatLonBits()[0];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		int numberOfBits = getNumberOfLatLonBits()[1];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHash.java,longToBitString,"	protected String longToBitString(long value) {
		StringBuilder buf = new StringBuilder();
		for (int i = significantBits; i > 0; i--) {
			long bit = value & FIRST_BIT_FLAGGED;
			if (bit == FIRST_BIT_FLAGGED) {
				buf.append('1');
			} else {
				buf.append('0');
			}
			value <<= 1;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHash.java,highCapDesiredPrecision,"	private void highCapDesiredPrecision(int desiredPrecision) {
		if (desiredPrecision > 64)
			desiredPrecision = 64;",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		// TODO could possibly be less brute-force here and be more scientific
		// about possible failure points
		Random rand = new Random();
		for (double lat = -90; lat <= 90; lat += rand.nextDouble() + 0.5) {
			for (double lon = -180; lon <= 180; lon += rand.nextDouble() + 0.5) {",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		hash = GeoHash.withCharacterPrecision(20, 31, 12);
		assertEquals(""sew1c2vs2q5r"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20, 31, 12);
		assertEquals(""ksqn1rje83g2"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20.783236276, 31.9867127312312, 12);
		assertEquals(""ksq9zbs0b7vw"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 12);
		assertEquals(""hf7u8p8gn747"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 8);
		assertEquals(""hf7u8p8g"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 4);
		assertEquals(""hf7u"", hash.toBase32());
		
		hash = GeoHash.withCharacterPrecision(39.0247389581054, -76.5110040642321, 12);
		assertEquals(""dqcw4bnrs6s7"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xc000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xd000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);

		// and then from there, just a little south of sanity...
		south = east.getSouthernNeighbour();
		assertEquals(0x0l, south.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle(){
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws SecurityException, NoSuchMethodException,
			IllegalArgumentException, IllegalAccessException, InvocationTargetException {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws SecurityException, NoSuchMethodException,
			IllegalArgumentException, IllegalAccessException, InvocationTargetException {
		for (int bits = 2; bits < 12; bits++) {
			// this divides the range by 2^bits",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		GeoHash fromRef = GeoHash.fromGeohashString(""dr4jb0bn2180"");
		System.out.println(hash);
		System.out.println(fromRef);
		assertEquals(hash, fromRef);
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
a961eb195d7ba1832eb1a84f98b8f4eea9026bb1,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(String.format(""%s,%s"", hash.getBoundingBoxPoints()[0], hash.getBoundingBoxPoints()[1]));
	}",https://www.github.com/kungfoo/geohash-java/commit/a961eb195d7ba1832eb1a84f98b8f4eea9026bb1
904f2983069035d042ce675a9e48990078d131ea,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/904f2983069035d042ce675a9e48990078d131ea
904f2983069035d042ce675a9e48990078d131ea,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/904f2983069035d042ce675a9e48990078d131ea
904f2983069035d042ce675a9e48990078d131ea,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		int sz = geohash.length();
		int[] bits = { 16, 8, 4, 2, 1 };
		int bsz = bits.length;
		double mid;
		
		GeoHash hash = new GeoHash();

		for (int i = 0; i < sz; i++) {
			int cd = _decodemap.get(geohash.charAt(i));

			for (int z = 0; z < bsz; z++) {
				int mask = bits[z];
				if (isEvenBit) {
					mid = (longitudeRange[0] + longitudeRange[1]) / 2;
					if ((cd & mask) != 0) {
						hash.addOnBitToEnd();
						longitudeRange[0] = mid;
					} else {
						hash.addOffBitToEnd();
						longitudeRange[1] = mid;
					}

				} else {
					mid = (latitudeRange[0] + latitudeRange[1]) / 2;
					if ((cd & mask) != 0) {
						hash.addOnBitToEnd();
						latitudeRange[0] = mid;
					} else {
						hash.addOffBitToEnd();
						latitudeRange[1] = mid;
					}
				}
				isEvenBit = !isEvenBit;
			}

		}
		
		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;
		
		hash.point = new WGS84Point(latitude, longitude);
		hash.upperLeft = new WGS84Point(latitudeRange[0], longitudeRange[0]);
		hash.lowerRight = new WGS84Point(latitudeRange[1], longitudeRange[1]);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/904f2983069035d042ce675a9e48990078d131ea
904f2983069035d042ce675a9e48990078d131ea,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern, southern.getWesternNeighbour(), western, northern.getWesternNeighbour() };",https://www.github.com/kungfoo/geohash-java/commit/904f2983069035d042ce675a9e48990078d131ea
904f2983069035d042ce675a9e48990078d131ea,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/904f2983069035d042ce675a9e48990078d131ea
904f2983069035d042ce675a9e48990078d131ea,GeoHash.java,toBase32,"	public String toBase32() {
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/904f2983069035d042ce675a9e48990078d131ea
904f2983069035d042ce675a9e48990078d131ea,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/904f2983069035d042ce675a9e48990078d131ea
904f2983069035d042ce675a9e48990078d131ea,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/904f2983069035d042ce675a9e48990078d131ea
904f2983069035d042ce675a9e48990078d131ea,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		double centerLatitude = (upperLeft.latitude + lowerRight.latitude) / 2;
		double centerLongitude = (upperLeft.longitude + lowerRight.longitude) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/904f2983069035d042ce675a9e48990078d131ea
904f2983069035d042ce675a9e48990078d131ea,GeoHash.java,getBoundingBoxPoints,"	public WGS84Point[] getBoundingBoxPoints() {
		return new WGS84Point[] { upperLeft, lowerRight };
	}",https://www.github.com/kungfoo/geohash-java/commit/904f2983069035d042ce675a9e48990078d131ea
904f2983069035d042ce675a9e48990078d131ea,GeoHash.java,getFourBoundingBoxPoints,"	public WGS84Point[] getFourBoundingBoxPoints() {
		WGS84Point upperRight = new WGS84Point(upperLeft.latitude, lowerRight.longitude);
		WGS84Point lowerLeft = new WGS84Point(lowerRight.latitude, upperLeft.longitude);
		return new WGS84Point[] { upperLeft, upperRight, lowerLeft, lowerRight };
	}",https://www.github.com/kungfoo/geohash-java/commit/904f2983069035d042ce675a9e48990078d131ea
904f2983069035d042ce675a9e48990078d131ea,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/904f2983069035d042ce675a9e48990078d131ea
904f2983069035d042ce675a9e48990078d131ea,GeoHash.java,toString,"	public String toString() {
		return String.format(""%s -> %s,%s"", longToBitString(bits), upperLeft, lowerRight);
	}",https://www.github.com/kungfoo/geohash-java/commit/904f2983069035d042ce675a9e48990078d131ea
904f2983069035d042ce675a9e48990078d131ea,GeoHash.java,mask,"	public final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/904f2983069035d042ce675a9e48990078d131ea
904f2983069035d042ce675a9e48990078d131ea,GeoHash.java,getNorthernNeighbour,"	protected GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/904f2983069035d042ce675a9e48990078d131ea
904f2983069035d042ce675a9e48990078d131ea,GeoHash.java,getSouthernNeighbour,"	protected GeoHash getSouthernNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		latBits[0] += 1;
		latBits[0] = maskLastNBits(latBits[0], latBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/904f2983069035d042ce675a9e48990078d131ea
904f2983069035d042ce675a9e48990078d131ea,GeoHash.java,getEasternNeighbour,"	protected GeoHash getEasternNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] += 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/904f2983069035d042ce675a9e48990078d131ea
904f2983069035d042ce675a9e48990078d131ea,GeoHash.java,getWesternNeighbour,"	protected GeoHash getWesternNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] -= 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/904f2983069035d042ce675a9e48990078d131ea
904f2983069035d042ce675a9e48990078d131ea,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				if ((latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				latBits[0] <<= 1;
			} else {
				if ((lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/904f2983069035d042ce675a9e48990078d131ea
904f2983069035d042ce675a9e48990078d131ea,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/904f2983069035d042ce675a9e48990078d131ea
904f2983069035d042ce675a9e48990078d131ea,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		copyOfBits <<= 1;
		int numberOfBits = getNumberOfLatLonBits()[0];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/904f2983069035d042ce675a9e48990078d131ea
904f2983069035d042ce675a9e48990078d131ea,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		int numberOfBits = getNumberOfLatLonBits()[1];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/904f2983069035d042ce675a9e48990078d131ea
904f2983069035d042ce675a9e48990078d131ea,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/904f2983069035d042ce675a9e48990078d131ea
904f2983069035d042ce675a9e48990078d131ea,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/904f2983069035d042ce675a9e48990078d131ea
904f2983069035d042ce675a9e48990078d131ea,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/904f2983069035d042ce675a9e48990078d131ea
904f2983069035d042ce675a9e48990078d131ea,GeoHash.java,longToBitString,"	protected String longToBitString(long value) {
		StringBuilder buf = new StringBuilder();
		for (int i = significantBits; i > 0; i--) {
			long bit = value & FIRST_BIT_FLAGGED;
			if (bit == FIRST_BIT_FLAGGED) {
				buf.append('1');
			} else {
				buf.append('0');
			}
			value <<= 1;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/904f2983069035d042ce675a9e48990078d131ea
904f2983069035d042ce675a9e48990078d131ea,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/904f2983069035d042ce675a9e48990078d131ea
904f2983069035d042ce675a9e48990078d131ea,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/904f2983069035d042ce675a9e48990078d131ea
904f2983069035d042ce675a9e48990078d131ea,GeoHash.java,highCapDesiredPrecision,"	private void highCapDesiredPrecision(int desiredPrecision) {
		if (desiredPrecision > 64)
			desiredPrecision = 64;",https://www.github.com/kungfoo/geohash-java/commit/904f2983069035d042ce675a9e48990078d131ea
d7a551c0de1751c7f4cf9f049bab2a996cfbe89c,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/d7a551c0de1751c7f4cf9f049bab2a996cfbe89c
d7a551c0de1751c7f4cf9f049bab2a996cfbe89c,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d7a551c0de1751c7f4cf9f049bab2a996cfbe89c
d7a551c0de1751c7f4cf9f049bab2a996cfbe89c,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		int sz = geohash.length();
		int[] bits = { 16, 8, 4, 2, 1 };
		int bsz = bits.length;
		double mid;
		
		GeoHash hash = new GeoHash();

		for (int i = 0; i < sz; i++) {
			int cd = decodeMap.get(geohash.charAt(i));

			for (int z = 0; z < bsz; z++) {
				int mask = bits[z];
				if (isEvenBit) {
					mid = (longitudeRange[0] + longitudeRange[1]) / 2;
					if ((cd & mask) != 0) {
						hash.addOnBitToEnd();
						longitudeRange[0] = mid;
					} else {
						hash.addOffBitToEnd();
						longitudeRange[1] = mid;
					}

				} else {
					mid = (latitudeRange[0] + latitudeRange[1]) / 2;
					if ((cd & mask) != 0) {
						hash.addOnBitToEnd();
						latitudeRange[0] = mid;
					} else {
						hash.addOffBitToEnd();
						latitudeRange[1] = mid;
					}
				}
				isEvenBit = !isEvenBit;
			}

		}
		
		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;
		
		hash.point = new WGS84Point(latitude, longitude);
		hash.upperLeft = new WGS84Point(latitudeRange[0], longitudeRange[0]);
		hash.lowerRight = new WGS84Point(latitudeRange[1], longitudeRange[1]);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/d7a551c0de1751c7f4cf9f049bab2a996cfbe89c
d7a551c0de1751c7f4cf9f049bab2a996cfbe89c,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern, southern.getWesternNeighbour(), western, northern.getWesternNeighbour() };",https://www.github.com/kungfoo/geohash-java/commit/d7a551c0de1751c7f4cf9f049bab2a996cfbe89c
d7a551c0de1751c7f4cf9f049bab2a996cfbe89c,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/d7a551c0de1751c7f4cf9f049bab2a996cfbe89c
d7a551c0de1751c7f4cf9f049bab2a996cfbe89c,GeoHash.java,toBase32,"	public String toBase32() {
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/d7a551c0de1751c7f4cf9f049bab2a996cfbe89c
d7a551c0de1751c7f4cf9f049bab2a996cfbe89c,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/d7a551c0de1751c7f4cf9f049bab2a996cfbe89c
d7a551c0de1751c7f4cf9f049bab2a996cfbe89c,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/d7a551c0de1751c7f4cf9f049bab2a996cfbe89c
d7a551c0de1751c7f4cf9f049bab2a996cfbe89c,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		double centerLatitude = (upperLeft.latitude + lowerRight.latitude) / 2;
		double centerLongitude = (upperLeft.longitude + lowerRight.longitude) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/d7a551c0de1751c7f4cf9f049bab2a996cfbe89c
d7a551c0de1751c7f4cf9f049bab2a996cfbe89c,GeoHash.java,getBoundingBoxPoints,"	public WGS84Point[] getBoundingBoxPoints() {
		return new WGS84Point[] { upperLeft, lowerRight };
	}",https://www.github.com/kungfoo/geohash-java/commit/d7a551c0de1751c7f4cf9f049bab2a996cfbe89c
d7a551c0de1751c7f4cf9f049bab2a996cfbe89c,GeoHash.java,getFourBoundingBoxPoints,"	public WGS84Point[] getFourBoundingBoxPoints() {
		WGS84Point upperRight = new WGS84Point(upperLeft.latitude, lowerRight.longitude);
		WGS84Point lowerLeft = new WGS84Point(lowerRight.latitude, upperLeft.longitude);
		return new WGS84Point[] { upperLeft, upperRight, lowerLeft, lowerRight };
	}",https://www.github.com/kungfoo/geohash-java/commit/d7a551c0de1751c7f4cf9f049bab2a996cfbe89c
d7a551c0de1751c7f4cf9f049bab2a996cfbe89c,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/d7a551c0de1751c7f4cf9f049bab2a996cfbe89c
d7a551c0de1751c7f4cf9f049bab2a996cfbe89c,GeoHash.java,toString,"	public String toString() {
		return String.format(""%s -> %s,%s"", longToBitString(bits), upperLeft, lowerRight);
	}",https://www.github.com/kungfoo/geohash-java/commit/d7a551c0de1751c7f4cf9f049bab2a996cfbe89c
d7a551c0de1751c7f4cf9f049bab2a996cfbe89c,GeoHash.java,mask,"	public final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/d7a551c0de1751c7f4cf9f049bab2a996cfbe89c
d7a551c0de1751c7f4cf9f049bab2a996cfbe89c,GeoHash.java,getNorthernNeighbour,"	protected GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d7a551c0de1751c7f4cf9f049bab2a996cfbe89c
d7a551c0de1751c7f4cf9f049bab2a996cfbe89c,GeoHash.java,getSouthernNeighbour,"	protected GeoHash getSouthernNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		latBits[0] += 1;
		latBits[0] = maskLastNBits(latBits[0], latBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d7a551c0de1751c7f4cf9f049bab2a996cfbe89c
d7a551c0de1751c7f4cf9f049bab2a996cfbe89c,GeoHash.java,getEasternNeighbour,"	protected GeoHash getEasternNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] += 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d7a551c0de1751c7f4cf9f049bab2a996cfbe89c
d7a551c0de1751c7f4cf9f049bab2a996cfbe89c,GeoHash.java,getWesternNeighbour,"	protected GeoHash getWesternNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] -= 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d7a551c0de1751c7f4cf9f049bab2a996cfbe89c
d7a551c0de1751c7f4cf9f049bab2a996cfbe89c,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				if ((latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				latBits[0] <<= 1;
			} else {
				if ((lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/d7a551c0de1751c7f4cf9f049bab2a996cfbe89c
d7a551c0de1751c7f4cf9f049bab2a996cfbe89c,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		copyOfBits <<= 1;
		int numberOfBits = getNumberOfLatLonBits()[0];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/d7a551c0de1751c7f4cf9f049bab2a996cfbe89c
d7a551c0de1751c7f4cf9f049bab2a996cfbe89c,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		int numberOfBits = getNumberOfLatLonBits()[1];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/d7a551c0de1751c7f4cf9f049bab2a996cfbe89c
d7a551c0de1751c7f4cf9f049bab2a996cfbe89c,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/d7a551c0de1751c7f4cf9f049bab2a996cfbe89c
d7a551c0de1751c7f4cf9f049bab2a996cfbe89c,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/d7a551c0de1751c7f4cf9f049bab2a996cfbe89c
d7a551c0de1751c7f4cf9f049bab2a996cfbe89c,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/d7a551c0de1751c7f4cf9f049bab2a996cfbe89c
d7a551c0de1751c7f4cf9f049bab2a996cfbe89c,GeoHash.java,longToBitString,"	protected String longToBitString(long value) {
		StringBuilder buf = new StringBuilder();
		for (int i = significantBits; i > 0; i--) {
			long bit = value & FIRST_BIT_FLAGGED;
			if (bit == FIRST_BIT_FLAGGED) {
				buf.append('1');
			} else {
				buf.append('0');
			}
			value <<= 1;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/d7a551c0de1751c7f4cf9f049bab2a996cfbe89c
d7a551c0de1751c7f4cf9f049bab2a996cfbe89c,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/d7a551c0de1751c7f4cf9f049bab2a996cfbe89c
d7a551c0de1751c7f4cf9f049bab2a996cfbe89c,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/d7a551c0de1751c7f4cf9f049bab2a996cfbe89c
d7a551c0de1751c7f4cf9f049bab2a996cfbe89c,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/d7a551c0de1751c7f4cf9f049bab2a996cfbe89c
d7a551c0de1751c7f4cf9f049bab2a996cfbe89c,GeoHash.java,highCapDesiredPrecision,"	private void highCapDesiredPrecision(int desiredPrecision) {
		if (desiredPrecision > 64)
			desiredPrecision = 64;",https://www.github.com/kungfoo/geohash-java/commit/d7a551c0de1751c7f4cf9f049bab2a996cfbe89c
cb3e536070d6ba887cde7f1826427c414e0ef2c0,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/cb3e536070d6ba887cde7f1826427c414e0ef2c0
cb3e536070d6ba887cde7f1826427c414e0ef2c0,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/cb3e536070d6ba887cde7f1826427c414e0ef2c0
cb3e536070d6ba887cde7f1826427c414e0ef2c0,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		int sz = geohash.length();
		int[] bits = { 16, 8, 4, 2, 1 };
		int bsz = bits.length;
		double mid;
		
		GeoHash hash = new GeoHash();

		for (int i = 0; i < sz; i++) {
			int cd = decodeMap.get(geohash.charAt(i));

			for (int z = 0; z < bsz; z++) {
				int mask = bits[z];
				if (isEvenBit) {
					mid = (longitudeRange[0] + longitudeRange[1]) / 2;
					if ((cd & mask) != 0) {
						hash.addOnBitToEnd();
						longitudeRange[0] = mid;
					} else {
						hash.addOffBitToEnd();
						longitudeRange[1] = mid;
					}

				} else {
					mid = (latitudeRange[0] + latitudeRange[1]) / 2;
					if ((cd & mask) != 0) {
						hash.addOnBitToEnd();
						latitudeRange[0] = mid;
					} else {
						hash.addOffBitToEnd();
						latitudeRange[1] = mid;
					}
				}
				isEvenBit = !isEvenBit;
			}

		}
		
		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;
		
		hash.point = new WGS84Point(latitude, longitude);
		hash.upperLeft = new WGS84Point(latitudeRange[0], longitudeRange[0]);
		hash.lowerRight = new WGS84Point(latitudeRange[1], longitudeRange[1]);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/cb3e536070d6ba887cde7f1826427c414e0ef2c0
cb3e536070d6ba887cde7f1826427c414e0ef2c0,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern, southern.getWesternNeighbour(), western, northern.getWesternNeighbour() };",https://www.github.com/kungfoo/geohash-java/commit/cb3e536070d6ba887cde7f1826427c414e0ef2c0
cb3e536070d6ba887cde7f1826427c414e0ef2c0,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/cb3e536070d6ba887cde7f1826427c414e0ef2c0
cb3e536070d6ba887cde7f1826427c414e0ef2c0,GeoHash.java,toBase32,"	public String toBase32() {
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/cb3e536070d6ba887cde7f1826427c414e0ef2c0
cb3e536070d6ba887cde7f1826427c414e0ef2c0,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/cb3e536070d6ba887cde7f1826427c414e0ef2c0
cb3e536070d6ba887cde7f1826427c414e0ef2c0,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/cb3e536070d6ba887cde7f1826427c414e0ef2c0
cb3e536070d6ba887cde7f1826427c414e0ef2c0,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		double centerLatitude = (upperLeft.latitude + lowerRight.latitude) / 2;
		double centerLongitude = (upperLeft.longitude + lowerRight.longitude) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/cb3e536070d6ba887cde7f1826427c414e0ef2c0
cb3e536070d6ba887cde7f1826427c414e0ef2c0,GeoHash.java,getBoundingBoxPoints,"	public WGS84Point[] getBoundingBoxPoints() {
		return new WGS84Point[] { upperLeft, lowerRight };
	}",https://www.github.com/kungfoo/geohash-java/commit/cb3e536070d6ba887cde7f1826427c414e0ef2c0
cb3e536070d6ba887cde7f1826427c414e0ef2c0,GeoHash.java,getFourBoundingBoxPoints,"	public WGS84Point[] getFourBoundingBoxPoints() {
		WGS84Point upperRight = new WGS84Point(upperLeft.latitude, lowerRight.longitude);
		WGS84Point lowerLeft = new WGS84Point(lowerRight.latitude, upperLeft.longitude);
		return new WGS84Point[] { upperLeft, upperRight, lowerLeft, lowerRight };
	}",https://www.github.com/kungfoo/geohash-java/commit/cb3e536070d6ba887cde7f1826427c414e0ef2c0
cb3e536070d6ba887cde7f1826427c414e0ef2c0,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/cb3e536070d6ba887cde7f1826427c414e0ef2c0
cb3e536070d6ba887cde7f1826427c414e0ef2c0,GeoHash.java,toString,"	public String toString() {
		return String.format(""%s -> %s,%s"", longToBitString(bits), upperLeft, lowerRight);
	}",https://www.github.com/kungfoo/geohash-java/commit/cb3e536070d6ba887cde7f1826427c414e0ef2c0
cb3e536070d6ba887cde7f1826427c414e0ef2c0,GeoHash.java,mask,"	public final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/cb3e536070d6ba887cde7f1826427c414e0ef2c0
cb3e536070d6ba887cde7f1826427c414e0ef2c0,GeoHash.java,getNorthernNeighbour,"	protected GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/cb3e536070d6ba887cde7f1826427c414e0ef2c0
cb3e536070d6ba887cde7f1826427c414e0ef2c0,GeoHash.java,getSouthernNeighbour,"	protected GeoHash getSouthernNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		latBits[0] += 1;
		latBits[0] = maskLastNBits(latBits[0], latBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/cb3e536070d6ba887cde7f1826427c414e0ef2c0
cb3e536070d6ba887cde7f1826427c414e0ef2c0,GeoHash.java,getEasternNeighbour,"	protected GeoHash getEasternNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] += 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/cb3e536070d6ba887cde7f1826427c414e0ef2c0
cb3e536070d6ba887cde7f1826427c414e0ef2c0,GeoHash.java,getWesternNeighbour,"	protected GeoHash getWesternNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] -= 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/cb3e536070d6ba887cde7f1826427c414e0ef2c0
cb3e536070d6ba887cde7f1826427c414e0ef2c0,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				if ((latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				latBits[0] <<= 1;
			} else {
				if ((lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/cb3e536070d6ba887cde7f1826427c414e0ef2c0
cb3e536070d6ba887cde7f1826427c414e0ef2c0,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		copyOfBits <<= 1;
		int numberOfBits = getNumberOfLatLonBits()[0];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/cb3e536070d6ba887cde7f1826427c414e0ef2c0
cb3e536070d6ba887cde7f1826427c414e0ef2c0,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		int numberOfBits = getNumberOfLatLonBits()[1];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/cb3e536070d6ba887cde7f1826427c414e0ef2c0
cb3e536070d6ba887cde7f1826427c414e0ef2c0,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/cb3e536070d6ba887cde7f1826427c414e0ef2c0
cb3e536070d6ba887cde7f1826427c414e0ef2c0,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/cb3e536070d6ba887cde7f1826427c414e0ef2c0
cb3e536070d6ba887cde7f1826427c414e0ef2c0,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/cb3e536070d6ba887cde7f1826427c414e0ef2c0
cb3e536070d6ba887cde7f1826427c414e0ef2c0,GeoHash.java,longToBitString,"	protected String longToBitString(long value) {
		StringBuilder buf = new StringBuilder();
		for (int i = significantBits; i > 0; i--) {
			long bit = value & FIRST_BIT_FLAGGED;
			if (bit == FIRST_BIT_FLAGGED) {
				buf.append('1');
			} else {
				buf.append('0');
			}
			value <<= 1;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/cb3e536070d6ba887cde7f1826427c414e0ef2c0
cb3e536070d6ba887cde7f1826427c414e0ef2c0,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/cb3e536070d6ba887cde7f1826427c414e0ef2c0
cb3e536070d6ba887cde7f1826427c414e0ef2c0,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/cb3e536070d6ba887cde7f1826427c414e0ef2c0
cb3e536070d6ba887cde7f1826427c414e0ef2c0,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/cb3e536070d6ba887cde7f1826427c414e0ef2c0
cb3e536070d6ba887cde7f1826427c414e0ef2c0,GeoHash.java,highCapDesiredPrecision,"	private void highCapDesiredPrecision(int desiredPrecision) {
		if (desiredPrecision > 64)
			desiredPrecision = 64;",https://www.github.com/kungfoo/geohash-java/commit/cb3e536070d6ba887cde7f1826427c414e0ef2c0
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		int sz = geohash.length();
		int[] bits = { 16, 8, 4, 2, 1 };
		int bsz = bits.length;

		GeoHash hash = new GeoHash();

		for (int i = 0; i < sz; i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int z = 0; z < bsz; z++) {
				int mask = bits[z];
				if (isEvenBit) {
					divideRange(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRange(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		hash.upperLeft = new WGS84Point(latitudeRange[0], longitudeRange[0]);
		hash.lowerRight = new WGS84Point(latitudeRange[1], longitudeRange[1]);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,divideRange,"	private static void divideRange(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern, southern.getWesternNeighbour(), western, northern.getWesternNeighbour() };",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,toBase32,"	public String toBase32() {
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		double centerLatitude = (upperLeft.latitude + lowerRight.latitude) / 2;
		double centerLongitude = (upperLeft.longitude + lowerRight.longitude) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,getBoundingBoxPoints,"	public WGS84Point[] getBoundingBoxPoints() {
		return new WGS84Point[] { upperLeft, lowerRight };
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,getFourBoundingBoxPoints,"	public WGS84Point[] getFourBoundingBoxPoints() {
		WGS84Point upperRight = new WGS84Point(upperLeft.latitude, lowerRight.longitude);
		WGS84Point lowerLeft = new WGS84Point(lowerRight.latitude, upperLeft.longitude);
		return new WGS84Point[] { upperLeft, upperRight, lowerLeft, lowerRight };
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,toString,"	public String toString() {
		return String.format(""%s -> %s,%s"", longToBitString(bits), upperLeft, lowerRight);
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,mask,"	public final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,getNorthernNeighbour,"	protected GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,getSouthernNeighbour,"	protected GeoHash getSouthernNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		latBits[0] += 1;
		latBits[0] = maskLastNBits(latBits[0], latBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,getEasternNeighbour,"	protected GeoHash getEasternNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] += 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,getWesternNeighbour,"	protected GeoHash getWesternNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] -= 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				if ((latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				latBits[0] <<= 1;
			} else {
				if ((lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		copyOfBits <<= 1;
		int numberOfBits = getNumberOfLatLonBits()[0];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		int numberOfBits = getNumberOfLatLonBits()[1];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,longToBitString,"	protected String longToBitString(long value) {
		StringBuilder buf = new StringBuilder();
		for (int i = significantBits; i > 0; i--) {
			long bit = value & FIRST_BIT_FLAGGED;
			if (bit == FIRST_BIT_FLAGGED) {
				buf.append('1');
			} else {
				buf.append('0');
			}
			value <<= 1;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHash.java,highCapDesiredPrecision,"	private void highCapDesiredPrecision(int desiredPrecision) {
		if (desiredPrecision > 64)
			desiredPrecision = 64;",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		// TODO could possibly be less brute-force here and be more scientific
		// about possible failure points
		Random rand = new Random();
		for (double lat = -90; lat <= 90; lat += rand.nextDouble() + 0.5) {
			for (double lon = -180; lon <= 180; lon += rand.nextDouble() + 0.5) {",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		hash = GeoHash.withCharacterPrecision(20, 31, 12);
		assertEquals(""sew1c2vs2q5r"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20, 31, 12);
		assertEquals(""ksqn1rje83g2"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20.783236276, 31.9867127312312, 12);
		assertEquals(""ksq9zbs0b7vw"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 12);
		assertEquals(""hf7u8p8gn747"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 8);
		assertEquals(""hf7u8p8g"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 4);
		assertEquals(""hf7u"", hash.toBase32());
		
		hash = GeoHash.withCharacterPrecision(39.0247389581054, -76.5110040642321, 12);
		assertEquals(""dqcw4bnrs6s7"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xc000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xd000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);

		// and then from there, just a little south of sanity...
		south = east.getSouthernNeighbour();
		assertEquals(0x0l, south.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle(){
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws SecurityException, NoSuchMethodException,
			IllegalArgumentException, IllegalAccessException, InvocationTargetException {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws SecurityException, NoSuchMethodException,
			IllegalArgumentException, IllegalAccessException, InvocationTargetException {
		for (int bits = 2; bits < 12; bits++) {
			// this divides the range by 2^bits",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		GeoHash fromRef = GeoHash.fromGeohashString(""dr4jb0bn2180"");
		System.out.println(hash);
		System.out.println(fromRef);
		assertEquals(hash, fromRef);
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
47dce9290f32b9f435b16a5d6c6a73165f1eb76a,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(String.format(""%s,%s"", hash.getBoundingBoxPoints()[0], hash.getBoundingBoxPoints()[1]));
	}",https://www.github.com/kungfoo/geohash-java/commit/47dce9290f32b9f435b16a5d6c6a73165f1eb76a
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		hash.upperLeft = new WGS84Point(latitudeRange[0], longitudeRange[0]);
		hash.lowerRight = new WGS84Point(latitudeRange[1], longitudeRange[1]);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(), southern,
				southern.getWesternNeighbour(), western, northern.getWesternNeighbour() };",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,toBase32,"	public String toBase32() {
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		double centerLatitude = (upperLeft.latitude + lowerRight.latitude) / 2;
		double centerLongitude = (upperLeft.longitude + lowerRight.longitude) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,getBoundingBoxPoints,"	public WGS84Point[] getBoundingBoxPoints() {
		return new WGS84Point[] { upperLeft, lowerRight };
	}",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,getFourBoundingBoxPoints,"	public WGS84Point[] getFourBoundingBoxPoints() {
		WGS84Point upperRight = new WGS84Point(upperLeft.latitude, lowerRight.longitude);
		WGS84Point lowerLeft = new WGS84Point(lowerRight.latitude, upperLeft.longitude);
		return new WGS84Point[] { upperLeft, upperRight, lowerLeft, lowerRight };
	}",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,toString,"	public String toString() {
		return String.format(""%s -> %s,%s"", longToBitString(bits), upperLeft, lowerRight);
	}",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,mask,"	public final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,getNorthernNeighbour,"	protected GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,getSouthernNeighbour,"	protected GeoHash getSouthernNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		latBits[0] += 1;
		latBits[0] = maskLastNBits(latBits[0], latBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,getEasternNeighbour,"	protected GeoHash getEasternNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] += 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,getWesternNeighbour,"	protected GeoHash getWesternNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] -= 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				if ((latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				latBits[0] <<= 1;
			} else {
				if ((lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		copyOfBits <<= 1;
		int numberOfBits = getNumberOfLatLonBits()[0];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		int numberOfBits = getNumberOfLatLonBits()[1];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,longToBitString,"	protected String longToBitString(long value) {
		StringBuilder buf = new StringBuilder();
		for (int i = significantBits; i > 0; i--) {
			long bit = value & FIRST_BIT_FLAGGED;
			if (bit == FIRST_BIT_FLAGGED) {
				buf.append('1');
			} else {
				buf.append('0');
			}
			value <<= 1;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
fd5515cd29b74a7c468151be44ff57b2c478c1e4,GeoHash.java,highCapDesiredPrecision,"	private void highCapDesiredPrecision(int desiredPrecision) {
		if (desiredPrecision > 64)
			desiredPrecision = 64;",https://www.github.com/kungfoo/geohash-java/commit/fd5515cd29b74a7c468151be44ff57b2c478c1e4
9280dd7733259c5c4dae3c48bff109a0e611b472,WGS84Point.java,getLatitude,"	public double getLatitude() {
		return latitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/9280dd7733259c5c4dae3c48bff109a0e611b472
9280dd7733259c5c4dae3c48bff109a0e611b472,WGS84Point.java,moveInDirection,"	public static WGS84Point moveInDirection(WGS84Point point, double bearingInDegrees, double distanceInMeters) {

		if (bearingInDegrees < 0 || bearingInDegrees > 360) {
			throw new IllegalArgumentException(""direction must be in (0,360)"");
		}

		double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; // WGS-84
		// ellipsiod
		double alpha1 = bearingInDegrees * degToRad;
		double sinAlpha1 = Math.sin(alpha1), cosAlpha1 = Math.cos(alpha1);

		double tanU1 = (1 - f) * Math.tan(point.latitude * degToRad);
		double cosU1 = 1 / Math.sqrt((1 + tanU1 * tanU1)), sinU1 = tanU1 * cosU1;
		double sigma1 = Math.atan2(tanU1, cosAlpha1);
		double sinAlpha = cosU1 * sinAlpha1;
		double cosSqAlpha = 1 - sinAlpha * sinAlpha;
		double uSq = cosSqAlpha * (a * a - b * b) / (b * b);
		double A = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));
		double B = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));

		double sinSigma = 0, cosSigma = 0, cos2SigmaM = 0;
		double sigma = distanceInMeters / (b * A), sigmaP = 2 * Math.PI;
		while (Math.abs(sigma - sigmaP) > 1e-12) {
			cos2SigmaM = Math.cos(2 * sigma1 + sigma);
			sinSigma = Math.sin(sigma);
			cosSigma = Math.cos(sigma);
			double deltaSigma = B
					* sinSigma
					* (cos2SigmaM + B
							/ 4
							* (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM * (-3 + 4 * sinSigma * sinSigma)
									* (-3 + 4 * cos2SigmaM * cos2SigmaM)));
			sigmaP = sigma;
			sigma = distanceInMeters / (b * A) + deltaSigma;
		}

		double tmp = sinU1 * sinSigma - cosU1 * cosSigma * cosAlpha1;
		double lat2 = Math.atan2(sinU1 * cosSigma + cosU1 * sinSigma * cosAlpha1, (1 - f) * Math.sqrt(sinAlpha * sinAlpha + tmp * tmp));
		double lambda = Math.atan2(sinSigma * sinAlpha1, cosU1 * cosSigma - sinU1 * sinSigma * cosAlpha1);
		double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
		double L = lambda - (1 - C) * f * sinAlpha
				* (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));

		return new WGS84Point(lat2 / degToRad, point.longitude + L / degToRad);
	}",https://www.github.com/kungfoo/geohash-java/commit/9280dd7733259c5c4dae3c48bff109a0e611b472
9280dd7733259c5c4dae3c48bff109a0e611b472,WGS84Point.java,distanceInMeters,"	public static double distanceInMeters(WGS84Point foo, WGS84Point bar) {
		double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; // WGS-84
		// ellipsiod
		double L = (bar.longitude - foo.longitude) * degToRad;
		double U1 = Math.atan((1 - f) * Math.tan(foo.latitude * degToRad));
		double U2 = Math.atan((1 - f) * Math.tan(bar.latitude * degToRad));
		double sinU1 = Math.sin(U1), cosU1 = Math.cos(U1);
		double sinU2 = Math.sin(U2), cosU2 = Math.cos(U2);

		double cosSqAlpha, sinSigma, cos2SigmaM, cosSigma, sigma;

		double lambda = L, lambdaP, iterLimit = 20;
		do {
			double sinLambda = Math.sin(lambda), cosLambda = Math.cos(lambda);
			sinSigma = Math.sqrt((cosU2 * sinLambda) * (cosU2 * sinLambda) + (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda)
					* (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda));
			if (sinSigma == 0)
				return 0; // co-incident points
			cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda;
			sigma = Math.atan2(sinSigma, cosSigma);
			double sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma;
			cosSqAlpha = 1 - sinAlpha * sinAlpha;
			cos2SigmaM = cosSigma - 2 * sinU1 * sinU2 / cosSqAlpha;
			if (cos2SigmaM == Double.NaN)
				cos2SigmaM = 0; // equatorial line: cosSqAlpha=0 (�6)
			double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
			lambdaP = lambda;
			lambda = L + (1 - C) * f * sinAlpha * (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));
		} while (Math.abs(lambda - lambdaP) > EPSILON && --iterLimit > 0);

		if (iterLimit == 0)
			return Double.NaN;
		double uSquared = cosSqAlpha * (a * a - b * b) / (b * b);
		double A = 1 + uSquared / 16384 * (4096 + uSquared * (-768 + uSquared * (320 - 175 * uSquared)));
		double B = uSquared / 1024 * (256 + uSquared * (-128 + uSquared * (74 - 47 * uSquared)));
		double deltaSigma = B
				* sinSigma
				* (cos2SigmaM + B
						/ 4
						* (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM * (-3 + 4 * sinSigma * sinSigma)
								* (-3 + 4 * cos2SigmaM * cos2SigmaM)));
		double s = b * A * (sigma - deltaSigma);

		return s;
	}",https://www.github.com/kungfoo/geohash-java/commit/9280dd7733259c5c4dae3c48bff109a0e611b472
9280dd7733259c5c4dae3c48bff109a0e611b472,WGS84Point.java,getLongitude,"	public double getLongitude() {
		return longitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/9280dd7733259c5c4dae3c48bff109a0e611b472
9280dd7733259c5c4dae3c48bff109a0e611b472,WGS84Point.java,toString,"	public String toString() {
		return String.format(""("" + latitude + "","" + longitude + "")"");
	}",https://www.github.com/kungfoo/geohash-java/commit/9280dd7733259c5c4dae3c48bff109a0e611b472
9280dd7733259c5c4dae3c48bff109a0e611b472,WGS84Point.java,equals,"	public boolean equals(Object obj) {
		if (obj instanceof WGS84Point) {
			WGS84Point other = (WGS84Point) obj;
			return latitude == other.latitude && longitude == other.longitude;
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/9280dd7733259c5c4dae3c48bff109a0e611b472
9280dd7733259c5c4dae3c48bff109a0e611b472,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
	}",https://www.github.com/kungfoo/geohash-java/commit/9280dd7733259c5c4dae3c48bff109a0e611b472
9280dd7733259c5c4dae3c48bff109a0e611b472,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/9280dd7733259c5c4dae3c48bff109a0e611b472
9280dd7733259c5c4dae3c48bff109a0e611b472,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/9280dd7733259c5c4dae3c48bff109a0e611b472
9280dd7733259c5c4dae3c48bff109a0e611b472,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/9280dd7733259c5c4dae3c48bff109a0e611b472
9280dd7733259c5c4dae3c48bff109a0e611b472,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		// TODO could possibly be less brute-force here and be more scientific
		// about possible failure points
		Random rand = new Random();
		for (double lat = -90; lat <= 90; lat += rand.nextDouble() + 0.5) {
			for (double lon = -180; lon <= 180; lon += rand.nextDouble() + 0.5) {",https://www.github.com/kungfoo/geohash-java/commit/9280dd7733259c5c4dae3c48bff109a0e611b472
9280dd7733259c5c4dae3c48bff109a0e611b472,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/9280dd7733259c5c4dae3c48bff109a0e611b472
9280dd7733259c5c4dae3c48bff109a0e611b472,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/9280dd7733259c5c4dae3c48bff109a0e611b472
9280dd7733259c5c4dae3c48bff109a0e611b472,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/9280dd7733259c5c4dae3c48bff109a0e611b472
9280dd7733259c5c4dae3c48bff109a0e611b472,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/9280dd7733259c5c4dae3c48bff109a0e611b472
9280dd7733259c5c4dae3c48bff109a0e611b472,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		hash = GeoHash.withCharacterPrecision(20, 31, 12);
		assertEquals(""sew1c2vs2q5r"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20, 31, 12);
		assertEquals(""ksqn1rje83g2"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20.783236276, 31.9867127312312, 12);
		assertEquals(""ksq9zbs0b7vw"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 12);
		assertEquals(""hf7u8p8gn747"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 8);
		assertEquals(""hf7u8p8g"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 4);
		assertEquals(""hf7u"", hash.toBase32());
		
		hash = GeoHash.withCharacterPrecision(39.0247389581054, -76.5110040642321, 12);
		assertEquals(""dqcw4bnrs6s7"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/9280dd7733259c5c4dae3c48bff109a0e611b472
9280dd7733259c5c4dae3c48bff109a0e611b472,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/9280dd7733259c5c4dae3c48bff109a0e611b472
9280dd7733259c5c4dae3c48bff109a0e611b472,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/9280dd7733259c5c4dae3c48bff109a0e611b472
9280dd7733259c5c4dae3c48bff109a0e611b472,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xc000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xd000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);

		// and then from there, just a little south of sanity...
		south = east.getSouthernNeighbour();
		assertEquals(0x0l, south.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/9280dd7733259c5c4dae3c48bff109a0e611b472
9280dd7733259c5c4dae3c48bff109a0e611b472,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/9280dd7733259c5c4dae3c48bff109a0e611b472
9280dd7733259c5c4dae3c48bff109a0e611b472,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/9280dd7733259c5c4dae3c48bff109a0e611b472
9280dd7733259c5c4dae3c48bff109a0e611b472,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle(){
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/9280dd7733259c5c4dae3c48bff109a0e611b472
9280dd7733259c5c4dae3c48bff109a0e611b472,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
	}",https://www.github.com/kungfoo/geohash-java/commit/9280dd7733259c5c4dae3c48bff109a0e611b472
9280dd7733259c5c4dae3c48bff109a0e611b472,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws SecurityException, NoSuchMethodException,
			IllegalArgumentException, IllegalAccessException, InvocationTargetException {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/9280dd7733259c5c4dae3c48bff109a0e611b472
9280dd7733259c5c4dae3c48bff109a0e611b472,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws SecurityException, NoSuchMethodException,
			IllegalArgumentException, IllegalAccessException, InvocationTargetException {
		for (int bits = 2; bits < 12; bits++) {
			// this divides the range by 2^bits",https://www.github.com/kungfoo/geohash-java/commit/9280dd7733259c5c4dae3c48bff109a0e611b472
9280dd7733259c5c4dae3c48bff109a0e611b472,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());
		
		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/9280dd7733259c5c4dae3c48bff109a0e611b472
9280dd7733259c5c4dae3c48bff109a0e611b472,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(String.format(""%s,%s"", hash.getBoundingBoxPoints()[0], hash.getBoundingBoxPoints()[1]));
	}",https://www.github.com/kungfoo/geohash-java/commit/9280dd7733259c5c4dae3c48bff109a0e611b472
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		hash.upperLeft = new WGS84Point(latitudeRange[0], longitudeRange[0]);
		hash.lowerRight = new WGS84Point(latitudeRange[1], longitudeRange[1]);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(), southern,
				southern.getWesternNeighbour(), western, northern.getWesternNeighbour() };",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,toBase32,"	public String toBase32() {
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		double centerLatitude = (upperLeft.latitude + lowerRight.latitude) / 2;
		double centerLongitude = (upperLeft.longitude + lowerRight.longitude) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,getBoundingBoxPoints,"	public WGS84Point[] getBoundingBoxPoints() {
		return new WGS84Point[] { upperLeft, lowerRight };
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,getFourBoundingBoxPoints,"	public WGS84Point[] getFourBoundingBoxPoints() {
		WGS84Point upperRight = new WGS84Point(upperLeft.latitude, lowerRight.longitude);
		WGS84Point lowerLeft = new WGS84Point(lowerRight.latitude, upperLeft.longitude);
		return new WGS84Point[] { upperLeft, upperRight, lowerLeft, lowerRight };
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,toString,"	public String toString() {
		return String.format(""%s -> %s,%s"", longToBitString(bits), upperLeft, lowerRight);
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,mask,"	private final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,getNorthernNeighbour,"	protected GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,getSouthernNeighbour,"	protected GeoHash getSouthernNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		latBits[0] += 1;
		latBits[0] = maskLastNBits(latBits[0], latBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,getEasternNeighbour,"	protected GeoHash getEasternNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] += 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,getWesternNeighbour,"	protected GeoHash getWesternNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] -= 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				if ((latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				latBits[0] <<= 1;
			} else {
				if ((lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
					hash.addOnBitToEnd();
				} else {
					hash.addOffBitToEnd();
				}
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		copyOfBits <<= 1;
		int numberOfBits = getNumberOfLatLonBits()[0];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		int numberOfBits = getNumberOfLatLonBits()[1];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,longToBitString,"	protected String longToBitString(long value) {
		StringBuilder buf = new StringBuilder();
		for (int i = significantBits; i > 0; i--) {
			long bit = value & FIRST_BIT_FLAGGED;
			if (bit == FIRST_BIT_FLAGGED) {
				buf.append('1');
			} else {
				buf.append('0');
			}
			value <<= 1;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHash.java,highCapDesiredPrecision,"	private void highCapDesiredPrecision(int desiredPrecision) {
		if (desiredPrecision > 64)
			desiredPrecision = 64;",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		// TODO could possibly be less brute-force here and be more scientific
		// about possible failure points
		Random rand = new Random();
		for (double lat = -90; lat <= 90; lat += rand.nextDouble() + 0.5) {
			for (double lon = -180; lon <= 180; lon += rand.nextDouble() + 0.5) {",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		hash = GeoHash.withCharacterPrecision(20, 31, 12);
		assertEquals(""sew1c2vs2q5r"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20, 31, 12);
		assertEquals(""ksqn1rje83g2"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20.783236276, 31.9867127312312, 12);
		assertEquals(""ksq9zbs0b7vw"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 12);
		assertEquals(""hf7u8p8gn747"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 8);
		assertEquals(""hf7u8p8g"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 4);
		assertEquals(""hf7u"", hash.toBase32());
		
		hash = GeoHash.withCharacterPrecision(39.0247389581054, -76.5110040642321, 12);
		assertEquals(""dqcw4bnrs6s7"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xc000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xd000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);

		// and then from there, just a little south of sanity...
		south = east.getSouthernNeighbour();
		assertEquals(0x0l, south.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle(){
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws SecurityException, NoSuchMethodException,
			IllegalArgumentException, IllegalAccessException, InvocationTargetException {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws SecurityException, NoSuchMethodException,
			IllegalArgumentException, IllegalAccessException, InvocationTargetException {
		for (int bits = 2; bits < 12; bits++) {
			// this divides the range by 2^bits",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());
		
		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
eea759c2195a746e64e397c92fc5e77c8edb8f6c,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(String.format(""%s,%s"", hash.getBoundingBoxPoints()[0], hash.getBoundingBoxPoints()[1]));
	}",https://www.github.com/kungfoo/geohash-java/commit/eea759c2195a746e64e397c92fc5e77c8edb8f6c
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.upperLeft = new WGS84Point(latitudeRange[0], longitudeRange[0]);
		hash.lowerRight = new WGS84Point(latitudeRange[1], longitudeRange[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(), southern,
				southern.getWesternNeighbour(), western, northern.getWesternNeighbour() };",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,toBase32,"	public String toBase32() {
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		double centerLatitude = (upperLeft.latitude + lowerRight.latitude) / 2;
		double centerLongitude = (upperLeft.longitude + lowerRight.longitude) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,getBoundingBoxPoints,"	public WGS84Point[] getBoundingBoxPoints() {
		return new WGS84Point[] { upperLeft, lowerRight };
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,getFourBoundingBoxPoints,"	public WGS84Point[] getFourBoundingBoxPoints() {
		WGS84Point upperRight = new WGS84Point(upperLeft.latitude, lowerRight.longitude);
		WGS84Point lowerLeft = new WGS84Point(lowerRight.latitude, upperLeft.longitude);
		return new WGS84Point[] { upperLeft, upperRight, lowerLeft, lowerRight };
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };
		
		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,getNorthernNeighbour,"	protected GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,getSouthernNeighbour,"	protected GeoHash getSouthernNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		latBits[0] += 1;
		latBits[0] = maskLastNBits(latBits[0], latBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,getEasternNeighbour,"	protected GeoHash getEasternNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] += 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,getWesternNeighbour,"	protected GeoHash getWesternNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] -= 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		copyOfBits <<= 1;
		int numberOfBits = getNumberOfLatLonBits()[0];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		int numberOfBits = getNumberOfLatLonBits()[1];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,longToBitString,"	protected String longToBitString(long value) {
		StringBuilder buf = new StringBuilder();
		for (int i = significantBits; i > 0; i--) {
			long bit = value & FIRST_BIT_FLAGGED;
			if (bit == FIRST_BIT_FLAGGED) {
				buf.append('1');
			} else {
				buf.append('0');
			}
			value <<= 1;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,toString,"	public String toString() {
		return String.format(""%s -> %s,%s"", longToBitString(bits), upperLeft, lowerRight);
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,mask,"	private final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHash.java,highCapDesiredPrecision,"	private void highCapDesiredPrecision(int desiredPrecision) {
		if (desiredPrecision > 64)
			desiredPrecision = 64;",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		// TODO could possibly be less brute-force here and be more scientific
		// about possible failure points
		Random rand = new Random();
		for (double lat = -90; lat <= 90; lat += rand.nextDouble() + 0.5) {
			for (double lon = -180; lon <= 180; lon += rand.nextDouble() + 0.5) {",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		hash = GeoHash.withCharacterPrecision(20, 31, 12);
		assertEquals(""sew1c2vs2q5r"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20, 31, 12);
		assertEquals(""ksqn1rje83g2"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20.783236276, 31.9867127312312, 12);
		assertEquals(""ksq9zbs0b7vw"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 12);
		assertEquals(""hf7u8p8gn747"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 8);
		assertEquals(""hf7u8p8g"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 4);
		assertEquals(""hf7u"", hash.toBase32());
		
		hash = GeoHash.withCharacterPrecision(39.0247389581054, -76.5110040642321, 12);
		assertEquals(""dqcw4bnrs6s7"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xc000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xd000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);

		// and then from there, just a little south of sanity...
		south = east.getSouthernNeighbour();
		assertEquals(0x0l, south.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle(){
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertArrayEquals(start.getBoundingBoxPoints(), end.getBoundingBoxPoints());
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws SecurityException, NoSuchMethodException,
			IllegalArgumentException, IllegalAccessException, InvocationTargetException {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws SecurityException, NoSuchMethodException,
			IllegalArgumentException, IllegalAccessException, InvocationTargetException {
		for (int bits = 2; bits < 12; bits++) {
			// this divides the range by 2^bits",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());
		
		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
32c14312deba91f7a03c73b036ccfcaeac8ef6a7,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(String.format(""%s,%s"", hash.getBoundingBoxPoints()[0], hash.getBoundingBoxPoints()[1]));
	}",https://www.github.com/kungfoo/geohash-java/commit/32c14312deba91f7a03c73b036ccfcaeac8ef6a7
eddb4b3877ed67d7b0679f7b35083de281dfdae9,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
		rand = new Random();
	}",https://www.github.com/kungfoo/geohash-java/commit/eddb4b3877ed67d7b0679f7b35083de281dfdae9
eddb4b3877ed67d7b0679f7b35083de281dfdae9,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/eddb4b3877ed67d7b0679f7b35083de281dfdae9
eddb4b3877ed67d7b0679f7b35083de281dfdae9,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/eddb4b3877ed67d7b0679f7b35083de281dfdae9
eddb4b3877ed67d7b0679f7b35083de281dfdae9,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/eddb4b3877ed67d7b0679f7b35083de281dfdae9
eddb4b3877ed67d7b0679f7b35083de281dfdae9,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		// TODO could possibly be less brute-force here and be more scientific
		// about possible failure points
		for (double lat = -90; lat <= 90; lat += rand.nextDouble() + 0.5) {
			for (double lon = -180; lon <= 180; lon += rand.nextDouble() + 0.5) {",https://www.github.com/kungfoo/geohash-java/commit/eddb4b3877ed67d7b0679f7b35083de281dfdae9
eddb4b3877ed67d7b0679f7b35083de281dfdae9,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/eddb4b3877ed67d7b0679f7b35083de281dfdae9
eddb4b3877ed67d7b0679f7b35083de281dfdae9,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/eddb4b3877ed67d7b0679f7b35083de281dfdae9
eddb4b3877ed67d7b0679f7b35083de281dfdae9,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/eddb4b3877ed67d7b0679f7b35083de281dfdae9
eddb4b3877ed67d7b0679f7b35083de281dfdae9,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/eddb4b3877ed67d7b0679f7b35083de281dfdae9
eddb4b3877ed67d7b0679f7b35083de281dfdae9,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		hash = GeoHash.withCharacterPrecision(20, 31, 12);
		assertEquals(""sew1c2vs2q5r"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20, 31, 12);
		assertEquals(""ksqn1rje83g2"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-20.783236276, 31.9867127312312, 12);
		assertEquals(""ksq9zbs0b7vw"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 12);
		assertEquals(""hf7u8p8gn747"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 8);
		assertEquals(""hf7u8p8g"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(-76.5110040642321, 39.0247389581054, 4);
		assertEquals(""hf7u"", hash.toBase32());

		hash = GeoHash.withCharacterPrecision(39.0247389581054, -76.5110040642321, 12);
		assertEquals(""dqcw4bnrs6s7"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/eddb4b3877ed67d7b0679f7b35083de281dfdae9
eddb4b3877ed67d7b0679f7b35083de281dfdae9,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/eddb4b3877ed67d7b0679f7b35083de281dfdae9
eddb4b3877ed67d7b0679f7b35083de281dfdae9,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/eddb4b3877ed67d7b0679f7b35083de281dfdae9
eddb4b3877ed67d7b0679f7b35083de281dfdae9,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xc000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xd000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);

		// and then from there, just a little south of sanity...
		south = east.getSouthernNeighbour();
		assertEquals(0x0l, south.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/eddb4b3877ed67d7b0679f7b35083de281dfdae9
eddb4b3877ed67d7b0679f7b35083de281dfdae9,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/eddb4b3877ed67d7b0679f7b35083de281dfdae9
eddb4b3877ed67d7b0679f7b35083de281dfdae9,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/eddb4b3877ed67d7b0679f7b35083de281dfdae9
eddb4b3877ed67d7b0679f7b35083de281dfdae9,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/eddb4b3877ed67d7b0679f7b35083de281dfdae9
eddb4b3877ed67d7b0679f7b35083de281dfdae9,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertArrayEquals(start.getBoundingBoxPoints(), end.getBoundingBoxPoints());
	}",https://www.github.com/kungfoo/geohash-java/commit/eddb4b3877ed67d7b0679f7b35083de281dfdae9
eddb4b3877ed67d7b0679f7b35083de281dfdae9,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/eddb4b3877ed67d7b0679f7b35083de281dfdae9
eddb4b3877ed67d7b0679f7b35083de281dfdae9,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
			double randomLatitude = (rand.nextDouble() - 0.5) * 180;",https://www.github.com/kungfoo/geohash-java/commit/eddb4b3877ed67d7b0679f7b35083de281dfdae9
eddb4b3877ed67d7b0679f7b35083de281dfdae9,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/eddb4b3877ed67d7b0679f7b35083de281dfdae9
eddb4b3877ed67d7b0679f7b35083de281dfdae9,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(String.format(""%s,%s"", hash.getBoundingBoxPoints()[0], hash.getBoundingBoxPoints()[1]));
	}",https://www.github.com/kungfoo/geohash-java/commit/eddb4b3877ed67d7b0679f7b35083de281dfdae9
59b75131f71f98f2c457468240288e649332d241,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
		rand = new Random();
	}",https://www.github.com/kungfoo/geohash-java/commit/59b75131f71f98f2c457468240288e649332d241
59b75131f71f98f2c457468240288e649332d241,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/59b75131f71f98f2c457468240288e649332d241
59b75131f71f98f2c457468240288e649332d241,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/59b75131f71f98f2c457468240288e649332d241
59b75131f71f98f2c457468240288e649332d241,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/59b75131f71f98f2c457468240288e649332d241
59b75131f71f98f2c457468240288e649332d241,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		// TODO could possibly be less brute-force here and be more scientific
		// about possible failure points
		for (double lat = -90; lat <= 90; lat += rand.nextDouble() + 0.5) {
			for (double lon = -180; lon <= 180; lon += rand.nextDouble() + 0.5) {",https://www.github.com/kungfoo/geohash-java/commit/59b75131f71f98f2c457468240288e649332d241
59b75131f71f98f2c457468240288e649332d241,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/59b75131f71f98f2c457468240288e649332d241
59b75131f71f98f2c457468240288e649332d241,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/59b75131f71f98f2c457468240288e649332d241
59b75131f71f98f2c457468240288e649332d241,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/59b75131f71f98f2c457468240288e649332d241
59b75131f71f98f2c457468240288e649332d241,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/59b75131f71f98f2c457468240288e649332d241
59b75131f71f98f2c457468240288e649332d241,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");
	}",https://www.github.com/kungfoo/geohash-java/commit/59b75131f71f98f2c457468240288e649332d241
59b75131f71f98f2c457468240288e649332d241,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/59b75131f71f98f2c457468240288e649332d241
59b75131f71f98f2c457468240288e649332d241,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/59b75131f71f98f2c457468240288e649332d241
59b75131f71f98f2c457468240288e649332d241,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/59b75131f71f98f2c457468240288e649332d241
59b75131f71f98f2c457468240288e649332d241,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xc000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xd000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);

		// and then from there, just a little south of sanity...
		south = east.getSouthernNeighbour();
		assertEquals(0x0l, south.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/59b75131f71f98f2c457468240288e649332d241
59b75131f71f98f2c457468240288e649332d241,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/59b75131f71f98f2c457468240288e649332d241
59b75131f71f98f2c457468240288e649332d241,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/59b75131f71f98f2c457468240288e649332d241
59b75131f71f98f2c457468240288e649332d241,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/59b75131f71f98f2c457468240288e649332d241
59b75131f71f98f2c457468240288e649332d241,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertArrayEquals(start.getBoundingBoxPoints(), end.getBoundingBoxPoints());
	}",https://www.github.com/kungfoo/geohash-java/commit/59b75131f71f98f2c457468240288e649332d241
59b75131f71f98f2c457468240288e649332d241,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/59b75131f71f98f2c457468240288e649332d241
59b75131f71f98f2c457468240288e649332d241,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
			double randomLatitude = (rand.nextDouble() - 0.5) * 180;",https://www.github.com/kungfoo/geohash-java/commit/59b75131f71f98f2c457468240288e649332d241
59b75131f71f98f2c457468240288e649332d241,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/59b75131f71f98f2c457468240288e649332d241
59b75131f71f98f2c457468240288e649332d241,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(String.format(""%s,%s"", hash.getBoundingBoxPoints()[0], hash.getBoundingBoxPoints()[1]));
	}",https://www.github.com/kungfoo/geohash-java/commit/59b75131f71f98f2c457468240288e649332d241
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.upperLeft = new WGS84Point(latitudeRange[0], longitudeRange[0]);
		hash.lowerRight = new WGS84Point(latitudeRange[1], longitudeRange[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(), southern,
				southern.getWesternNeighbour(), western, northern.getWesternNeighbour() };",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,toBase32,"	public String toBase32() {
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		double centerLatitude = (upperLeft.latitude + lowerRight.latitude) / 2;
		double centerLongitude = (upperLeft.longitude + lowerRight.longitude) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,getBoundingBoxPoints,"	public WGS84Point[] getBoundingBoxPoints() {
		return new WGS84Point[] { upperLeft, lowerRight };
	}",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,getFourBoundingBoxPoints,"	public WGS84Point[] getFourBoundingBoxPoints() {
		WGS84Point upperRight = new WGS84Point(upperLeft.latitude, lowerRight.longitude);
		WGS84Point lowerLeft = new WGS84Point(lowerRight.latitude, upperLeft.longitude);
		return new WGS84Point[] { upperLeft, upperRight, lowerLeft, lowerRight };
	}",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };
		
		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,getNorthernNeighbour,"	protected GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,getSouthernNeighbour,"	protected GeoHash getSouthernNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		latBits[0] += 1;
		latBits[0] = maskLastNBits(latBits[0], latBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,getEasternNeighbour,"	protected GeoHash getEasternNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] += 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,getWesternNeighbour,"	protected GeoHash getWesternNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] -= 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		copyOfBits <<= 1;
		int numberOfBits = getNumberOfLatLonBits()[0];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		int numberOfBits = getNumberOfLatLonBits()[1];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,toString,"	public String toString() {
		return String.format(""%s -> %s,%s"", Long.toBinaryString(bits), upperLeft, lowerRight);
	}",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,mask,"	private final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
35d3fa28e8178cb061bc580685b1c0547734e5ce,GeoHash.java,highCapDesiredPrecision,"	private void highCapDesiredPrecision(int desiredPrecision) {
		if (desiredPrecision > 64)
			desiredPrecision = 64;",https://www.github.com/kungfoo/geohash-java/commit/35d3fa28e8178cb061bc580685b1c0547734e5ce
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.upperLeft = new WGS84Point(latitudeRange[0], longitudeRange[0]);
		hash.lowerRight = new WGS84Point(latitudeRange[1], longitudeRange[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(), southern,
				southern.getWesternNeighbour(), western, northern.getWesternNeighbour() };",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,toBase32,"	public String toBase32() {
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		double centerLatitude = (upperLeft.latitude + lowerRight.latitude) / 2;
		double centerLongitude = (upperLeft.longitude + lowerRight.longitude) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,getBoundingBoxPoints,"	public WGS84Point[] getBoundingBoxPoints() {
		return new WGS84Point[] { upperLeft, lowerRight };
	}",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,getFourBoundingBoxPoints,"	public WGS84Point[] getFourBoundingBoxPoints() {
		WGS84Point upperRight = new WGS84Point(upperLeft.latitude, lowerRight.longitude);
		WGS84Point lowerLeft = new WGS84Point(lowerRight.latitude, upperLeft.longitude);
		return new WGS84Point[] { upperLeft, upperRight, lowerLeft, lowerRight };
	}",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };
		
		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		latBits[0] += 1;
		latBits[0] = maskLastNBits(latBits[0], latBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] += 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latBits = getRightAlignedLatitudeBits();
		long[] lonBits = getRightAlignedLongitudeBits();
		lonBits[0] -= 1;
		lonBits[0] = maskLastNBits(lonBits[0], lonBits[1]);
		return recombineLatLonBitsToHash(latBits, lonBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		copyOfBits <<= 1;
		int numberOfBits = getNumberOfLatLonBits()[0];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		int numberOfBits = getNumberOfLatLonBits()[1];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,toString,"	public String toString() {
		return String.format(""%s -> %s,%s"", Long.toBinaryString(bits), upperLeft, lowerRight);
	}",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,mask,"	private final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
235f6f6790a32e3efa0a123cb12b983f391234eb,GeoHash.java,highCapDesiredPrecision,"	private void highCapDesiredPrecision(int desiredPrecision) {
		if (desiredPrecision > 64)
			desiredPrecision = 64;",https://www.github.com/kungfoo/geohash-java/commit/235f6f6790a32e3efa0a123cb12b983f391234eb
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.upperLeft = new WGS84Point(latitudeRange[0], longitudeRange[0]);
		hash.lowerRight = new WGS84Point(latitudeRange[1], longitudeRange[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(), southern,
				southern.getWesternNeighbour(), western, northern.getWesternNeighbour() };",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,toBase32,"	public String toBase32() {
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		double centerLatitude = (upperLeft.latitude + lowerRight.latitude) / 2;
		double centerLongitude = (upperLeft.longitude + lowerRight.longitude) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,getBoundingBoxPoints,"	public WGS84Point[] getBoundingBoxPoints() {
		return new WGS84Point[] { upperLeft, lowerRight };
	}",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,getFourBoundingBoxPoints,"	public WGS84Point[] getFourBoundingBoxPoints() {
		WGS84Point upperRight = new WGS84Point(upperLeft.latitude, lowerRight.longitude);
		WGS84Point lowerLeft = new WGS84Point(lowerRight.latitude, upperLeft.longitude);
		return new WGS84Point[] { upperLeft, upperRight, lowerLeft, lowerRight };
	}",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };
		
		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		copyOfBits <<= 1;
		int numberOfBits = getNumberOfLatLonBits()[0];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		int numberOfBits = getNumberOfLatLonBits()[1];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,toString,"	public String toString() {
		return String.format(""%s -> %s,%s"", Long.toBinaryString(bits), upperLeft, lowerRight);
	}",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,mask,"	private final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
1a6000065a184657f52fd777d63fecb376cde618,GeoHash.java,highCapDesiredPrecision,"	private void highCapDesiredPrecision(int desiredPrecision) {
		if (desiredPrecision > 64)
			desiredPrecision = 64;",https://www.github.com/kungfoo/geohash-java/commit/1a6000065a184657f52fd777d63fecb376cde618
8f151fe2fc6552985f0b0a6788b40862c59a3867,BoundingBox.java,getUpperLeft,"	public WGS84Point getUpperLeft() {
		return upperLeft;
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,BoundingBox.java,getLowerRight,"	public WGS84Point getLowerRight() {
		return lowerRight;
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,BoundingBox.java,equals,"	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj instanceof BoundingBox) {
			BoundingBox o = (BoundingBox) obj;",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,BoundingBox.java,hashCode,"	public int hashCode() {
		return 31 * (713 + upperLeft.hashCode()) + lowerRight.hashCode();
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,BoundingBox.java,area,"	public double area() {
		return (lowerRight.latitude - upperLeft.latitude) * (lowerRight.longitude - lowerRight.longitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,BoundingBox.java,contains,"	public boolean contains(WGS84Point point) {
		return point.latitude >= upperLeft.latitude && point.latitude <= upperLeft.latitude
				&& point.longitude >= lowerRight.longitude && point.longitude <= lowerRight.longitude;",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,BoundingBox.java,toString,"	public String toString() {
		return upperLeft + "" -> "" + lowerRight;
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,WGS84Point.java,getLatitude,"	public double getLatitude() {
		return latitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,WGS84Point.java,moveInDirection,"	public static WGS84Point moveInDirection(WGS84Point point, double bearingInDegrees, double distanceInMeters) {

		if (bearingInDegrees < 0 || bearingInDegrees > 360) {
			throw new IllegalArgumentException(""direction must be in (0,360)"");
		}

		double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; // WGS-84
		// ellipsiod
		double alpha1 = bearingInDegrees * degToRad;
		double sinAlpha1 = Math.sin(alpha1), cosAlpha1 = Math.cos(alpha1);

		double tanU1 = (1 - f) * Math.tan(point.latitude * degToRad);
		double cosU1 = 1 / Math.sqrt((1 + tanU1 * tanU1)), sinU1 = tanU1 * cosU1;
		double sigma1 = Math.atan2(tanU1, cosAlpha1);
		double sinAlpha = cosU1 * sinAlpha1;
		double cosSqAlpha = 1 - sinAlpha * sinAlpha;
		double uSq = cosSqAlpha * (a * a - b * b) / (b * b);
		double A = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));
		double B = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));

		double sinSigma = 0, cosSigma = 0, cos2SigmaM = 0;
		double sigma = distanceInMeters / (b * A), sigmaP = 2 * Math.PI;
		while (Math.abs(sigma - sigmaP) > 1e-12) {
			cos2SigmaM = Math.cos(2 * sigma1 + sigma);
			sinSigma = Math.sin(sigma);
			cosSigma = Math.cos(sigma);
			double deltaSigma = B
					* sinSigma
					* (cos2SigmaM + B
							/ 4
							* (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM
									* (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));
			sigmaP = sigma;
			sigma = distanceInMeters / (b * A) + deltaSigma;
		}

		double tmp = sinU1 * sinSigma - cosU1 * cosSigma * cosAlpha1;
		double lat2 = Math.atan2(sinU1 * cosSigma + cosU1 * sinSigma * cosAlpha1, (1 - f)
				* Math.sqrt(sinAlpha * sinAlpha + tmp * tmp));
		double lambda = Math.atan2(sinSigma * sinAlpha1, cosU1 * cosSigma - sinU1 * sinSigma * cosAlpha1);
		double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
		double L = lambda - (1 - C) * f * sinAlpha
				* (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));

		return new WGS84Point(lat2 / degToRad, point.longitude + L / degToRad);
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,WGS84Point.java,distanceInMeters,"	public static double distanceInMeters(WGS84Point foo, WGS84Point bar) {
		double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; // WGS-84
		// ellipsiod
		double L = (bar.longitude - foo.longitude) * degToRad;
		double U1 = Math.atan((1 - f) * Math.tan(foo.latitude * degToRad));
		double U2 = Math.atan((1 - f) * Math.tan(bar.latitude * degToRad));
		double sinU1 = Math.sin(U1), cosU1 = Math.cos(U1);
		double sinU2 = Math.sin(U2), cosU2 = Math.cos(U2);

		double cosSqAlpha, sinSigma, cos2SigmaM, cosSigma, sigma;

		double lambda = L, lambdaP, iterLimit = 20;
		do {
			double sinLambda = Math.sin(lambda), cosLambda = Math.cos(lambda);
			sinSigma = Math.sqrt((cosU2 * sinLambda) * (cosU2 * sinLambda)
					+ (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda) * (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda));
			if (sinSigma == 0)
				return 0; // co-incident points
			cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda;
			sigma = Math.atan2(sinSigma, cosSigma);
			double sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma;
			cosSqAlpha = 1 - sinAlpha * sinAlpha;
			cos2SigmaM = cosSigma - 2 * sinU1 * sinU2 / cosSqAlpha;
			if (cos2SigmaM == Double.NaN)
				cos2SigmaM = 0; // equatorial line: cosSqAlpha=0 (�6)
			double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
			lambdaP = lambda;
			lambda = L + (1 - C) * f * sinAlpha
					* (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));
		} while (Math.abs(lambda - lambdaP) > EPSILON && --iterLimit > 0);

		if (iterLimit == 0)
			return Double.NaN;
		double uSquared = cosSqAlpha * (a * a - b * b) / (b * b);
		double A = 1 + uSquared / 16384 * (4096 + uSquared * (-768 + uSquared * (320 - 175 * uSquared)));
		double B = uSquared / 1024 * (256 + uSquared * (-128 + uSquared * (74 - 47 * uSquared)));
		double deltaSigma = B
				* sinSigma
				* (cos2SigmaM + B
						/ 4
						* (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM
								* (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));
		double s = b * A * (sigma - deltaSigma);

		return s;
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,WGS84Point.java,getLongitude,"	public double getLongitude() {
		return longitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,WGS84Point.java,toString,"	public String toString() {
		return String.format(""("" + latitude + "","" + longitude + "")"");
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,WGS84Point.java,equals,"	public boolean equals(Object obj) {
		if (obj instanceof WGS84Point) {
			WGS84Point other = (WGS84Point) obj;
			return latitude == other.latitude && longitude == other.longitude;
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,WGS84Point.java,hashCode,"	public int hashCode() {
		int result = 42;
		long latBits = Double.doubleToLongBits(latitude);
		long lonBits = Double.doubleToLongBits(longitude);
		result = 31 * result + (int) (latBits ^ (latBits >>> 32));
		result = 31 * result + (int) (lonBits ^ (lonBits >>> 32));
		return result;
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,BoundingBoxTest.java,setUp,"	public void setUp() {
		a = new BoundingBox(new WGS84Point(30, 20), new WGS84Point(21, 31));
		b = new BoundingBox(a);
		c = new BoundingBox(new WGS84Point(45, -170), new WGS84Point(-45, 170));
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,BoundingBoxTest.java,testHashCode,"	public void testHashCode() {
		assertEquals(a.hashCode(), b.hashCode());
		assertFalse(a.hashCode() == c.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,BoundingBoxTest.java,testEqualsObject,"	public void testEqualsObject() {
		assertEquals(a, b);
		assertEquals(b, a);
		assertFalse(a.equals(c));
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,BoundingBoxTest.java,assertContains,"	private void assertContains(BoundingBox box, WGS84Point p){
		assertTrue(p + "" should be in "" + box, box.contains(p));
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,GeoHashBoundingBoxSearchTest.java,testBoundingBoxSearch,"	public void testBoundingBoxSearch() {
		
	}
}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
		rand = new Random();
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		// TODO could possibly be less brute-force here and be more scientific
		// about possible failure points
		for (double lat = -90; lat <= 90; lat += rand.nextDouble() + 0.5) {
			for (double lon = -180; lon <= 180; lon += rand.nextDouble() + 0.5) {",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertWithin(hash, bbox);
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,GeoHashTest.java,assertWithin,"	private void assertWithin(GeoHash hash, GeoHash bbox) {
		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xc000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xd000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);

		// and then from there, just a little south of sanity...
		south = east.getSouthernNeighbour();
		assertEquals(0x0l, south.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertArrayEquals(start.getBoundingBoxPoints(), end.getBoundingBoxPoints());
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
			double randomLatitude = (rand.nextDouble() - 0.5) * 180;",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,GeoHashTest.java,testSimpleWithin,"	public void testSimpleWithin() {
		GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
		GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
		assertWithin(inside, hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(String.format(""%s,%s"", hash.getBoundingBoxPoints()[0], hash.getBoundingBoxPoints()[1]));
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,WGS84PointTest.java,setUp,"	public void setUp() {
		a = new WGS84Point(120, 15.7465465);
		b = new WGS84Point(a);
		c = new WGS84Point(-120, b.getLongitude());
		d = new WGS84Point(-32.9687253, 12.42334242);
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,WGS84PointTest.java,testVincenty,"	public void testVincenty() {
		WGS84Point startPoint = new WGS84Point(40, 40);

		int distanceInMeters = 10000;
		WGS84Point result = WGS84Point.moveInDirection(startPoint, 120,
				distanceInMeters);
		Assert.assertEquals(40.10134882, result.longitude, DELTA);
		Assert.assertEquals(39.9549245, result.latitude, DELTA);

		Assert.assertEquals(distanceInMeters, WGS84Point.distanceInMeters(
				startPoint, result), DELTA);
		
		
		WGS84Point p1 = new WGS84Point(1,1);
		int tenThousandKilometers = 10000000;
		WGS84Point p2 = WGS84Point.moveInDirection(p1, 270, tenThousandKilometers);
		System.out.println(p2);
		Assert.assertEquals(tenThousandKilometers, WGS84Point.distanceInMeters(p1, p2), DELTA);
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,WGS84PointTest.java,testEquals,"	public void testEquals() {
		assertEquals(a, a);
		assertEquals(a, b);
		assertEquals(b, a);
		assertNotSame(a, b);
		
		assertFalse(a.equals(c));
		assertFalse(c.equals(a));
		assertFalse(d.equals(c));
		assertFalse(d.equals(a));
		assertFalse(d.equals(new Integer(10)));
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
8f151fe2fc6552985f0b0a6788b40862c59a3867,WGS84PointTest.java,testHashCode,"	public void testHashCode() {
		assertEquals(a.hashCode(), a.hashCode());
		assertEquals(a.hashCode(), b.hashCode());
		assertFalse(a.hashCode() == c.hashCode());
		assertFalse(d.hashCode() == c.hashCode());
		assertFalse(d.hashCode() == new Integer(10).hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/8f151fe2fc6552985f0b0a6788b40862c59a3867
20b95f113a25a55122cc6605f519bbabae31179e,BoundingBox.java,getUpperLeft,"	public WGS84Point getUpperLeft() {
		return upperLeft;
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,BoundingBox.java,getLowerRight,"	public WGS84Point getLowerRight() {
		return lowerRight;
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,BoundingBox.java,equals,"	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj instanceof BoundingBox) {
			BoundingBox o = (BoundingBox) obj;",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,BoundingBox.java,hashCode,"	public int hashCode() {
		return 31 * (713 + upperLeft.hashCode()) + lowerRight.hashCode();
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,BoundingBox.java,area,"	public double area() {
		return (lowerRight.latitude - upperLeft.latitude) * (lowerRight.longitude - lowerRight.longitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,BoundingBox.java,contains,"	public boolean contains(WGS84Point point) {
		return point.latitude >= upperLeft.latitude && point.latitude <= upperLeft.latitude
				&& point.longitude >= lowerRight.longitude && point.longitude <= lowerRight.longitude;",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,BoundingBox.java,toString,"	public String toString() {
		return upperLeft + "" -> "" + lowerRight;
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,BoundingBox.java,getFourBoundingBoxPoints,"	public WGS84Point[] getFourBoundingBoxPoints() {
		WGS84Point upperRight = new WGS84Point(upperLeft.latitude, lowerRight.longitude);
		WGS84Point lowerLeft = new WGS84Point(lowerRight.latitude, upperLeft.longitude);
		return new WGS84Point[] { upperLeft, upperRight, lowerLeft, lowerRight };
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,BoundingBox.java,getCenterPoint,"	public WGS84Point getCenterPoint() {
		double centerLatitude = (upperLeft.latitude + lowerRight.latitude) / 2;
		double centerLongitude = (upperLeft.longitude + lowerRight.longitude) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(
				latitudeRange[1], longitudeRange[1]));",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern, southern.getWesternNeighbour(), western, northern.getWesternNeighbour() };",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,toBase32,"	public String toBase32() {
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,getFourBoundingBoxPoints,"	public WGS84Point[] getFourBoundingBoxPoints() {
		return boundingBox.getFourBoundingBoxPoints();
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		copyOfBits <<= 1;
		int numberOfBits = getNumberOfLatLonBits()[0];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		int numberOfBits = getNumberOfLatLonBits()[1];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,toString,"	public String toString() {
		return String.format(""%s -> %s"", Long.toBinaryString(bits), boundingBox);
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,mask,"	private final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHash.java,highCapDesiredPrecision,"	private void highCapDesiredPrecision(int desiredPrecision) {
		if (desiredPrecision > 64)
			desiredPrecision = 64;",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
		rand = new Random();
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		// TODO could possibly be less brute-force here and be more scientific
		// about possible failure points
		for (double lat = -90; lat <= 90; lat += rand.nextDouble() + 0.5) {
			for (double lon = -180; lon <= 180; lon += rand.nextDouble() + 0.5) {",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertWithin(hash, bbox);
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHashTest.java,assertWithin,"	private void assertWithin(GeoHash hash, GeoHash bbox) {
		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xc000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xd000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);

		// and then from there, just a little south of sanity...
		south = east.getSouthernNeighbour();
		assertEquals(0x0l, south.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertEquals(start.getBoundingBox(), end.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
			double randomLatitude = (rand.nextDouble() - 0.5) * 180;",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHashTest.java,testSimpleWithin,"	public void testSimpleWithin() {
		GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
		GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
		assertWithin(inside, hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
20b95f113a25a55122cc6605f519bbabae31179e,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(hash.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/20b95f113a25a55122cc6605f519bbabae31179e
16f6379df8ae6e057910d05a2fb582f1ebc4f009,BoundingBox.java,getUpperLeft,"	public WGS84Point getUpperLeft() {
		return upperLeft;
	}",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,BoundingBox.java,getLowerRight,"	public WGS84Point getLowerRight() {
		return lowerRight;
	}",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,BoundingBox.java,equals,"	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj instanceof BoundingBox) {
			BoundingBox o = (BoundingBox) obj;",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,BoundingBox.java,hashCode,"	public int hashCode() {
		return 31 * (713 + upperLeft.hashCode()) + lowerRight.hashCode();
	}",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,BoundingBox.java,area,"	public double area() {
		return (lowerRight.latitude - upperLeft.latitude) * (lowerRight.longitude - lowerRight.longitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,BoundingBox.java,contains,"	public boolean contains(WGS84Point point) {
	return (point.latitude >= upperLeft.latitude)
		&& (point.longitude >= upperLeft.longitude)",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,BoundingBox.java,toString,"	public String toString() {
		return upperLeft + "" -> "" + lowerRight;
	}",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,BoundingBox.java,getFourBoundingBoxPoints,"	public WGS84Point[] getFourBoundingBoxPoints() {
		WGS84Point upperRight = new WGS84Point(upperLeft.latitude, lowerRight.longitude);
		WGS84Point lowerLeft = new WGS84Point(lowerRight.latitude, upperLeft.longitude);
		return new WGS84Point[] { upperLeft, upperRight, lowerLeft, lowerRight };
	}",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,BoundingBox.java,getCenterPoint,"	public WGS84Point getCenterPoint() {
		double centerLatitude = (upperLeft.latitude + lowerRight.latitude) / 2;
		double centerLongitude = (upperLeft.longitude + lowerRight.longitude) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
		rand = new Random();
	}",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		// TODO could possibly be less brute-force here and be more scientific
		// about possible failure points
		for (double lat = -90; lat <= 90; lat += rand.nextDouble() + 0.5) {
			for (double lon = -180; lon <= 180; lon += rand.nextDouble() + 0.5) {",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertWithin(hash, bbox);
	}",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,GeoHashTest.java,assertWithin,"	private void assertWithin(GeoHash hash, GeoHash bbox) {
		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");
	}",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xc000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xd000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);

		// and then from there, just a little south of sanity...
		south = east.getSouthernNeighbour();
		assertEquals(0x0l, south.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertEquals(start.getBoundingBox(), end.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
			double randomLatitude = (rand.nextDouble() - 0.5) * 180;",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,GeoHashTest.java,testSimpleWithin,"	public void testSimpleWithin() {
		GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
		GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
		assertWithin(inside, hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
16f6379df8ae6e057910d05a2fb582f1ebc4f009,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(hash.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/16f6379df8ae6e057910d05a2fb582f1ebc4f009
3a5f854231fb9c0d98dd3204eed22bfd70d12b0f,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
		rand = new Random();
	}",https://www.github.com/kungfoo/geohash-java/commit/3a5f854231fb9c0d98dd3204eed22bfd70d12b0f
3a5f854231fb9c0d98dd3204eed22bfd70d12b0f,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/3a5f854231fb9c0d98dd3204eed22bfd70d12b0f
3a5f854231fb9c0d98dd3204eed22bfd70d12b0f,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/3a5f854231fb9c0d98dd3204eed22bfd70d12b0f
3a5f854231fb9c0d98dd3204eed22bfd70d12b0f,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/3a5f854231fb9c0d98dd3204eed22bfd70d12b0f
3a5f854231fb9c0d98dd3204eed22bfd70d12b0f,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		// TODO could possibly be less brute-force here and be more scientific
		// about possible failure points
		for (double lat = -90; lat <= 90; lat += rand.nextDouble() + 0.5) {
			for (double lon = -180; lon <= 180; lon += rand.nextDouble() + 0.5) {",https://www.github.com/kungfoo/geohash-java/commit/3a5f854231fb9c0d98dd3204eed22bfd70d12b0f
3a5f854231fb9c0d98dd3204eed22bfd70d12b0f,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertWithin(hash, bbox);
	}",https://www.github.com/kungfoo/geohash-java/commit/3a5f854231fb9c0d98dd3204eed22bfd70d12b0f
3a5f854231fb9c0d98dd3204eed22bfd70d12b0f,GeoHashTest.java,assertWithin,"	private void assertWithin(GeoHash hash, GeoHash bbox) {
		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/3a5f854231fb9c0d98dd3204eed22bfd70d12b0f
3a5f854231fb9c0d98dd3204eed22bfd70d12b0f,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/3a5f854231fb9c0d98dd3204eed22bfd70d12b0f
3a5f854231fb9c0d98dd3204eed22bfd70d12b0f,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/3a5f854231fb9c0d98dd3204eed22bfd70d12b0f
3a5f854231fb9c0d98dd3204eed22bfd70d12b0f,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/3a5f854231fb9c0d98dd3204eed22bfd70d12b0f
3a5f854231fb9c0d98dd3204eed22bfd70d12b0f,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");
	}",https://www.github.com/kungfoo/geohash-java/commit/3a5f854231fb9c0d98dd3204eed22bfd70d12b0f
3a5f854231fb9c0d98dd3204eed22bfd70d12b0f,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/3a5f854231fb9c0d98dd3204eed22bfd70d12b0f
3a5f854231fb9c0d98dd3204eed22bfd70d12b0f,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/3a5f854231fb9c0d98dd3204eed22bfd70d12b0f
3a5f854231fb9c0d98dd3204eed22bfd70d12b0f,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/3a5f854231fb9c0d98dd3204eed22bfd70d12b0f
3a5f854231fb9c0d98dd3204eed22bfd70d12b0f,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xc000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xd000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);

		// and then from there, just a little south of sanity...
		south = east.getSouthernNeighbour();
		assertEquals(0x0l, south.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/3a5f854231fb9c0d98dd3204eed22bfd70d12b0f
3a5f854231fb9c0d98dd3204eed22bfd70d12b0f,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/3a5f854231fb9c0d98dd3204eed22bfd70d12b0f
3a5f854231fb9c0d98dd3204eed22bfd70d12b0f,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/3a5f854231fb9c0d98dd3204eed22bfd70d12b0f
3a5f854231fb9c0d98dd3204eed22bfd70d12b0f,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/3a5f854231fb9c0d98dd3204eed22bfd70d12b0f
3a5f854231fb9c0d98dd3204eed22bfd70d12b0f,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertEquals(start.getBoundingBox(), end.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/3a5f854231fb9c0d98dd3204eed22bfd70d12b0f
3a5f854231fb9c0d98dd3204eed22bfd70d12b0f,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/3a5f854231fb9c0d98dd3204eed22bfd70d12b0f
3a5f854231fb9c0d98dd3204eed22bfd70d12b0f,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
			double randomLatitude = (rand.nextDouble() - 0.5) * 180;",https://www.github.com/kungfoo/geohash-java/commit/3a5f854231fb9c0d98dd3204eed22bfd70d12b0f
3a5f854231fb9c0d98dd3204eed22bfd70d12b0f,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/3a5f854231fb9c0d98dd3204eed22bfd70d12b0f
3a5f854231fb9c0d98dd3204eed22bfd70d12b0f,GeoHashTest.java,testSimpleWithin,"	public void testSimpleWithin() {
		GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
		GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
		assertWithin(inside, hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/3a5f854231fb9c0d98dd3204eed22bfd70d12b0f
3a5f854231fb9c0d98dd3204eed22bfd70d12b0f,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(hash.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/3a5f854231fb9c0d98dd3204eed22bfd70d12b0f
5cd86607e139303c651f2ad64878aa4f2438afb3,BoundingBox.java,getUpperLeft,"	public WGS84Point getUpperLeft() {
		return upperLeft;
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,BoundingBox.java,getLowerRight,"	public WGS84Point getLowerRight() {
		return lowerRight;
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,BoundingBox.java,equals,"	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj instanceof BoundingBox) {
			BoundingBox o = (BoundingBox) obj;",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,BoundingBox.java,hashCode,"	public int hashCode() {
		return 31 * (713 + upperLeft.hashCode()) + lowerRight.hashCode();
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,BoundingBox.java,contains,"	public boolean contains(WGS84Point point) {
		return (point.latitude >= upperLeft.latitude) && (point.longitude >= upperLeft.longitude)
				&& (point.latitude <= lowerRight.latitude) && (point.longitude <= lowerRight.longitude);",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,BoundingBox.java,toString,"	public String toString() {
		return upperLeft + "" -> "" + lowerRight;
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,BoundingBox.java,getFourBoundingBoxPoints,"	public WGS84Point[] getFourBoundingBoxPoints() {
		WGS84Point upperRight = new WGS84Point(upperLeft.latitude, lowerRight.longitude);
		WGS84Point lowerLeft = new WGS84Point(lowerRight.latitude, upperLeft.longitude);
		return new WGS84Point[] { upperLeft, upperRight, lowerLeft, lowerRight };
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,BoundingBox.java,getCenterPoint,"	public WGS84Point getCenterPoint() {
		double centerLatitude = (upperLeft.latitude + lowerRight.latitude) / 2;
		double centerLongitude = (upperLeft.longitude + lowerRight.longitude) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,WGS84Point.java,getLatitude,"	public double getLatitude() {
		return latitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,WGS84Point.java,moveInDirection,"	public static WGS84Point moveInDirection(WGS84Point point, double bearingInDegrees, double distanceInMeters) {

		if (bearingInDegrees < 0 || bearingInDegrees > 360) {
			throw new IllegalArgumentException(""direction must be in (0,360)"");
		}

		double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; // WGS-84
		// ellipsiod
		double alpha1 = bearingInDegrees * degToRad;
		double sinAlpha1 = Math.sin(alpha1), cosAlpha1 = Math.cos(alpha1);

		double tanU1 = (1 - f) * Math.tan(point.latitude * degToRad);
		double cosU1 = 1 / Math.sqrt((1 + tanU1 * tanU1)), sinU1 = tanU1 * cosU1;
		double sigma1 = Math.atan2(tanU1, cosAlpha1);
		double sinAlpha = cosU1 * sinAlpha1;
		double cosSqAlpha = 1 - sinAlpha * sinAlpha;
		double uSq = cosSqAlpha * (a * a - b * b) / (b * b);
		double A = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));
		double B = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));

		double sinSigma = 0, cosSigma = 0, cos2SigmaM = 0;
		double sigma = distanceInMeters / (b * A), sigmaP = 2 * Math.PI;
		while (Math.abs(sigma - sigmaP) > 1e-12) {
			cos2SigmaM = Math.cos(2 * sigma1 + sigma);
			sinSigma = Math.sin(sigma);
			cosSigma = Math.cos(sigma);
			double deltaSigma = B
					* sinSigma
					* (cos2SigmaM + B
							/ 4
							* (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM
									* (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));
			sigmaP = sigma;
			sigma = distanceInMeters / (b * A) + deltaSigma;
		}

		double tmp = sinU1 * sinSigma - cosU1 * cosSigma * cosAlpha1;
		double lat2 = Math.atan2(sinU1 * cosSigma + cosU1 * sinSigma * cosAlpha1, (1 - f)
				* Math.sqrt(sinAlpha * sinAlpha + tmp * tmp));
		double lambda = Math.atan2(sinSigma * sinAlpha1, cosU1 * cosSigma - sinU1 * sinSigma * cosAlpha1);
		double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
		double L = lambda - (1 - C) * f * sinAlpha
				* (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));

		return new WGS84Point(lat2 / degToRad, point.longitude + L / degToRad);
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,WGS84Point.java,distanceInMeters,"	public static double distanceInMeters(WGS84Point foo, WGS84Point bar) {
		double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; // WGS-84
		// ellipsiod
		double L = (bar.longitude - foo.longitude) * degToRad;
		double U1 = Math.atan((1 - f) * Math.tan(foo.latitude * degToRad));
		double U2 = Math.atan((1 - f) * Math.tan(bar.latitude * degToRad));
		double sinU1 = Math.sin(U1), cosU1 = Math.cos(U1);
		double sinU2 = Math.sin(U2), cosU2 = Math.cos(U2);

		double cosSqAlpha, sinSigma, cos2SigmaM, cosSigma, sigma;

		double lambda = L, lambdaP, iterLimit = 20;
		do {
			double sinLambda = Math.sin(lambda), cosLambda = Math.cos(lambda);
			sinSigma = Math.sqrt((cosU2 * sinLambda) * (cosU2 * sinLambda)
					+ (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda) * (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda));
			if (sinSigma == 0)
				return 0; // co-incident points
			cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda;
			sigma = Math.atan2(sinSigma, cosSigma);
			double sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma;
			cosSqAlpha = 1 - sinAlpha * sinAlpha;
			cos2SigmaM = cosSigma - 2 * sinU1 * sinU2 / cosSqAlpha;
			if (cos2SigmaM == Double.NaN)
				cos2SigmaM = 0; // equatorial line: cosSqAlpha=0 (�6)
			double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
			lambdaP = lambda;
			lambda = L + (1 - C) * f * sinAlpha
					* (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));
		} while (Math.abs(lambda - lambdaP) > EPSILON && --iterLimit > 0);

		if (iterLimit == 0)
			return Double.NaN;
		double uSquared = cosSqAlpha * (a * a - b * b) / (b * b);
		double A = 1 + uSquared / 16384 * (4096 + uSquared * (-768 + uSquared * (320 - 175 * uSquared)));
		double B = uSquared / 1024 * (256 + uSquared * (-128 + uSquared * (74 - 47 * uSquared)));
		double deltaSigma = B
				* sinSigma
				* (cos2SigmaM + B
						/ 4
						* (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM
								* (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));
		double s = b * A * (sigma - deltaSigma);

		return s;
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,WGS84Point.java,getLongitude,"	public double getLongitude() {
		return longitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,WGS84Point.java,toString,"	public String toString() {
		return String.format(""("" + latitude + "","" + longitude + "")"");
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,WGS84Point.java,equals,"	public boolean equals(Object obj) {
		if (obj instanceof WGS84Point) {
			WGS84Point other = (WGS84Point) obj;
			return latitude == other.latitude && longitude == other.longitude;
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,WGS84Point.java,hashCode,"	public int hashCode() {
		int result = 42;
		long latBits = Double.doubleToLongBits(latitude);
		long lonBits = Double.doubleToLongBits(longitude);
		result = 31 * result + (int) (latBits ^ (latBits >>> 32));
		result = 31 * result + (int) (lonBits ^ (lonBits >>> 32));
		return result;
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,BoundingBoxTest.java,setUp,"	public void setUp() {
		a = new BoundingBox(new WGS84Point(30, 20), new WGS84Point(21, 31));
		b = new BoundingBox(a);
		c = new BoundingBox(new WGS84Point(45, -170), new WGS84Point(-45, 170));
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,BoundingBoxTest.java,testHashCode,"	public void testHashCode() {
		assertEquals(a.hashCode(), b.hashCode());
		assertFalse(a.hashCode() == c.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,BoundingBoxTest.java,testEqualsObject,"	public void testEqualsObject() {
		assertEquals(a, b);
		assertEquals(b, a);
		assertFalse(a.equals(c));
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,BoundingBoxTest.java,testContains,"	public void testContains(){
		BoundingBox bbox = new BoundingBox(new WGS84Point(45, 120), new WGS84Point(46, 121));
		assertContains(bbox, new WGS84Point(45.5, 120.5));
		assertNotContains(bbox, new WGS84Point(90, 90));
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,BoundingBoxTest.java,assertContains,"	private void assertContains(BoundingBox box, WGS84Point p){
		assertTrue(p + "" should be in "" + box, box.contains(p));
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,BoundingBoxTest.java,assertNotContains,"	private void assertNotContains(BoundingBox box, WGS84Point p){
		assertFalse(p + "" should NOT be in "" + box, box.contains(p));
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
		rand = new Random();
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		// TODO could possibly be less brute-force here and be more scientific
		// about possible failure points
		for (double lat = -90; lat <= 90; lat += rand.nextDouble() + 0.85) {
			for (double lon = -180; lon <= 180; lon += rand.nextDouble() + 0.85) {",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertWithin(hash, bbox);
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,GeoHashTest.java,assertWithin,"	private void assertWithin(GeoHash hash, GeoHash bbox) {
		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xc000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xd000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);

		// and then from there, just a little south of sanity...
		south = east.getSouthernNeighbour();
		assertEquals(0x0l, south.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertEquals(start.getBoundingBox(), end.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
			double randomLatitude = (rand.nextDouble() - 0.5) * 180;",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,GeoHashTest.java,testSimpleWithin,"	public void testSimpleWithin() {
		GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
		GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
		assertWithin(inside, hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(hash.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,WGS84PointTest.java,setUp,"	public void setUp() {
		a = new WGS84Point(47.2342, 15.7465465);
		b = new WGS84Point(a);
		c = new WGS84Point(-47.234, b.getLongitude());
		d = new WGS84Point(-32.9687253, 12.42334242);
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,WGS84PointTest.java,testVincenty,"	public void testVincenty() {
		WGS84Point startPoint = new WGS84Point(40, 40);

		int distanceInMeters = 10000;
		WGS84Point result = WGS84Point.moveInDirection(startPoint, 120,
				distanceInMeters);
		Assert.assertEquals(40.10134882, result.longitude, DELTA);
		Assert.assertEquals(39.9549245, result.latitude, DELTA);

		Assert.assertEquals(distanceInMeters, WGS84Point.distanceInMeters(
				startPoint, result), DELTA);
		
		
		WGS84Point p1 = new WGS84Point(1,1);
		int tenThousandKilometers = 10000000;
		WGS84Point p2 = WGS84Point.moveInDirection(p1, 270, tenThousandKilometers);
		System.out.println(p2);
		Assert.assertEquals(tenThousandKilometers, WGS84Point.distanceInMeters(p1, p2), DELTA);
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,WGS84PointTest.java,testEquals,"	public void testEquals() {
		assertEquals(a, a);
		assertEquals(a, b);
		assertEquals(b, a);
		assertNotSame(a, b);
		
		assertFalse(a.equals(c));
		assertFalse(c.equals(a));
		assertFalse(d.equals(c));
		assertFalse(d.equals(a));
		assertFalse(d.equals(new Integer(10)));
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,WGS84PointTest.java,testHashCode,"	public void testHashCode() {
		assertEquals(a.hashCode(), a.hashCode());
		assertEquals(a.hashCode(), b.hashCode());
		assertFalse(a.hashCode() == c.hashCode());
		assertFalse(d.hashCode() == c.hashCode());
		assertFalse(d.hashCode() == new Integer(10).hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
5cd86607e139303c651f2ad64878aa4f2438afb3,WGS84PointTest.java,testRangeCheck,"	public void testRangeCheck() {
		WGS84Point p = new WGS84Point(180, 240);
	}",https://www.github.com/kungfoo/geohash-java/commit/5cd86607e139303c651f2ad64878aa4f2438afb3
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHashDecodingBenchmark.java,setup,"	public void setup(){
		randomHashes = new String[NUMBER_OF_HASHES];
		Random rand = new Random();
		for(int i = 0; i < NUMBER_OF_HASHES; i++){
			// at least two chars",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHashDecodingBenchmark.java,benchmarkRandomDecoding,"	public void benchmarkRandomDecoding(){
		for(String hash : randomHashes){
			GeoHash geoHash = GeoHash.fromGeohashString(hash);",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHashEncodingBenchmark.java,setupBenchmark,"	public void setupBenchmark() {
		hashes = new GeoHash[NUMBER_OF_HASHES];
		latitudes = new double[NUMBER_OF_HASHES];
		longitudes = new double[NUMBER_OF_HASHES];

		Random rand = new Random();
		for (int i = 0; i < NUMBER_OF_HASHES; i++) {
			latitudes[i] = rand.nextDouble() * 180 - 90;",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHashEncodingBenchmark.java,benchmarkGeoHashEncoding,"	public void benchmarkGeoHashEncoding() {
		for (int i = 0; i < NUMBER_OF_HASHES; i++) {
			hashes[i] = GeoHash.withBitPrecision(latitudes[i], longitudes[i], 60);",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,BoundingBox.java,getUpperLeft,"	public WGS84Point getUpperLeft() {
		return upperLeft;
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,BoundingBox.java,getLowerRight,"	public WGS84Point getLowerRight() {
		return lowerRight;
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,BoundingBox.java,equals,"	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj instanceof BoundingBox) {
			BoundingBox o = (BoundingBox) obj;",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,BoundingBox.java,hashCode,"	public int hashCode() {
		return 31 * (713 + upperLeft.hashCode()) + lowerRight.hashCode();
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,BoundingBox.java,contains,"	public boolean contains(WGS84Point point) {
		return (point.latitude >= upperLeft.latitude) && (point.longitude >= upperLeft.longitude)
				&& (point.latitude <= lowerRight.latitude) && (point.longitude <= lowerRight.longitude);",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,BoundingBox.java,toString,"	public String toString() {
		return upperLeft + "" -> "" + lowerRight;
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,BoundingBox.java,getFourBoundingBoxPoints,"	public WGS84Point[] getFourBoundingBoxPoints() {
		WGS84Point upperRight = new WGS84Point(upperLeft.latitude, lowerRight.longitude);
		WGS84Point lowerLeft = new WGS84Point(lowerRight.latitude, upperLeft.longitude);
		return new WGS84Point[] { upperLeft, upperRight, lowerLeft, lowerRight };
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,BoundingBox.java,getCenterPoint,"	public WGS84Point getCenterPoint() {
		double centerLatitude = (upperLeft.latitude + lowerRight.latitude) / 2;
		double centerLongitude = (upperLeft.longitude + lowerRight.longitude) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(
				latitudeRange[1], longitudeRange[1]));",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern, southern.getWesternNeighbour(), western, northern.getWesternNeighbour() };",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,toBase32,"	public String toBase32() {
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,getFourBoundingBoxPoints,"	public WGS84Point[] getFourBoundingBoxPoints() {
		return boundingBox.getFourBoundingBoxPoints();
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		copyOfBits <<= 1;
		int numberOfBits = getNumberOfLatLonBits()[0];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		int numberOfBits = getNumberOfLatLonBits()[1];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,toString,"	public String toString() {
		return String.format(""%s -> %s"", Long.toBinaryString(bits), boundingBox);
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,mask,"	private final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHash.java,highCapDesiredPrecision,"	private void highCapDesiredPrecision(int desiredPrecision) {
		if (desiredPrecision > 64)
			desiredPrecision = 64;",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,WGS84Point.java,getLatitude,"	public double getLatitude() {
		return latitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,WGS84Point.java,moveInDirection,"	public static WGS84Point moveInDirection(WGS84Point point, double bearingInDegrees, double distanceInMeters) {

		if (bearingInDegrees < 0 || bearingInDegrees > 360) {
			throw new IllegalArgumentException(""direction must be in (0,360)"");
		}

		double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; // WGS-84
		// ellipsiod
		double alpha1 = bearingInDegrees * degToRad;
		double sinAlpha1 = Math.sin(alpha1), cosAlpha1 = Math.cos(alpha1);

		double tanU1 = (1 - f) * Math.tan(point.latitude * degToRad);
		double cosU1 = 1 / Math.sqrt((1 + tanU1 * tanU1)), sinU1 = tanU1 * cosU1;
		double sigma1 = Math.atan2(tanU1, cosAlpha1);
		double sinAlpha = cosU1 * sinAlpha1;
		double cosSqAlpha = 1 - sinAlpha * sinAlpha;
		double uSq = cosSqAlpha * (a * a - b * b) / (b * b);
		double A = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));
		double B = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));

		double sinSigma = 0, cosSigma = 0, cos2SigmaM = 0;
		double sigma = distanceInMeters / (b * A), sigmaP = 2 * Math.PI;
		while (Math.abs(sigma - sigmaP) > 1e-12) {
			cos2SigmaM = Math.cos(2 * sigma1 + sigma);
			sinSigma = Math.sin(sigma);
			cosSigma = Math.cos(sigma);
			double deltaSigma = B
					* sinSigma
					* (cos2SigmaM + B
							/ 4
							* (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM
									* (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));
			sigmaP = sigma;
			sigma = distanceInMeters / (b * A) + deltaSigma;
		}

		double tmp = sinU1 * sinSigma - cosU1 * cosSigma * cosAlpha1;
		double lat2 = Math.atan2(sinU1 * cosSigma + cosU1 * sinSigma * cosAlpha1, (1 - f)
				* Math.sqrt(sinAlpha * sinAlpha + tmp * tmp));
		double lambda = Math.atan2(sinSigma * sinAlpha1, cosU1 * cosSigma - sinU1 * sinSigma * cosAlpha1);
		double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
		double L = lambda - (1 - C) * f * sinAlpha
				* (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));

		return new WGS84Point(lat2 / degToRad, point.longitude + L / degToRad);
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,WGS84Point.java,distanceInMeters,"	public static double distanceInMeters(WGS84Point foo, WGS84Point bar) {
		double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; // WGS-84
		// ellipsiod
		double L = (bar.longitude - foo.longitude) * degToRad;
		double U1 = Math.atan((1 - f) * Math.tan(foo.latitude * degToRad));
		double U2 = Math.atan((1 - f) * Math.tan(bar.latitude * degToRad));
		double sinU1 = Math.sin(U1), cosU1 = Math.cos(U1);
		double sinU2 = Math.sin(U2), cosU2 = Math.cos(U2);

		double cosSqAlpha, sinSigma, cos2SigmaM, cosSigma, sigma;

		double lambda = L, lambdaP, iterLimit = 20;
		do {
			double sinLambda = Math.sin(lambda), cosLambda = Math.cos(lambda);
			sinSigma = Math.sqrt((cosU2 * sinLambda) * (cosU2 * sinLambda)
					+ (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda) * (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda));
			if (sinSigma == 0)
				return 0; // co-incident points
			cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda;
			sigma = Math.atan2(sinSigma, cosSigma);
			double sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma;
			cosSqAlpha = 1 - sinAlpha * sinAlpha;
			cos2SigmaM = cosSigma - 2 * sinU1 * sinU2 / cosSqAlpha;
			if (cos2SigmaM == Double.NaN)
				cos2SigmaM = 0; // equatorial line: cosSqAlpha=0 (�6)
			double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
			lambdaP = lambda;
			lambda = L + (1 - C) * f * sinAlpha
					* (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));
		} while (Math.abs(lambda - lambdaP) > EPSILON && --iterLimit > 0);

		if (iterLimit == 0)
			return Double.NaN;
		double uSquared = cosSqAlpha * (a * a - b * b) / (b * b);
		double A = 1 + uSquared / 16384 * (4096 + uSquared * (-768 + uSquared * (320 - 175 * uSquared)));
		double B = uSquared / 1024 * (256 + uSquared * (-128 + uSquared * (74 - 47 * uSquared)));
		double deltaSigma = B
				* sinSigma
				* (cos2SigmaM + B
						/ 4
						* (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM
								* (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));
		double s = b * A * (sigma - deltaSigma);

		return s;
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,WGS84Point.java,getLongitude,"	public double getLongitude() {
		return longitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,WGS84Point.java,toString,"	public String toString() {
		return String.format(""("" + latitude + "","" + longitude + "")"");
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,WGS84Point.java,equals,"	public boolean equals(Object obj) {
		if (obj instanceof WGS84Point) {
			WGS84Point other = (WGS84Point) obj;
			return latitude == other.latitude && longitude == other.longitude;
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,WGS84Point.java,hashCode,"	public int hashCode() {
		int result = 42;
		long latBits = Double.doubleToLongBits(latitude);
		long lonBits = Double.doubleToLongBits(longitude);
		result = 31 * result + (int) (latBits ^ (latBits >>> 32));
		result = 31 * result + (int) (lonBits ^ (lonBits >>> 32));
		return result;
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,BoundingBoxTest.java,setUp,"	public void setUp() {
		a = new BoundingBox(new WGS84Point(30, 20), new WGS84Point(21, 31));
		b = new BoundingBox(a);
		c = new BoundingBox(new WGS84Point(45, -170), new WGS84Point(-45, 170));
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,BoundingBoxTest.java,testHashCode,"	public void testHashCode() {
		assertEquals(a.hashCode(), b.hashCode());
		assertFalse(a.hashCode() == c.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,BoundingBoxTest.java,testEqualsObject,"	public void testEqualsObject() {
		assertEquals(a, b);
		assertEquals(b, a);
		assertFalse(a.equals(c));
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,BoundingBoxTest.java,testContains,"	public void testContains(){
		BoundingBox bbox = new BoundingBox(new WGS84Point(45, 120), new WGS84Point(46, 121));
		assertContains(bbox, new WGS84Point(45.5, 120.5));
		assertNotContains(bbox, new WGS84Point(90, 90));
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,BoundingBoxTest.java,assertContains,"	private void assertContains(BoundingBox box, WGS84Point p){
		assertTrue(p + "" should be in "" + box, box.contains(p));
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,BoundingBoxTest.java,assertNotContains,"	private void assertNotContains(BoundingBox box, WGS84Point p){
		assertFalse(p + "" should NOT be in "" + box, box.contains(p));
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHashBoundingBoxSearchTest.java,testBoundingBoxSearch,"	public void testBoundingBoxSearch() {

	}
}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
		rand = new Random();
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		// TODO could possibly be less brute-force here and be more scientific
		// about possible failure points
		for (double lat = -90; lat <= 90; lat += rand.nextDouble() + 0.85) {
			for (double lon = -180; lon <= 180; lon += rand.nextDouble() + 0.85) {",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertWithin(hash, bbox);
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHashTest.java,assertWithin,"	private void assertWithin(GeoHash hash, GeoHash bbox) {
		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xc000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xd000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);

		// and then from there, just a little south of sanity...
		south = east.getSouthernNeighbour();
		assertEquals(0x0l, south.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertEquals(start.getBoundingBox(), end.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
			double randomLatitude = (rand.nextDouble() - 0.5) * 180;",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHashTest.java,testSimpleWithin,"	public void testSimpleWithin() {
		GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
		GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
		assertWithin(inside, hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(hash.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,WGS84PointTest.java,setUp,"	public void setUp() {
		a = new WGS84Point(47.2342, 15.7465465);
		b = new WGS84Point(a);
		c = new WGS84Point(-47.234, b.getLongitude());
		d = new WGS84Point(-32.9687253, 12.42334242);
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,WGS84PointTest.java,testVincenty,"	public void testVincenty() {
		WGS84Point startPoint = new WGS84Point(40, 40);

		int distanceInMeters = 10000;
		WGS84Point result = WGS84Point.moveInDirection(startPoint, 120,
				distanceInMeters);
		Assert.assertEquals(40.10134882, result.longitude, DELTA);
		Assert.assertEquals(39.9549245, result.latitude, DELTA);

		Assert.assertEquals(distanceInMeters, WGS84Point.distanceInMeters(
				startPoint, result), DELTA);
		
		
		WGS84Point p1 = new WGS84Point(1,1);
		int tenThousandKilometers = 10000000;
		WGS84Point p2 = WGS84Point.moveInDirection(p1, 270, tenThousandKilometers);
		System.out.println(p2);
		Assert.assertEquals(tenThousandKilometers, WGS84Point.distanceInMeters(p1, p2), DELTA);
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,WGS84PointTest.java,testEquals,"	public void testEquals() {
		assertEquals(a, a);
		assertEquals(a, b);
		assertEquals(b, a);
		assertNotSame(a, b);
		
		assertFalse(a.equals(c));
		assertFalse(c.equals(a));
		assertFalse(d.equals(c));
		assertFalse(d.equals(a));
		assertFalse(d.equals(new Integer(10)));
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,WGS84PointTest.java,testHashCode,"	public void testHashCode() {
		assertEquals(a.hashCode(), a.hashCode());
		assertEquals(a.hashCode(), b.hashCode());
		assertFalse(a.hashCode() == c.hashCode());
		assertFalse(d.hashCode() == c.hashCode());
		assertFalse(d.hashCode() == new Integer(10).hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
028671213f85b9acc2af2d528bd2e128cbf57f58,WGS84PointTest.java,testRangeCheck,"	public void testRangeCheck() {
		WGS84Point p = new WGS84Point(180, 240);
	}",https://www.github.com/kungfoo/geohash-java/commit/028671213f85b9acc2af2d528bd2e128cbf57f58
9201ae6420079f78c878a26ca5f0ca9f9460e277,WGS84PointTest.java,setUp,"	public void setUp() {
		a = new WGS84Point(47.2342, 15.7465465);
		b = new WGS84Point(a);
		c = new WGS84Point(-47.234, b.getLongitude());
		d = new WGS84Point(-32.9687253, 12.42334242);
	}",https://www.github.com/kungfoo/geohash-java/commit/9201ae6420079f78c878a26ca5f0ca9f9460e277
9201ae6420079f78c878a26ca5f0ca9f9460e277,WGS84PointTest.java,testVincenty,"	public void testVincenty() {
		WGS84Point startPoint = new WGS84Point(40, 40);

		int distanceInMeters = 10000;
		WGS84Point result = WGS84Point.moveInDirection(startPoint, 120,
				distanceInMeters);
		Assert.assertEquals(40.10134882, result.longitude, DELTA);
		Assert.assertEquals(39.9549245, result.latitude, DELTA);

		Assert.assertEquals(distanceInMeters, WGS84Point.distanceInMeters(
				startPoint, result), DELTA);
		
		
		WGS84Point p1 = new WGS84Point(1,1);
		int tenThousandKilometers = 10000000;
		WGS84Point p2 = WGS84Point.moveInDirection(p1, 270, tenThousandKilometers);
		System.out.println(p2);
		Assert.assertEquals(tenThousandKilometers, WGS84Point.distanceInMeters(p1, p2), DELTA);
	}",https://www.github.com/kungfoo/geohash-java/commit/9201ae6420079f78c878a26ca5f0ca9f9460e277
9201ae6420079f78c878a26ca5f0ca9f9460e277,WGS84PointTest.java,testEquals,"	public void testEquals() {
		assertEquals(a, a);
		assertEquals(a, b);
		assertEquals(b, a);
		assertNotSame(a, b);
		
		assertFalse(a.equals(c));
		assertFalse(c.equals(a));
		assertFalse(d.equals(c));
		assertFalse(d.equals(a));
		assertFalse(d.equals(new Integer(10)));
	}",https://www.github.com/kungfoo/geohash-java/commit/9201ae6420079f78c878a26ca5f0ca9f9460e277
9201ae6420079f78c878a26ca5f0ca9f9460e277,WGS84PointTest.java,testHashCode,"	public void testHashCode() {
		assertEquals(a.hashCode(), a.hashCode());
		assertEquals(a.hashCode(), b.hashCode());
		assertFalse(a.hashCode() == c.hashCode());
		assertFalse(d.hashCode() == c.hashCode());
		assertFalse(d.hashCode() == new Integer(10).hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/9201ae6420079f78c878a26ca5f0ca9f9460e277
9201ae6420079f78c878a26ca5f0ca9f9460e277,WGS84PointTest.java,testRangeCheck,"	public void testRangeCheck() {
		WGS84Point p = new WGS84Point(180, 240);
	}",https://www.github.com/kungfoo/geohash-java/commit/9201ae6420079f78c878a26ca5f0ca9f9460e277
8f540e48db3111887bbeae308900b9b58ee77bcb,GeoHashBoundingBoxSearchTest.java,testBoundingBoxSearch,"	public void testBoundingBoxSearch() {
		
	}
}",https://www.github.com/kungfoo/geohash-java/commit/8f540e48db3111887bbeae308900b9b58ee77bcb
2a6d1c0b489d13201995bd6d4fb0a93537b52536,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/2a6d1c0b489d13201995bd6d4fb0a93537b52536
2a6d1c0b489d13201995bd6d4fb0a93537b52536,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/2a6d1c0b489d13201995bd6d4fb0a93537b52536
2a6d1c0b489d13201995bd6d4fb0a93537b52536,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/2a6d1c0b489d13201995bd6d4fb0a93537b52536
2a6d1c0b489d13201995bd6d4fb0a93537b52536,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(
				latitudeRange[1], longitudeRange[1]));",https://www.github.com/kungfoo/geohash-java/commit/2a6d1c0b489d13201995bd6d4fb0a93537b52536
2a6d1c0b489d13201995bd6d4fb0a93537b52536,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/2a6d1c0b489d13201995bd6d4fb0a93537b52536
2a6d1c0b489d13201995bd6d4fb0a93537b52536,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/2a6d1c0b489d13201995bd6d4fb0a93537b52536
2a6d1c0b489d13201995bd6d4fb0a93537b52536,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern, southern.getWesternNeighbour(), western, northern.getWesternNeighbour() };",https://www.github.com/kungfoo/geohash-java/commit/2a6d1c0b489d13201995bd6d4fb0a93537b52536
2a6d1c0b489d13201995bd6d4fb0a93537b52536,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/2a6d1c0b489d13201995bd6d4fb0a93537b52536
2a6d1c0b489d13201995bd6d4fb0a93537b52536,GeoHash.java,toBase32,"	public String toBase32() {
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/2a6d1c0b489d13201995bd6d4fb0a93537b52536
2a6d1c0b489d13201995bd6d4fb0a93537b52536,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/2a6d1c0b489d13201995bd6d4fb0a93537b52536
2a6d1c0b489d13201995bd6d4fb0a93537b52536,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/2a6d1c0b489d13201995bd6d4fb0a93537b52536
2a6d1c0b489d13201995bd6d4fb0a93537b52536,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/2a6d1c0b489d13201995bd6d4fb0a93537b52536
2a6d1c0b489d13201995bd6d4fb0a93537b52536,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/2a6d1c0b489d13201995bd6d4fb0a93537b52536
2a6d1c0b489d13201995bd6d4fb0a93537b52536,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/2a6d1c0b489d13201995bd6d4fb0a93537b52536
2a6d1c0b489d13201995bd6d4fb0a93537b52536,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/2a6d1c0b489d13201995bd6d4fb0a93537b52536
2a6d1c0b489d13201995bd6d4fb0a93537b52536,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/2a6d1c0b489d13201995bd6d4fb0a93537b52536
2a6d1c0b489d13201995bd6d4fb0a93537b52536,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/2a6d1c0b489d13201995bd6d4fb0a93537b52536
2a6d1c0b489d13201995bd6d4fb0a93537b52536,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/2a6d1c0b489d13201995bd6d4fb0a93537b52536
2a6d1c0b489d13201995bd6d4fb0a93537b52536,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/2a6d1c0b489d13201995bd6d4fb0a93537b52536
2a6d1c0b489d13201995bd6d4fb0a93537b52536,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		copyOfBits <<= 1;
		int numberOfBits = getNumberOfLatLonBits()[0];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/2a6d1c0b489d13201995bd6d4fb0a93537b52536
2a6d1c0b489d13201995bd6d4fb0a93537b52536,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long value = 0;
		long copyOfBits = bits;
		int numberOfBits = getNumberOfLatLonBits()[1];
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return new long[] { value, numberOfBits };
	}",https://www.github.com/kungfoo/geohash-java/commit/2a6d1c0b489d13201995bd6d4fb0a93537b52536
2a6d1c0b489d13201995bd6d4fb0a93537b52536,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/2a6d1c0b489d13201995bd6d4fb0a93537b52536
2a6d1c0b489d13201995bd6d4fb0a93537b52536,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/2a6d1c0b489d13201995bd6d4fb0a93537b52536
2a6d1c0b489d13201995bd6d4fb0a93537b52536,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/2a6d1c0b489d13201995bd6d4fb0a93537b52536
2a6d1c0b489d13201995bd6d4fb0a93537b52536,GeoHash.java,toString,"	public String toString() {
		return String.format(""%s -> %s"", Long.toBinaryString(bits), boundingBox);
	}",https://www.github.com/kungfoo/geohash-java/commit/2a6d1c0b489d13201995bd6d4fb0a93537b52536
2a6d1c0b489d13201995bd6d4fb0a93537b52536,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/2a6d1c0b489d13201995bd6d4fb0a93537b52536
2a6d1c0b489d13201995bd6d4fb0a93537b52536,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/2a6d1c0b489d13201995bd6d4fb0a93537b52536
2a6d1c0b489d13201995bd6d4fb0a93537b52536,GeoHash.java,mask,"	private final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/2a6d1c0b489d13201995bd6d4fb0a93537b52536
2a6d1c0b489d13201995bd6d4fb0a93537b52536,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/2a6d1c0b489d13201995bd6d4fb0a93537b52536
2a6d1c0b489d13201995bd6d4fb0a93537b52536,GeoHashBoundingBoxSearchTest.java,testBoundingBoxSearch,"	public void testBoundingBoxSearch() {
		GeoHashBoundingBoxSearch search = new GeoHashBoundingBoxSearch(new BoundingBox(new WGS84Point(40.09872762,
				30.0113312322), new WGS84Point(41.23452234, 31.23432)));",https://www.github.com/kungfoo/geohash-java/commit/2a6d1c0b489d13201995bd6d4fb0a93537b52536
d074e665c1e8dac2f9284c3800475ace258b1587,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/d074e665c1e8dac2f9284c3800475ace258b1587
d074e665c1e8dac2f9284c3800475ace258b1587,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d074e665c1e8dac2f9284c3800475ace258b1587
d074e665c1e8dac2f9284c3800475ace258b1587,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/d074e665c1e8dac2f9284c3800475ace258b1587
d074e665c1e8dac2f9284c3800475ace258b1587,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(
				latitudeRange[1], longitudeRange[1]));",https://www.github.com/kungfoo/geohash-java/commit/d074e665c1e8dac2f9284c3800475ace258b1587
d074e665c1e8dac2f9284c3800475ace258b1587,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/d074e665c1e8dac2f9284c3800475ace258b1587
d074e665c1e8dac2f9284c3800475ace258b1587,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/d074e665c1e8dac2f9284c3800475ace258b1587
d074e665c1e8dac2f9284c3800475ace258b1587,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern, southern.getWesternNeighbour(), western, northern.getWesternNeighbour() };",https://www.github.com/kungfoo/geohash-java/commit/d074e665c1e8dac2f9284c3800475ace258b1587
d074e665c1e8dac2f9284c3800475ace258b1587,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/d074e665c1e8dac2f9284c3800475ace258b1587
d074e665c1e8dac2f9284c3800475ace258b1587,GeoHash.java,toBase32,"	public String toBase32() {
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/d074e665c1e8dac2f9284c3800475ace258b1587
d074e665c1e8dac2f9284c3800475ace258b1587,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/d074e665c1e8dac2f9284c3800475ace258b1587
d074e665c1e8dac2f9284c3800475ace258b1587,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/d074e665c1e8dac2f9284c3800475ace258b1587
d074e665c1e8dac2f9284c3800475ace258b1587,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/d074e665c1e8dac2f9284c3800475ace258b1587
d074e665c1e8dac2f9284c3800475ace258b1587,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/d074e665c1e8dac2f9284c3800475ace258b1587
d074e665c1e8dac2f9284c3800475ace258b1587,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/d074e665c1e8dac2f9284c3800475ace258b1587
d074e665c1e8dac2f9284c3800475ace258b1587,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/d074e665c1e8dac2f9284c3800475ace258b1587
d074e665c1e8dac2f9284c3800475ace258b1587,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d074e665c1e8dac2f9284c3800475ace258b1587
d074e665c1e8dac2f9284c3800475ace258b1587,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d074e665c1e8dac2f9284c3800475ace258b1587
d074e665c1e8dac2f9284c3800475ace258b1587,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d074e665c1e8dac2f9284c3800475ace258b1587
d074e665c1e8dac2f9284c3800475ace258b1587,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d074e665c1e8dac2f9284c3800475ace258b1587
d074e665c1e8dac2f9284c3800475ace258b1587,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/d074e665c1e8dac2f9284c3800475ace258b1587
d074e665c1e8dac2f9284c3800475ace258b1587,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/d074e665c1e8dac2f9284c3800475ace258b1587
d074e665c1e8dac2f9284c3800475ace258b1587,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/d074e665c1e8dac2f9284c3800475ace258b1587
d074e665c1e8dac2f9284c3800475ace258b1587,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/d074e665c1e8dac2f9284c3800475ace258b1587
d074e665c1e8dac2f9284c3800475ace258b1587,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/d074e665c1e8dac2f9284c3800475ace258b1587
d074e665c1e8dac2f9284c3800475ace258b1587,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/d074e665c1e8dac2f9284c3800475ace258b1587
d074e665c1e8dac2f9284c3800475ace258b1587,GeoHash.java,toString,"	public String toString() {
		return String.format(""%s -> %s"", Long.toBinaryString(bits), boundingBox);
	}",https://www.github.com/kungfoo/geohash-java/commit/d074e665c1e8dac2f9284c3800475ace258b1587
d074e665c1e8dac2f9284c3800475ace258b1587,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/d074e665c1e8dac2f9284c3800475ace258b1587
d074e665c1e8dac2f9284c3800475ace258b1587,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/d074e665c1e8dac2f9284c3800475ace258b1587
d074e665c1e8dac2f9284c3800475ace258b1587,GeoHash.java,mask,"	private final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/d074e665c1e8dac2f9284c3800475ace258b1587
d074e665c1e8dac2f9284c3800475ace258b1587,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/d074e665c1e8dac2f9284c3800475ace258b1587
b154c20c7f00d642033f26b6d61833d99edfc55c,LongUtil.java,commonPrefixLength,"	public static final int commonPrefixLength(long a, long b) {
		int result = 0;
		while (result < 64 && (a & FIRST_BIT) == (b & FIRST_BIT)) {
			result++;
			a <<= 1;
			b <<= 1;
		}
		return result;
	}",https://www.github.com/kungfoo/geohash-java/commit/b154c20c7f00d642033f26b6d61833d99edfc55c
b154c20c7f00d642033f26b6d61833d99edfc55c,LongUtilTest.java,testSameNumbersHave64BitsPrefix,"	public void testSameNumbersHave64BitsPrefix() {
		for (long a = 0; a < 120000000; a += 101) {
			long b = a;",https://www.github.com/kungfoo/geohash-java/commit/b154c20c7f00d642033f26b6d61833d99edfc55c
b154c20c7f00d642033f26b6d61833d99edfc55c,LongUtilTest.java,testKnownPrefixLenghts,"	public void testKnownPrefixLenghts() {
		long a = 0x8f00000000000000l;
		long b = 0x8000000000000000l;
		long c = 0x8800000000000000l;
		assertPrefixLength(4, a, b);
		assertPrefixLength(4, b, c);
		assertPrefixLength(5, a, c);
		assertPrefixLength(0, 0x0, a);
		assertPrefixLength(16, 0x8888300000000000l, 0x8888c00000000000l);
	}",https://www.github.com/kungfoo/geohash-java/commit/b154c20c7f00d642033f26b6d61833d99edfc55c
b154c20c7f00d642033f26b6d61833d99edfc55c,LongUtilTest.java,assertPrefixLength,"	private void assertPrefixLength(int length, long a, long b) {
		assertEquals(length, LongUtil.commonPrefixLength(a, b));
	}",https://www.github.com/kungfoo/geohash-java/commit/b154c20c7f00d642033f26b6d61833d99edfc55c
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(
				latitudeRange[1], longitudeRange[1]));",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern, southern.getWesternNeighbour(), western, northern.getWesternNeighbour() };",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHash.java,toBase32,"	public String toBase32() {
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHash.java,toString,"	public String toString() {
		return String.format(""%s -> %s"", Long.toBinaryString(bits), boundingBox);
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHash.java,mask,"	private final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
		rand = new Random();
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		// TODO could possibly be less brute-force here and be more scientific
		// about possible failure points
		for (double lat = -90; lat <= 90; lat += rand.nextDouble() + 1.45) {
			for (double lon = -180; lon <= 180; lon += rand.nextDouble() + 1.54) {",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertWithin(hash, bbox);
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHashTest.java,assertWithin,"	private void assertWithin(GeoHash hash, GeoHash bbox) {
		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xd000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xc000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);
",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertEquals(start.getBoundingBox(), end.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
			double randomLatitude = (rand.nextDouble() - 0.5) * 180;",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHashTest.java,testKnownNeighbouringHashes,"	public void testKnownNeighbouringHashes(){
		GeoHash h1 = GeoHash.fromGeohashString(""u1pb"");
		assertEquals(""u0zz"", h1.getSouthernNeighbour().toBase32());
		assertEquals(""u1pc"", h1.getNorthernNeighbour().toBase32());
		assertEquals(""u300"", h1.getEasternNeighbour().toBase32());
		assertEquals(""u302"", h1.getEasternNeighbour().getEasternNeighbour().toBase32());
		assertEquals(""u1p8"", h1.getWesternNeighbour().toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHashTest.java,testSimpleWithin,"	public void testSimpleWithin() {
		GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
		GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
		assertWithin(inside, hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
1bde2dbb893b81d4595ba54fce72f574892c84f6,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(hash.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/1bde2dbb893b81d4595ba54fce72f574892c84f6
6af047093b72608715856926247242f2f341c0eb,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(
				latitudeRange[1], longitudeRange[1]));",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern, southern.getWesternNeighbour(), western, northern.getWesternNeighbour() };",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHash.java,toBase32,"	public String toBase32() {
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHash.java,toString,"	public String toString() {
		if(significantBits % 5 == 0){
			return String.format(""%s -> %s -> %s"", Long.toBinaryString(bits), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHash.java,mask,"	private final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
		rand = new Random();
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		// TODO could possibly be less brute-force here and be more scientific
		// about possible failure points
		for (double lat = -90; lat <= 90; lat += rand.nextDouble() + 1.45) {
			for (double lon = -180; lon <= 180; lon += rand.nextDouble() + 1.54) {",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertWithin(hash, bbox);
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHashTest.java,assertWithin,"	private void assertWithin(GeoHash hash, GeoHash bbox) {
		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xd000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xc000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);
",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertEquals(start.getBoundingBox(), end.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
			double randomLatitude = (rand.nextDouble() - 0.5) * 180;",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHashTest.java,testKnownNeighbouringHashes,"	public void testKnownNeighbouringHashes() {
		GeoHash h1 = GeoHash.fromGeohashString(""u1pb"");
		assertEquals(""u0zz"", h1.getSouthernNeighbour().toBase32());
		assertEquals(""u1pc"", h1.getNorthernNeighbour().toBase32());
		assertEquals(""u300"", h1.getEasternNeighbour().toBase32());
		assertEquals(""u302"", h1.getEasternNeighbour().getEasternNeighbour().toBase32());
		assertEquals(""u1p8"", h1.getWesternNeighbour().toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHashTest.java,testKnownAdjacentNeighbours,"	public void testKnownAdjacentNeighbours() {
		GeoHash center = GeoHash.fromGeohashString(""dqcjqc"");
		GeoHash[] adjacent = center.getAdjacent();
		for (String check : new String[] { ""dqcjqf"", ""dqcjqb"", ""dqcjr1"", ""dqcjq9"", ""dqcjqd"", ""dqcjr4"", ""dqcjr0"",
				""dqcjq8"" }) {",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHashTest.java,assertArrayContainsGeoHash,"	private void assertArrayContainsGeoHash(String check, GeoHash[] hashes) {
		boolean found = false;
		for (GeoHash hash : hashes) {
			if (hash.toBase32().equals(check)) {
				found = true;
				break;
			}
		}
		assertTrue(""Array should contain "" + check, found);
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHashTest.java,testSimpleWithin,"	public void testSimpleWithin() {
		GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
		GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
		assertWithin(inside, hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
6af047093b72608715856926247242f2f341c0eb,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(hash.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/6af047093b72608715856926247242f2f341c0eb
e3e9a0b9c5d1d80325d0856a740616d6336d061d,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
		rand = new Random();
	}",https://www.github.com/kungfoo/geohash-java/commit/e3e9a0b9c5d1d80325d0856a740616d6336d061d
e3e9a0b9c5d1d80325d0856a740616d6336d061d,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/e3e9a0b9c5d1d80325d0856a740616d6336d061d
e3e9a0b9c5d1d80325d0856a740616d6336d061d,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/e3e9a0b9c5d1d80325d0856a740616d6336d061d
e3e9a0b9c5d1d80325d0856a740616d6336d061d,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/e3e9a0b9c5d1d80325d0856a740616d6336d061d
e3e9a0b9c5d1d80325d0856a740616d6336d061d,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		// TODO could possibly be less brute-force here and be more scientific
		// about possible failure points
		for (double lat = -90; lat <= 90; lat += rand.nextDouble() + 1.45) {
			for (double lon = -180; lon <= 180; lon += rand.nextDouble() + 1.54) {",https://www.github.com/kungfoo/geohash-java/commit/e3e9a0b9c5d1d80325d0856a740616d6336d061d
e3e9a0b9c5d1d80325d0856a740616d6336d061d,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertWithin(hash, bbox);
	}",https://www.github.com/kungfoo/geohash-java/commit/e3e9a0b9c5d1d80325d0856a740616d6336d061d
e3e9a0b9c5d1d80325d0856a740616d6336d061d,GeoHashTest.java,assertWithin,"	private void assertWithin(GeoHash hash, GeoHash bbox) {
		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/e3e9a0b9c5d1d80325d0856a740616d6336d061d
e3e9a0b9c5d1d80325d0856a740616d6336d061d,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/e3e9a0b9c5d1d80325d0856a740616d6336d061d
e3e9a0b9c5d1d80325d0856a740616d6336d061d,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/e3e9a0b9c5d1d80325d0856a740616d6336d061d
e3e9a0b9c5d1d80325d0856a740616d6336d061d,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/e3e9a0b9c5d1d80325d0856a740616d6336d061d
e3e9a0b9c5d1d80325d0856a740616d6336d061d,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");
	}",https://www.github.com/kungfoo/geohash-java/commit/e3e9a0b9c5d1d80325d0856a740616d6336d061d
e3e9a0b9c5d1d80325d0856a740616d6336d061d,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/e3e9a0b9c5d1d80325d0856a740616d6336d061d
e3e9a0b9c5d1d80325d0856a740616d6336d061d,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/e3e9a0b9c5d1d80325d0856a740616d6336d061d
e3e9a0b9c5d1d80325d0856a740616d6336d061d,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/e3e9a0b9c5d1d80325d0856a740616d6336d061d
e3e9a0b9c5d1d80325d0856a740616d6336d061d,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xd000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xc000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);
",https://www.github.com/kungfoo/geohash-java/commit/e3e9a0b9c5d1d80325d0856a740616d6336d061d
e3e9a0b9c5d1d80325d0856a740616d6336d061d,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/e3e9a0b9c5d1d80325d0856a740616d6336d061d
e3e9a0b9c5d1d80325d0856a740616d6336d061d,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/e3e9a0b9c5d1d80325d0856a740616d6336d061d
e3e9a0b9c5d1d80325d0856a740616d6336d061d,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/e3e9a0b9c5d1d80325d0856a740616d6336d061d
e3e9a0b9c5d1d80325d0856a740616d6336d061d,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertEquals(start.getBoundingBox(), end.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/e3e9a0b9c5d1d80325d0856a740616d6336d061d
e3e9a0b9c5d1d80325d0856a740616d6336d061d,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/e3e9a0b9c5d1d80325d0856a740616d6336d061d
e3e9a0b9c5d1d80325d0856a740616d6336d061d,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
			double randomLatitude = (rand.nextDouble() - 0.5) * 180;",https://www.github.com/kungfoo/geohash-java/commit/e3e9a0b9c5d1d80325d0856a740616d6336d061d
e3e9a0b9c5d1d80325d0856a740616d6336d061d,GeoHashTest.java,testKnownNeighbouringHashes,"	public void testKnownNeighbouringHashes() {
		GeoHash h1 = GeoHash.fromGeohashString(""u1pb"");
		assertEquals(""u0zz"", h1.getSouthernNeighbour().toBase32());
		assertEquals(""u1pc"", h1.getNorthernNeighbour().toBase32());
		assertEquals(""u300"", h1.getEasternNeighbour().toBase32());
		assertEquals(""u302"", h1.getEasternNeighbour().getEasternNeighbour().toBase32());
		assertEquals(""u1p8"", h1.getWesternNeighbour().toBase32());
		
		assertEquals(""sp2j"", GeoHash.withCharacterPrecision(41.7, 0.08, 4).toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/e3e9a0b9c5d1d80325d0856a740616d6336d061d
e3e9a0b9c5d1d80325d0856a740616d6336d061d,GeoHashTest.java,testKnownAdjacentNeighbours,"	public void testKnownAdjacentNeighbours() {
		String center = ""dqcjqc"";
		String[] adjacent = new String[] { ""dqcjqf"", ""dqcjqb"", ""dqcjr1"", ""dqcjq9"", ""dqcjqd"", ""dqcjr4"", ""dqcjr0"",
				""dqcjq8"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""u1x0dfg"";
		adjacent = new String[] { ""u1x0dg4"", ""u1x0dg5"", ""u1x0dgh"", ""u1x0dfu"", ""u1x0dfs"", ""u1x0dfe"", ""u1x0dfd"",
				""u1x0dff"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""sp2j"";
		adjacent = new String[] { ""ezry"", ""sp2n"", ""sp2q"", ""sp2m"", ""sp2k"", ""sp2h"", ""ezru"", ""ezrv"" };
		assertAdjacentHashesAre(center, adjacent);
	}",https://www.github.com/kungfoo/geohash-java/commit/e3e9a0b9c5d1d80325d0856a740616d6336d061d
e3e9a0b9c5d1d80325d0856a740616d6336d061d,GeoHashTest.java,assertAdjacentHashesAre,"	private void assertAdjacentHashesAre(String centerString, String[] adjacentStrings) {
		GeoHash center = GeoHash.fromGeohashString(centerString);
		GeoHash[] adjacent = center.getAdjacent();
		for (String check : adjacentStrings) {
			assertArrayContainsGeoHash(check, adjacent);",https://www.github.com/kungfoo/geohash-java/commit/e3e9a0b9c5d1d80325d0856a740616d6336d061d
e3e9a0b9c5d1d80325d0856a740616d6336d061d,GeoHashTest.java,assertArrayContainsGeoHash,"	private void assertArrayContainsGeoHash(String check, GeoHash[] hashes) {
		boolean found = false;
		for (GeoHash hash : hashes) {
			if (hash.toBase32().equals(check)) {
				found = true;
				break;
			}
		}
		assertTrue(""Array should contain "" + check, found);
	}",https://www.github.com/kungfoo/geohash-java/commit/e3e9a0b9c5d1d80325d0856a740616d6336d061d
e3e9a0b9c5d1d80325d0856a740616d6336d061d,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/e3e9a0b9c5d1d80325d0856a740616d6336d061d
e3e9a0b9c5d1d80325d0856a740616d6336d061d,GeoHashTest.java,testSimpleWithin,"	public void testSimpleWithin() {
		GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
		GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
		assertWithin(inside, hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/e3e9a0b9c5d1d80325d0856a740616d6336d061d
e3e9a0b9c5d1d80325d0856a740616d6336d061d,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(hash.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/e3e9a0b9c5d1d80325d0856a740616d6336d061d
83af52c8520f044f3d562535b8aed91e2ffae281,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
		rand = new Random();
	}",https://www.github.com/kungfoo/geohash-java/commit/83af52c8520f044f3d562535b8aed91e2ffae281
83af52c8520f044f3d562535b8aed91e2ffae281,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/83af52c8520f044f3d562535b8aed91e2ffae281
83af52c8520f044f3d562535b8aed91e2ffae281,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/83af52c8520f044f3d562535b8aed91e2ffae281
83af52c8520f044f3d562535b8aed91e2ffae281,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/83af52c8520f044f3d562535b8aed91e2ffae281
83af52c8520f044f3d562535b8aed91e2ffae281,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		// TODO could possibly be less brute-force here and be more scientific
		// about possible failure points
		for (double lat = -90; lat <= 90; lat += rand.nextDouble() + 1.45) {
			for (double lon = -180; lon <= 180; lon += rand.nextDouble() + 1.54) {",https://www.github.com/kungfoo/geohash-java/commit/83af52c8520f044f3d562535b8aed91e2ffae281
83af52c8520f044f3d562535b8aed91e2ffae281,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertWithin(hash, bbox);
	}",https://www.github.com/kungfoo/geohash-java/commit/83af52c8520f044f3d562535b8aed91e2ffae281
83af52c8520f044f3d562535b8aed91e2ffae281,GeoHashTest.java,assertWithin,"	private void assertWithin(GeoHash hash, GeoHash bbox) {
		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/83af52c8520f044f3d562535b8aed91e2ffae281
83af52c8520f044f3d562535b8aed91e2ffae281,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/83af52c8520f044f3d562535b8aed91e2ffae281
83af52c8520f044f3d562535b8aed91e2ffae281,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/83af52c8520f044f3d562535b8aed91e2ffae281
83af52c8520f044f3d562535b8aed91e2ffae281,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/83af52c8520f044f3d562535b8aed91e2ffae281
83af52c8520f044f3d562535b8aed91e2ffae281,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");
	}",https://www.github.com/kungfoo/geohash-java/commit/83af52c8520f044f3d562535b8aed91e2ffae281
83af52c8520f044f3d562535b8aed91e2ffae281,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/83af52c8520f044f3d562535b8aed91e2ffae281
83af52c8520f044f3d562535b8aed91e2ffae281,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/83af52c8520f044f3d562535b8aed91e2ffae281
83af52c8520f044f3d562535b8aed91e2ffae281,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/83af52c8520f044f3d562535b8aed91e2ffae281
83af52c8520f044f3d562535b8aed91e2ffae281,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xd000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xc000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);
",https://www.github.com/kungfoo/geohash-java/commit/83af52c8520f044f3d562535b8aed91e2ffae281
83af52c8520f044f3d562535b8aed91e2ffae281,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/83af52c8520f044f3d562535b8aed91e2ffae281
83af52c8520f044f3d562535b8aed91e2ffae281,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/83af52c8520f044f3d562535b8aed91e2ffae281
83af52c8520f044f3d562535b8aed91e2ffae281,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/83af52c8520f044f3d562535b8aed91e2ffae281
83af52c8520f044f3d562535b8aed91e2ffae281,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertEquals(start.getBoundingBox(), end.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/83af52c8520f044f3d562535b8aed91e2ffae281
83af52c8520f044f3d562535b8aed91e2ffae281,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/83af52c8520f044f3d562535b8aed91e2ffae281
83af52c8520f044f3d562535b8aed91e2ffae281,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
			double randomLatitude = (rand.nextDouble() - 0.5) * 180;",https://www.github.com/kungfoo/geohash-java/commit/83af52c8520f044f3d562535b8aed91e2ffae281
83af52c8520f044f3d562535b8aed91e2ffae281,GeoHashTest.java,testKnownNeighbouringHashes,"	public void testKnownNeighbouringHashes() {
		GeoHash h1 = GeoHash.fromGeohashString(""u1pb"");
		assertEquals(""u0zz"", h1.getSouthernNeighbour().toBase32());
		assertEquals(""u1pc"", h1.getNorthernNeighbour().toBase32());
		assertEquals(""u300"", h1.getEasternNeighbour().toBase32());
		assertEquals(""u302"", h1.getEasternNeighbour().getEasternNeighbour().toBase32());
		assertEquals(""u1p8"", h1.getWesternNeighbour().toBase32());
		
		assertEquals(""sp2j"", GeoHash.withCharacterPrecision(41.7, 0.08, 4).toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/83af52c8520f044f3d562535b8aed91e2ffae281
83af52c8520f044f3d562535b8aed91e2ffae281,GeoHashTest.java,testKnownAdjacentNeighbours,"	public void testKnownAdjacentNeighbours() {
		String center = ""dqcjqc"";
		String[] adjacent = new String[] { ""dqcjqf"", ""dqcjqb"", ""dqcjr1"", ""dqcjq9"", ""dqcjqd"", ""dqcjr4"", ""dqcjr0"",
				""dqcjq8"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""u1x0dfg"";
		adjacent = new String[] { ""u1x0dg4"", ""u1x0dg5"", ""u1x0dgh"", ""u1x0dfu"", ""u1x0dfs"", ""u1x0dfe"", ""u1x0dfd"",
				""u1x0dff"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""sp2j"";
		adjacent = new String[] { ""ezry"", ""sp2n"", ""sp2q"", ""sp2m"", ""sp2k"", ""sp2h"", ""ezru"", ""ezrv"" };
		assertAdjacentHashesAre(center, adjacent);
	}",https://www.github.com/kungfoo/geohash-java/commit/83af52c8520f044f3d562535b8aed91e2ffae281
83af52c8520f044f3d562535b8aed91e2ffae281,GeoHashTest.java,assertAdjacentHashesAre,"	private void assertAdjacentHashesAre(String centerString, String[] adjacentStrings) {
		GeoHash center = GeoHash.fromGeohashString(centerString);
		GeoHash[] adjacent = center.getAdjacent();
		for (String check : adjacentStrings) {
			assertArrayContainsGeoHash(check, adjacent);",https://www.github.com/kungfoo/geohash-java/commit/83af52c8520f044f3d562535b8aed91e2ffae281
83af52c8520f044f3d562535b8aed91e2ffae281,GeoHashTest.java,assertArrayContainsGeoHash,"	private void assertArrayContainsGeoHash(String check, GeoHash[] hashes) {
		boolean found = false;
		for (GeoHash hash : hashes) {
			if (hash.toBase32().equals(check)) {
				found = true;
				break;
			}
		}
		assertTrue(""Array should contain "" + check, found);
	}",https://www.github.com/kungfoo/geohash-java/commit/83af52c8520f044f3d562535b8aed91e2ffae281
83af52c8520f044f3d562535b8aed91e2ffae281,GeoHashTest.java,testNeibouringHashesNearMeridian,"	public void testNeibouringHashesNearMeridian() {
		GeoHash hash = GeoHash.fromGeohashString(""sp2j"");
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(""ezrv"", west.toBase32());
		west = west.getWesternNeighbour();
		assertEquals(""ezrt"", west.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/83af52c8520f044f3d562535b8aed91e2ffae281
83af52c8520f044f3d562535b8aed91e2ffae281,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/83af52c8520f044f3d562535b8aed91e2ffae281
83af52c8520f044f3d562535b8aed91e2ffae281,GeoHashTest.java,testSimpleWithin,"	public void testSimpleWithin() {
		GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
		GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
		assertWithin(inside, hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/83af52c8520f044f3d562535b8aed91e2ffae281
83af52c8520f044f3d562535b8aed91e2ffae281,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(hash.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/83af52c8520f044f3d562535b8aed91e2ffae281
d3fd87c7906d192e73cc3354225f7ebdce74c574,BoundingBox.java,getUpperLeft,"	public WGS84Point getUpperLeft() {
		return upperLeft;
	}",https://www.github.com/kungfoo/geohash-java/commit/d3fd87c7906d192e73cc3354225f7ebdce74c574
d3fd87c7906d192e73cc3354225f7ebdce74c574,BoundingBox.java,getLowerRight,"	public WGS84Point getLowerRight() {
		return lowerRight;
	}",https://www.github.com/kungfoo/geohash-java/commit/d3fd87c7906d192e73cc3354225f7ebdce74c574
d3fd87c7906d192e73cc3354225f7ebdce74c574,BoundingBox.java,getLatitudeSize,"	public double getLatitudeSize() {
		return lowerRight.getLatitude() - upperLeft.getLatitude();
	}",https://www.github.com/kungfoo/geohash-java/commit/d3fd87c7906d192e73cc3354225f7ebdce74c574
d3fd87c7906d192e73cc3354225f7ebdce74c574,BoundingBox.java,getLongitudeSize,"	public double getLongitudeSize() {
		return lowerRight.getLongitude() - upperLeft.getLongitude();
	}",https://www.github.com/kungfoo/geohash-java/commit/d3fd87c7906d192e73cc3354225f7ebdce74c574
d3fd87c7906d192e73cc3354225f7ebdce74c574,BoundingBox.java,equals,"	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj instanceof BoundingBox) {
			BoundingBox o = (BoundingBox) obj;",https://www.github.com/kungfoo/geohash-java/commit/d3fd87c7906d192e73cc3354225f7ebdce74c574
d3fd87c7906d192e73cc3354225f7ebdce74c574,BoundingBox.java,hashCode,"	public int hashCode() {
		return 31 * (713 + upperLeft.hashCode()) + lowerRight.hashCode();
	}",https://www.github.com/kungfoo/geohash-java/commit/d3fd87c7906d192e73cc3354225f7ebdce74c574
d3fd87c7906d192e73cc3354225f7ebdce74c574,BoundingBox.java,contains,"	public boolean contains(WGS84Point point) {
		return (point.latitude >= upperLeft.latitude) && (point.longitude >= upperLeft.longitude)
				&& (point.latitude <= lowerRight.latitude) && (point.longitude <= lowerRight.longitude);",https://www.github.com/kungfoo/geohash-java/commit/d3fd87c7906d192e73cc3354225f7ebdce74c574
d3fd87c7906d192e73cc3354225f7ebdce74c574,BoundingBox.java,toString,"	public String toString() {
		return upperLeft + "" -> "" + lowerRight;
	}",https://www.github.com/kungfoo/geohash-java/commit/d3fd87c7906d192e73cc3354225f7ebdce74c574
d3fd87c7906d192e73cc3354225f7ebdce74c574,BoundingBox.java,getFourBoundingBoxPoints,"	public WGS84Point[] getFourBoundingBoxPoints() {
		WGS84Point upperRight = new WGS84Point(upperLeft.latitude, lowerRight.longitude);
		WGS84Point lowerLeft = new WGS84Point(lowerRight.latitude, upperLeft.longitude);
		return new WGS84Point[] { upperLeft, upperRight, lowerLeft, lowerRight };
	}",https://www.github.com/kungfoo/geohash-java/commit/d3fd87c7906d192e73cc3354225f7ebdce74c574
d3fd87c7906d192e73cc3354225f7ebdce74c574,BoundingBox.java,getCenterPoint,"	public WGS84Point getCenterPoint() {
		double centerLatitude = (upperLeft.latitude + lowerRight.latitude) / 2;
		double centerLongitude = (upperLeft.longitude + lowerRight.longitude) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/d3fd87c7906d192e73cc3354225f7ebdce74c574
d3fd87c7906d192e73cc3354225f7ebdce74c574,GeoHashSizeTable.java,dLat,"	protected static final double dLat(int bits) {
		return 180d / Math.pow(2, bits / 2);
	}",https://www.github.com/kungfoo/geohash-java/commit/d3fd87c7906d192e73cc3354225f7ebdce74c574
d3fd87c7906d192e73cc3354225f7ebdce74c574,GeoHashSizeTable.java,dLon,"	protected static final double dLon(int bits) {
		return 360d / Math.pow(2, (bits + 1) / 2);
	}",https://www.github.com/kungfoo/geohash-java/commit/d3fd87c7906d192e73cc3354225f7ebdce74c574
d3fd87c7906d192e73cc3354225f7ebdce74c574,GeoHashSizeTableTest.java,testDLat,"	public void testDLat() {
		assertDLatIs(180d, 0);
		assertDLatIs(180d, 1);
		assertDLatIs(90d, 2);
		assertDLatIs(0.3515625, 18);
		assertDLatIs(0.3515625, 19);
	}",https://www.github.com/kungfoo/geohash-java/commit/d3fd87c7906d192e73cc3354225f7ebdce74c574
d3fd87c7906d192e73cc3354225f7ebdce74c574,GeoHashSizeTableTest.java,assertDLatIs,"	private void assertDLatIs(double d, int i) {
		assertEquals(d, GeoHashSizeTable.dLat(i), 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/d3fd87c7906d192e73cc3354225f7ebdce74c574
d3fd87c7906d192e73cc3354225f7ebdce74c574,GeoHashSizeTableTest.java,testDLon,"	public void testDLon() {
		assertDLonIs(360, 0);
		assertDLonIs(180, 1);
		assertDLonIs(0.0439453125, 25);
		assertDLonIs(0.0439453125, 26);
	}",https://www.github.com/kungfoo/geohash-java/commit/d3fd87c7906d192e73cc3354225f7ebdce74c574
d3fd87c7906d192e73cc3354225f7ebdce74c574,GeoHashSizeTableTest.java,assertDLonIs,"	private void assertDLonIs(double d, int i) {
		assertEquals(d, GeoHashSizeTable.dLon(i), 1-128);
	}",https://www.github.com/kungfoo/geohash-java/commit/d3fd87c7906d192e73cc3354225f7ebdce74c574
7ffd74e2cc3a322053c5151ed7a8cfa8d1808cab,GeoHashSizeTable.java,dLat,"	protected static final double dLat(int bits) {
		return 180d / Math.pow(2, bits / 2);
	}",https://www.github.com/kungfoo/geohash-java/commit/7ffd74e2cc3a322053c5151ed7a8cfa8d1808cab
7ffd74e2cc3a322053c5151ed7a8cfa8d1808cab,GeoHashSizeTable.java,dLon,"	protected static final double dLon(int bits) {
		return 360d / Math.pow(2, (bits + 1) / 2);
	}",https://www.github.com/kungfoo/geohash-java/commit/7ffd74e2cc3a322053c5151ed7a8cfa8d1808cab
7ffd74e2cc3a322053c5151ed7a8cfa8d1808cab,GeoHashSizeTable.java,numberOfBitsForOverlappingGeoHash,"	public int numberOfBitsForOverlappingGeoHash(BoundingBox boundingBox){
		return 0;
	}",https://www.github.com/kungfoo/geohash-java/commit/7ffd74e2cc3a322053c5151ed7a8cfa8d1808cab
7ffd74e2cc3a322053c5151ed7a8cfa8d1808cab,GeoHashSizeTableTest.java,setUp,"	public void setUp() {
		random = new Random();
	}",https://www.github.com/kungfoo/geohash-java/commit/7ffd74e2cc3a322053c5151ed7a8cfa8d1808cab
7ffd74e2cc3a322053c5151ed7a8cfa8d1808cab,GeoHashSizeTableTest.java,testDLat,"	public void testDLat() {
		assertDLatIs(180d, 0);
		assertDLatIs(180d, 1);
		assertDLatIs(90d, 2);
		assertDLatIs(0.3515625, 18);
		assertDLatIs(0.3515625, 19);
	}",https://www.github.com/kungfoo/geohash-java/commit/7ffd74e2cc3a322053c5151ed7a8cfa8d1808cab
7ffd74e2cc3a322053c5151ed7a8cfa8d1808cab,GeoHashSizeTableTest.java,assertDLatIs,"	private void assertDLatIs(double d, int i) {
		assertEquals(d, GeoHashSizeTable.dLat(i), 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/7ffd74e2cc3a322053c5151ed7a8cfa8d1808cab
7ffd74e2cc3a322053c5151ed7a8cfa8d1808cab,GeoHashSizeTableTest.java,testDLon,"	public void testDLon() {
		assertDLonIs(360, 0);
		assertDLonIs(180, 1);
		assertDLonIs(0.0439453125, 25);
		assertDLonIs(0.0439453125, 26);
	}",https://www.github.com/kungfoo/geohash-java/commit/7ffd74e2cc3a322053c5151ed7a8cfa8d1808cab
7ffd74e2cc3a322053c5151ed7a8cfa8d1808cab,GeoHashSizeTableTest.java,assertDLonIs,"	private void assertDLonIs(double d, int i) {
		assertEquals(d, GeoHashSizeTable.dLon(i), 1 - 128);
	}",https://www.github.com/kungfoo/geohash-java/commit/7ffd74e2cc3a322053c5151ed7a8cfa8d1808cab
7ffd74e2cc3a322053c5151ed7a8cfa8d1808cab,GeoHashSizeTableTest.java,testKnownBoundingBoxSizes,"	public void testKnownBoundingBoxSizes() {
		for (int bits = 3; bits < 64; bits++) {
			// make the bounding box a little smaller than dLat/dLon",https://www.github.com/kungfoo/geohash-java/commit/7ffd74e2cc3a322053c5151ed7a8cfa8d1808cab
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(latitudeRange[1],
				longitudeRange[1]));",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(), southern,
				southern.getWesternNeighbour(), western, northern.getWesternNeighbour() };",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,toBase32,"	public String toBase32() {
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", Long.toBinaryString(bits), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,mask,"	private final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHashSizeTable.java,dLat,"	protected static final double dLat(int bits) {
		return 180d / Math.pow(2, bits / 2);
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHashSizeTable.java,dLon,"	protected static final double dLon(int bits) {
		return 360d / Math.pow(2, (bits + 1) / 2);
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHashSizeTable.java,numberOfBitsForOverlappingGeoHash,"	public static final int numberOfBitsForOverlappingGeoHash(BoundingBox boundingBox) {
		int bits = 63;
		while ((dLat[bits] < boundingBox.getLatitudeSize() || dLon[bits] < boundingBox.getLongitudeSize()) && bits > 0) {
			bits--;
		}
		return bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHashSizeTableTest.java,setUp,"	public void setUp() {
	}

	@Test
	public void testDLat() {
		assertDLatIs(180d, 0);
		assertDLatIs(180d, 1);
		assertDLatIs(90d, 2);
		assertDLatIs(0.3515625, 18);
		assertDLatIs(0.3515625, 19);
	}

	private void assertDLatIs(double d, int i) {
		assertEquals(d, GeoHashSizeTable.dLat(i), 0);
	}

	@Test
	public void testDLon() {
		assertDLonIs(360, 0);
		assertDLonIs(180, 1);
		assertDLonIs(0.0439453125, 25);
		assertDLonIs(0.0439453125, 26);
	}

	private void assertDLonIs(double d, int i) {
		assertEquals(d, GeoHashSizeTable.dLon(i), 1 - 128);
	}

	@Test
	public void testKnownBoundingBoxSizes() {
		for (int bits = 3; bits < 64; bits++) {
			// make the bounding box a little smaller than dLat/dLon
			double delta = 1e-10;
			double dLat = GeoHashSizeTable.dLat(bits) - delta;

			double dLon = GeoHashSizeTable.dLon(bits) - delta;
			WGS84Point upperLeft = new WGS84Point(45 - dLat, 30 - dLon);
			WGS84Point lowerRight = new WGS84Point(45, 30);
			BoundingBox boundingBox = new BoundingBox(upperLeft, lowerRight);
			// TODO: make sure the number of bits matches the expected one for
			// this specific bounding box
			int actualBits = GeoHashSizeTable.numberOfBitsForOverlappingGeoHash(boundingBox);
			assertEquals(bits, actualBits);
		}
	}
}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHashSizeTableTest.java,testDLat,"	public void testDLat() {
		assertDLatIs(180d, 0);
		assertDLatIs(180d, 1);
		assertDLatIs(90d, 2);
		assertDLatIs(0.3515625, 18);
		assertDLatIs(0.3515625, 19);
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHashSizeTableTest.java,assertDLatIs,"	private void assertDLatIs(double d, int i) {
		assertEquals(d, GeoHashSizeTable.dLat(i), 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHashSizeTableTest.java,testDLon,"	public void testDLon() {
		assertDLonIs(360, 0);
		assertDLonIs(180, 1);
		assertDLonIs(0.0439453125, 25);
		assertDLonIs(0.0439453125, 26);
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHashSizeTableTest.java,assertDLonIs,"	private void assertDLonIs(double d, int i) {
		assertEquals(d, GeoHashSizeTable.dLon(i), 1 - 128);
	}",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
3a2ca1f94a5cbb3b55de6dc14b20f966874789a2,GeoHashSizeTableTest.java,testKnownBoundingBoxSizes,"	public void testKnownBoundingBoxSizes() {
		for (int bits = 3; bits < 64; bits++) {
			// make the bounding box a little smaller than dLat/dLon",https://www.github.com/kungfoo/geohash-java/commit/3a2ca1f94a5cbb3b55de6dc14b20f966874789a2
4be8bd0bbfd67e201a4f09049058c2fe116e436b,BoundingBox.java,getUpperLeft,"	public WGS84Point getUpperLeft() {
		return upperLeft;
	}",https://www.github.com/kungfoo/geohash-java/commit/4be8bd0bbfd67e201a4f09049058c2fe116e436b
4be8bd0bbfd67e201a4f09049058c2fe116e436b,BoundingBox.java,getLowerRight,"	public WGS84Point getLowerRight() {
		return lowerRight;
	}",https://www.github.com/kungfoo/geohash-java/commit/4be8bd0bbfd67e201a4f09049058c2fe116e436b
4be8bd0bbfd67e201a4f09049058c2fe116e436b,BoundingBox.java,getLatitudeSize,"	public double getLatitudeSize() {
		return lowerRight.getLatitude() - upperLeft.getLatitude();
	}",https://www.github.com/kungfoo/geohash-java/commit/4be8bd0bbfd67e201a4f09049058c2fe116e436b
4be8bd0bbfd67e201a4f09049058c2fe116e436b,BoundingBox.java,getLongitudeSize,"	public double getLongitudeSize() {
		return lowerRight.getLongitude() - upperLeft.getLongitude();
	}",https://www.github.com/kungfoo/geohash-java/commit/4be8bd0bbfd67e201a4f09049058c2fe116e436b
4be8bd0bbfd67e201a4f09049058c2fe116e436b,BoundingBox.java,equals,"	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj instanceof BoundingBox) {
			BoundingBox o = (BoundingBox) obj;",https://www.github.com/kungfoo/geohash-java/commit/4be8bd0bbfd67e201a4f09049058c2fe116e436b
4be8bd0bbfd67e201a4f09049058c2fe116e436b,BoundingBox.java,hashCode,"	public int hashCode() {
		return 31 * (713 + upperLeft.hashCode()) + lowerRight.hashCode();
	}",https://www.github.com/kungfoo/geohash-java/commit/4be8bd0bbfd67e201a4f09049058c2fe116e436b
4be8bd0bbfd67e201a4f09049058c2fe116e436b,BoundingBox.java,contains,"	public boolean contains(WGS84Point point) {
		return (point.latitude >= upperLeft.latitude) && (point.longitude >= upperLeft.longitude)
				&& (point.latitude <= lowerRight.latitude) && (point.longitude <= lowerRight.longitude);",https://www.github.com/kungfoo/geohash-java/commit/4be8bd0bbfd67e201a4f09049058c2fe116e436b
4be8bd0bbfd67e201a4f09049058c2fe116e436b,BoundingBox.java,intersects,"	public boolean intersects(BoundingBox other) {
		return (upperLeft.latitude < other.lowerRight.latitude) && (lowerRight.latitude > other.upperLeft.latitude)
				&& (upperLeft.longitude < other.lowerRight.longitude) && (lowerRight.longitude > other.upperLeft.longitude);",https://www.github.com/kungfoo/geohash-java/commit/4be8bd0bbfd67e201a4f09049058c2fe116e436b
4be8bd0bbfd67e201a4f09049058c2fe116e436b,BoundingBox.java,toString,"	public String toString() {
		return upperLeft + "" -> "" + lowerRight;
	}",https://www.github.com/kungfoo/geohash-java/commit/4be8bd0bbfd67e201a4f09049058c2fe116e436b
4be8bd0bbfd67e201a4f09049058c2fe116e436b,BoundingBox.java,getFourBoundingBoxPoints,"	public WGS84Point[] getFourBoundingBoxPoints() {
		WGS84Point upperRight = new WGS84Point(upperLeft.latitude, lowerRight.longitude);
		WGS84Point lowerLeft = new WGS84Point(lowerRight.latitude, upperLeft.longitude);
		return new WGS84Point[] { upperLeft, upperRight, lowerLeft, lowerRight };
	}",https://www.github.com/kungfoo/geohash-java/commit/4be8bd0bbfd67e201a4f09049058c2fe116e436b
4be8bd0bbfd67e201a4f09049058c2fe116e436b,BoundingBox.java,getCenterPoint,"	public WGS84Point getCenterPoint() {
		double centerLatitude = (upperLeft.latitude + lowerRight.latitude) / 2;
		double centerLongitude = (upperLeft.longitude + lowerRight.longitude) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/4be8bd0bbfd67e201a4f09049058c2fe116e436b
4be8bd0bbfd67e201a4f09049058c2fe116e436b,GeoHashBoundingBoxSearch.java,expandSearch,"	private void expandSearch(GeoHash centerHash, BoundingBox bbox) {
		assert centerHash.getBoundingBox().intersects(bbox) : ""center hash must at least intersect the bounding box!"";
		addSearchHash(centerHash);
		
		for (GeoHash adjacent : centerHash.getAdjacent()) {
			if (adjacent.getBoundingBox().intersects(bbox)) {",https://www.github.com/kungfoo/geohash-java/commit/4be8bd0bbfd67e201a4f09049058c2fe116e436b
4be8bd0bbfd67e201a4f09049058c2fe116e436b,GeoHashBoundingBoxSearch.java,addSearchHash,"	private void addSearchHash(GeoHash hash) {
		searchHashes.add(hash);
		expandSearchBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/4be8bd0bbfd67e201a4f09049058c2fe116e436b
4be8bd0bbfd67e201a4f09049058c2fe116e436b,GeoHashBoundingBoxSearch.java,expandSearchBoundingBox,"	private void expandSearchBoundingBox(GeoHash hash) {
		// TODO: adjust the bounding box size with the added hashes.
	}

	private boolean hashFits(GeoHash hash, BoundingBox bbox) {
		return hash.contains(bbox.getUpperLeft()) && hash.contains(bbox.getLowerRight());
	}
}",https://www.github.com/kungfoo/geohash-java/commit/4be8bd0bbfd67e201a4f09049058c2fe116e436b
4be8bd0bbfd67e201a4f09049058c2fe116e436b,GeoHashBoundingBoxSearch.java,hashFits,"	private boolean hashFits(GeoHash hash, BoundingBox bbox) {
		return hash.contains(bbox.getUpperLeft()) && hash.contains(bbox.getLowerRight());
	}",https://www.github.com/kungfoo/geohash-java/commit/4be8bd0bbfd67e201a4f09049058c2fe116e436b
4be8bd0bbfd67e201a4f09049058c2fe116e436b,GeoHashBoundingBoxSearchTest.java,testBoundingBoxSearch,"	public void testBoundingBoxSearch() {
		GeoHashBoundingBoxSearch search = createSearch(40.09872762, 30.0113312322, 41.23452234, 31.23432);
		",https://www.github.com/kungfoo/geohash-java/commit/4be8bd0bbfd67e201a4f09049058c2fe116e436b
4be8bd0bbfd67e201a4f09049058c2fe116e436b,GeoHashBoundingBoxSearchTest.java,testSeveralBoundingBoxes,"	public void testSeveralBoundingBoxes() {
		GeoHashBoundingBoxSearch search = createSearch(40.2, -22.5, 40.3, -22.4);
		createSearch(40.2, -22.5, 40.3, -22.4);
		createSearch(40.2090980098, -22.523432424324, 40.21982983232432, -22.494234232442);
	}",https://www.github.com/kungfoo/geohash-java/commit/4be8bd0bbfd67e201a4f09049058c2fe116e436b
4be8bd0bbfd67e201a4f09049058c2fe116e436b,GeoHashBoundingBoxSearchTest.java,createSearch,"	private GeoHashBoundingBoxSearch createSearch(double minx, double miny, double maxx, double maxy) {
		return new GeoHashBoundingBoxSearch(new BoundingBox(new WGS84Point(minx, miny), new WGS84Point(maxx, maxy)));
	}",https://www.github.com/kungfoo/geohash-java/commit/4be8bd0bbfd67e201a4f09049058c2fe116e436b
1137dbc7af9c2cb1a53d847fbd9667572b4102cc,GeoHashBoundingBoxSearch.java,expandSearch,"	private void expandSearch(GeoHash centerHash, BoundingBox bbox) {
		assert centerHash.getBoundingBox().intersects(bbox) : ""center hash must at least intersect the bounding box!"";
		addSearchHash(centerHash);

		for (GeoHash adjacent : centerHash.getAdjacent()) {
			if (adjacent.getBoundingBox().intersects(bbox) && !searchHashes.contains(adjacent)) {",https://www.github.com/kungfoo/geohash-java/commit/1137dbc7af9c2cb1a53d847fbd9667572b4102cc
1137dbc7af9c2cb1a53d847fbd9667572b4102cc,GeoHashBoundingBoxSearch.java,addSearchHash,"	private void addSearchHash(GeoHash hash) {
		searchHashes.add(hash);
		expandSearchBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/1137dbc7af9c2cb1a53d847fbd9667572b4102cc
1137dbc7af9c2cb1a53d847fbd9667572b4102cc,GeoHashBoundingBoxSearch.java,expandSearchBoundingBox,"	private void expandSearchBoundingBox(GeoHash hash) {
		// TODO: adjust the bounding box size with the added hashes.
	}

	private boolean hashFits(GeoHash hash, BoundingBox bbox) {
		return hash.contains(bbox.getUpperLeft()) && hash.contains(bbox.getLowerRight());
	}

	public List<GeoHash> getSearchHashes() {
		return searchHashes;
	}
}",https://www.github.com/kungfoo/geohash-java/commit/1137dbc7af9c2cb1a53d847fbd9667572b4102cc
1137dbc7af9c2cb1a53d847fbd9667572b4102cc,GeoHashBoundingBoxSearch.java,hashFits,"	private boolean hashFits(GeoHash hash, BoundingBox bbox) {
		return hash.contains(bbox.getUpperLeft()) && hash.contains(bbox.getLowerRight());
	}",https://www.github.com/kungfoo/geohash-java/commit/1137dbc7af9c2cb1a53d847fbd9667572b4102cc
1137dbc7af9c2cb1a53d847fbd9667572b4102cc,GeoHashBoundingBoxSearch.java,getSearchHashes,"	public List<GeoHash> getSearchHashes() {
		return searchHashes;
	}",https://www.github.com/kungfoo/geohash-java/commit/1137dbc7af9c2cb1a53d847fbd9667572b4102cc
1137dbc7af9c2cb1a53d847fbd9667572b4102cc,GeoHashBoundingBoxSearchTest.java,testSeveralBoundingBoxes,"	public void testSeveralBoundingBoxes() {
		checkSearchYieldsCorrectNumberOfHashes(40.2, -22.5, 40.3, -22.4);
		checkSearchYieldsCorrectNumberOfHashes(40.2, -22.5, 40.3, -22.4);
		checkSearchYieldsCorrectNumberOfHashes(40.2090980098, -22.523432424324, 40.21982983232432, -22.494234232442);
		checkSearchYieldsCorrectNumberOfHashes(40.09872762, 30.0113312322, 41.23452234, 31.23432);
	}",https://www.github.com/kungfoo/geohash-java/commit/1137dbc7af9c2cb1a53d847fbd9667572b4102cc
1137dbc7af9c2cb1a53d847fbd9667572b4102cc,GeoHashBoundingBoxSearchTest.java,checkSearchYieldsCorrectNumberOfHashes,"	private void checkSearchYieldsCorrectNumberOfHashes(double minLat, double minLon, double maxLat, double maxLon) {
		WGS84Point upperLeft = new WGS84Point(minLat, minLon);
		WGS84Point lowerRight = new WGS84Point(maxLat, maxLon);
		GeoHashBoundingBoxSearch search = new GeoHashBoundingBoxSearch(new BoundingBox(upperLeft, lowerRight));
		assertRightNumberOfSearchHashes(search);
	}",https://www.github.com/kungfoo/geohash-java/commit/1137dbc7af9c2cb1a53d847fbd9667572b4102cc
1137dbc7af9c2cb1a53d847fbd9667572b4102cc,GeoHashBoundingBoxSearchTest.java,assertRightNumberOfSearchHashes,"	private void assertRightNumberOfSearchHashes(GeoHashBoundingBoxSearch search) {
		assertTrue(search.getSearchHashes().size() == 2 || search.getSearchHashes().size() == 4);
	}",https://www.github.com/kungfoo/geohash-java/commit/1137dbc7af9c2cb1a53d847fbd9667572b4102cc
1137dbc7af9c2cb1a53d847fbd9667572b4102cc,GeoHashSizeTableTest.java,setUp,"	public void setUp() {
	}

	@Test
	public void testDLat() {
		assertDLatIs(180d, 0);
		assertDLatIs(180d, 1);
		assertDLatIs(90d, 2);
		assertDLatIs(0.3515625, 18);
		assertDLatIs(0.3515625, 19);
	}

	private void assertDLatIs(double d, int i) {
		assertEquals(d, GeoHashSizeTable.dLat(i), 0);
	}

	@Test
	public void testDLon() {
		assertDLonIs(360, 0);
		assertDLonIs(180, 1);
		assertDLonIs(0.0439453125, 25);
		assertDLonIs(0.0439453125, 26);
	}

	private void assertDLonIs(double d, int i) {
		assertEquals(d, GeoHashSizeTable.dLon(i), 1 - 128);
	}

	@Test
	public void testKnownSmallerBoundingBoxSizes() {
		for (int bits = 3; bits < 64; bits++) {
			// make the bounding box a little smaller than dLat/dLon
			double dLat = GeoHashSizeTable.dLat(bits) - DELTA;
			double dLon = GeoHashSizeTable.dLon(bits) - DELTA;
			WGS84Point upperLeft = new WGS84Point(45 - dLat, 30 - dLon);
			WGS84Point lowerRight = new WGS84Point(45, 30);
			BoundingBox boundingBox = new BoundingBox(upperLeft, lowerRight);
			int actualBits = GeoHashSizeTable.numberOfBitsForOverlappingGeoHash(boundingBox);
			assertEquals(bits, actualBits);
		}
	}

	@Test
	public void testKnownLargerBoundingBoxSizes() {
		for (int bits = 4; bits < 63; bits++) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);
			WGS84Point upperLeft = new WGS84Point(0, 0);
			/* make the bounding box a little larger in both directions */
			WGS84Point lowerRight = new WGS84Point(dLat + DELTA, dLon + DELTA);
			BoundingBox boundingBox = new BoundingBox(upperLeft, lowerRight);
			int actualBits = GeoHashSizeTable.numberOfBitsForOverlappingGeoHash(boundingBox);
			assertEquals(bits - 2, actualBits);
		}
	}
	
	
}",https://www.github.com/kungfoo/geohash-java/commit/1137dbc7af9c2cb1a53d847fbd9667572b4102cc
1137dbc7af9c2cb1a53d847fbd9667572b4102cc,GeoHashSizeTableTest.java,testDLat,"	public void testDLat() {
		assertDLatIs(180d, 0);
		assertDLatIs(180d, 1);
		assertDLatIs(90d, 2);
		assertDLatIs(0.3515625, 18);
		assertDLatIs(0.3515625, 19);
	}",https://www.github.com/kungfoo/geohash-java/commit/1137dbc7af9c2cb1a53d847fbd9667572b4102cc
1137dbc7af9c2cb1a53d847fbd9667572b4102cc,GeoHashSizeTableTest.java,assertDLatIs,"	private void assertDLatIs(double d, int i) {
		assertEquals(d, GeoHashSizeTable.dLat(i), 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/1137dbc7af9c2cb1a53d847fbd9667572b4102cc
1137dbc7af9c2cb1a53d847fbd9667572b4102cc,GeoHashSizeTableTest.java,testDLon,"	public void testDLon() {
		assertDLonIs(360, 0);
		assertDLonIs(180, 1);
		assertDLonIs(0.0439453125, 25);
		assertDLonIs(0.0439453125, 26);
	}",https://www.github.com/kungfoo/geohash-java/commit/1137dbc7af9c2cb1a53d847fbd9667572b4102cc
1137dbc7af9c2cb1a53d847fbd9667572b4102cc,GeoHashSizeTableTest.java,assertDLonIs,"	private void assertDLonIs(double d, int i) {
		assertEquals(d, GeoHashSizeTable.dLon(i), 1 - 128);
	}",https://www.github.com/kungfoo/geohash-java/commit/1137dbc7af9c2cb1a53d847fbd9667572b4102cc
1137dbc7af9c2cb1a53d847fbd9667572b4102cc,GeoHashSizeTableTest.java,testKnownSmallerBoundingBoxSizes,"	public void testKnownSmallerBoundingBoxSizes() {
		for (int bits = 3; bits < 64; bits++) {
			// make the bounding box a little smaller than dLat/dLon",https://www.github.com/kungfoo/geohash-java/commit/1137dbc7af9c2cb1a53d847fbd9667572b4102cc
1137dbc7af9c2cb1a53d847fbd9667572b4102cc,GeoHashSizeTableTest.java,testKnownLargerBoundingBoxSizes,"	public void testKnownLargerBoundingBoxSizes() {
		for (int bits = 4; bits < 63; bits++) {
			double dLat = GeoHashSizeTable.dLat(bits);",https://www.github.com/kungfoo/geohash-java/commit/1137dbc7af9c2cb1a53d847fbd9667572b4102cc
555bc93bd6bd54ae6d74166557cc7deb1fb77423,BoundingBox.java,getUpperLeft,"	public WGS84Point getUpperLeft() {
		return upperLeft;
	}",https://www.github.com/kungfoo/geohash-java/commit/555bc93bd6bd54ae6d74166557cc7deb1fb77423
555bc93bd6bd54ae6d74166557cc7deb1fb77423,BoundingBox.java,getLowerRight,"	public WGS84Point getLowerRight() {
		return lowerRight;
	}",https://www.github.com/kungfoo/geohash-java/commit/555bc93bd6bd54ae6d74166557cc7deb1fb77423
555bc93bd6bd54ae6d74166557cc7deb1fb77423,BoundingBox.java,getLatitudeSize,"	public double getLatitudeSize() {
		return lowerRight.getLatitude() - upperLeft.getLatitude();
	}",https://www.github.com/kungfoo/geohash-java/commit/555bc93bd6bd54ae6d74166557cc7deb1fb77423
555bc93bd6bd54ae6d74166557cc7deb1fb77423,BoundingBox.java,getLongitudeSize,"	public double getLongitudeSize() {
		return lowerRight.getLongitude() - upperLeft.getLongitude();
	}",https://www.github.com/kungfoo/geohash-java/commit/555bc93bd6bd54ae6d74166557cc7deb1fb77423
555bc93bd6bd54ae6d74166557cc7deb1fb77423,BoundingBox.java,equals,"	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj instanceof BoundingBox) {
			BoundingBox o = (BoundingBox) obj;",https://www.github.com/kungfoo/geohash-java/commit/555bc93bd6bd54ae6d74166557cc7deb1fb77423
555bc93bd6bd54ae6d74166557cc7deb1fb77423,BoundingBox.java,hashCode,"	public int hashCode() {
		return 31 * (713 + upperLeft.hashCode()) + lowerRight.hashCode();
	}",https://www.github.com/kungfoo/geohash-java/commit/555bc93bd6bd54ae6d74166557cc7deb1fb77423
555bc93bd6bd54ae6d74166557cc7deb1fb77423,BoundingBox.java,contains,"	public boolean contains(WGS84Point point) {
		return (point.latitude >= upperLeft.latitude) && (point.longitude >= upperLeft.longitude)
				&& (point.latitude <= lowerRight.latitude) && (point.longitude <= lowerRight.longitude);",https://www.github.com/kungfoo/geohash-java/commit/555bc93bd6bd54ae6d74166557cc7deb1fb77423
555bc93bd6bd54ae6d74166557cc7deb1fb77423,BoundingBox.java,intersects,"	public boolean intersects(BoundingBox other) {
		return (upperLeft.latitude < other.lowerRight.latitude) && (lowerRight.latitude > other.upperLeft.latitude)
				&& (upperLeft.longitude < other.lowerRight.longitude) && (lowerRight.longitude > other.upperLeft.longitude);",https://www.github.com/kungfoo/geohash-java/commit/555bc93bd6bd54ae6d74166557cc7deb1fb77423
555bc93bd6bd54ae6d74166557cc7deb1fb77423,BoundingBox.java,toString,"	public String toString() {
		return upperLeft + "" -> "" + lowerRight;
	}",https://www.github.com/kungfoo/geohash-java/commit/555bc93bd6bd54ae6d74166557cc7deb1fb77423
555bc93bd6bd54ae6d74166557cc7deb1fb77423,BoundingBox.java,getFourBoundingBoxPoints,"	public WGS84Point[] getFourBoundingBoxPoints() {
		WGS84Point upperRight = new WGS84Point(upperLeft.latitude, lowerRight.longitude);
		WGS84Point lowerLeft = new WGS84Point(lowerRight.latitude, upperLeft.longitude);
		return new WGS84Point[] { upperLeft, upperRight, lowerLeft, lowerRight };
	}",https://www.github.com/kungfoo/geohash-java/commit/555bc93bd6bd54ae6d74166557cc7deb1fb77423
555bc93bd6bd54ae6d74166557cc7deb1fb77423,BoundingBox.java,getCenterPoint,"	public WGS84Point getCenterPoint() {
		double centerLatitude = (upperLeft.latitude + lowerRight.latitude) / 2;
		double centerLongitude = (upperLeft.longitude + lowerRight.longitude) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/555bc93bd6bd54ae6d74166557cc7deb1fb77423
555bc93bd6bd54ae6d74166557cc7deb1fb77423,GeoHashSizeTableTest.java,testDLat,"	public void testDLat() {
		assertDLatIs(180d, 0);
		assertDLatIs(180d, 1);
		assertDLatIs(90d, 2);
		assertDLatIs(0.3515625, 18);
		assertDLatIs(0.3515625, 19);
	}",https://www.github.com/kungfoo/geohash-java/commit/555bc93bd6bd54ae6d74166557cc7deb1fb77423
555bc93bd6bd54ae6d74166557cc7deb1fb77423,GeoHashSizeTableTest.java,assertDLatIs,"	private void assertDLatIs(double d, int i) {
		assertEquals(d, GeoHashSizeTable.dLat(i), 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/555bc93bd6bd54ae6d74166557cc7deb1fb77423
555bc93bd6bd54ae6d74166557cc7deb1fb77423,GeoHashSizeTableTest.java,testDLon,"	public void testDLon() {
		assertDLonIs(360, 0);
		assertDLonIs(180, 1);
		assertDLonIs(0.0439453125, 25);
		assertDLonIs(0.0439453125, 26);
	}",https://www.github.com/kungfoo/geohash-java/commit/555bc93bd6bd54ae6d74166557cc7deb1fb77423
555bc93bd6bd54ae6d74166557cc7deb1fb77423,GeoHashSizeTableTest.java,assertDLonIs,"	private void assertDLonIs(double d, int i) {
		assertEquals(d, GeoHashSizeTable.dLon(i), 1 - 128);
	}",https://www.github.com/kungfoo/geohash-java/commit/555bc93bd6bd54ae6d74166557cc7deb1fb77423
555bc93bd6bd54ae6d74166557cc7deb1fb77423,GeoHashSizeTableTest.java,generate,"		public BoundingBox generate(int bits);

		/**
		 * return the number of expected bits.
		 */
		public int getExpectedBits(int bits);
	}

	private static class ALittleTooSmallVerifier implements BoundingBoxSizeTableVerifier {
		@Override
		public BoundingBox generate(int bits) {
			// make the bounding box a little smaller than dLat/dLon
			double dLat = GeoHashSizeTable.dLat(bits) - DELTA;
			double dLon = GeoHashSizeTable.dLon(bits) - DELTA;
			return new BoundingBox(45 - dLat, 30 - dLon, 45, 30);
		}

		@Override
		public int getExpectedBits(int bits) {
			return bits;
		}
	}

	private static class BothALittleTooLargeVerifier implements BoundingBoxSizeTableVerifier {
		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);
			return new BoundingBox(0, 0, dLat + DELTA, dLon + DELTA);
		}

		@Override
		public int getExpectedBits(int bits) {
			return bits - 2;
		}
	}

	private static class OnlyOneALittleTooLargeVerifier implements BoundingBoxSizeTableVerifier {
		@Override
		public BoundingBox generate(int bits) {
			return null;
		}

		@Override
		public int getExpectedBits(int bits) {
			return bits - 2;
		}
	}

	@Test
	public void testKnownSmallerBoundingBoxSizes() {
		checkWithGenerator(new ALittleTooSmallVerifier());
	}

	@Test
	public void testKnownLargerBoundingBoxSizes() {
		checkWithGenerator(new BothALittleTooLargeVerifier());
	}

	@Test
	public void testKnownOneBitLargerBoxSizes() {
		// TODO: verify the number of bits for just one dimension too large.
	}

	private void checkWithGenerator(BoundingBoxSizeTableVerifier generator) {
		for (int bits = 4; bits < 64; bits++) {
			BoundingBox bbox = generator.generate(bits);
			assertEquals(generator.getExpectedBits(bits), GeoHashSizeTable.numberOfBitsForOverlappingGeoHash(bbox));
		}
	}
}",https://www.github.com/kungfoo/geohash-java/commit/555bc93bd6bd54ae6d74166557cc7deb1fb77423
555bc93bd6bd54ae6d74166557cc7deb1fb77423,GeoHashSizeTableTest.java,getExpectedBits,"		public int getExpectedBits(int bits);
	}

	private static class ALittleTooSmallVerifier implements BoundingBoxSizeTableVerifier {
		@Override
		public BoundingBox generate(int bits) {
			// make the bounding box a little smaller than dLat/dLon
			double dLat = GeoHashSizeTable.dLat(bits) - DELTA;
			double dLon = GeoHashSizeTable.dLon(bits) - DELTA;
			return new BoundingBox(45 - dLat, 30 - dLon, 45, 30);
		}

		@Override
		public int getExpectedBits(int bits) {
			return bits;
		}
	}

	private static class BothALittleTooLargeVerifier implements BoundingBoxSizeTableVerifier {
		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);
			return new BoundingBox(0, 0, dLat + DELTA, dLon + DELTA);
		}

		@Override
		public int getExpectedBits(int bits) {
			return bits - 2;
		}
	}

	private static class OnlyOneALittleTooLargeVerifier implements BoundingBoxSizeTableVerifier {
		@Override
		public BoundingBox generate(int bits) {
			return null;
		}

		@Override
		public int getExpectedBits(int bits) {
			return bits - 2;
		}
	}

	@Test
	public void testKnownSmallerBoundingBoxSizes() {
		checkWithGenerator(new ALittleTooSmallVerifier());
	}

	@Test
	public void testKnownLargerBoundingBoxSizes() {
		checkWithGenerator(new BothALittleTooLargeVerifier());
	}

	@Test
	public void testKnownOneBitLargerBoxSizes() {
		// TODO: verify the number of bits for just one dimension too large.
	}

	private void checkWithGenerator(BoundingBoxSizeTableVerifier generator) {
		for (int bits = 4; bits < 64; bits++) {
			BoundingBox bbox = generator.generate(bits);
			assertEquals(generator.getExpectedBits(bits), GeoHashSizeTable.numberOfBitsForOverlappingGeoHash(bbox));
		}
	}
}",https://www.github.com/kungfoo/geohash-java/commit/555bc93bd6bd54ae6d74166557cc7deb1fb77423
555bc93bd6bd54ae6d74166557cc7deb1fb77423,GeoHashSizeTableTest.java,generate,"		public BoundingBox generate(int bits) {
			// make the bounding box a little smaller than dLat/dLon
			double dLat = GeoHashSizeTable.dLat(bits) - DELTA;
			double dLon = GeoHashSizeTable.dLon(bits) - DELTA;
			return new BoundingBox(45 - dLat, 30 - dLon, 45, 30);
		}",https://www.github.com/kungfoo/geohash-java/commit/555bc93bd6bd54ae6d74166557cc7deb1fb77423
555bc93bd6bd54ae6d74166557cc7deb1fb77423,GeoHashSizeTableTest.java,getExpectedBits,"		public int getExpectedBits(int bits) {
			return bits;
		}",https://www.github.com/kungfoo/geohash-java/commit/555bc93bd6bd54ae6d74166557cc7deb1fb77423
555bc93bd6bd54ae6d74166557cc7deb1fb77423,GeoHashSizeTableTest.java,generate,"		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);
			return new BoundingBox(0, 0, dLat + DELTA, dLon + DELTA);
		}",https://www.github.com/kungfoo/geohash-java/commit/555bc93bd6bd54ae6d74166557cc7deb1fb77423
555bc93bd6bd54ae6d74166557cc7deb1fb77423,GeoHashSizeTableTest.java,getExpectedBits,"		public int getExpectedBits(int bits) {
			return bits - 2;
		}",https://www.github.com/kungfoo/geohash-java/commit/555bc93bd6bd54ae6d74166557cc7deb1fb77423
555bc93bd6bd54ae6d74166557cc7deb1fb77423,GeoHashSizeTableTest.java,generate,"		public BoundingBox generate(int bits) {
			return null;
		}",https://www.github.com/kungfoo/geohash-java/commit/555bc93bd6bd54ae6d74166557cc7deb1fb77423
555bc93bd6bd54ae6d74166557cc7deb1fb77423,GeoHashSizeTableTest.java,getExpectedBits,"		public int getExpectedBits(int bits) {
			return bits - 2;
		}",https://www.github.com/kungfoo/geohash-java/commit/555bc93bd6bd54ae6d74166557cc7deb1fb77423
555bc93bd6bd54ae6d74166557cc7deb1fb77423,GeoHashSizeTableTest.java,testKnownSmallerBoundingBoxSizes,"	public void testKnownSmallerBoundingBoxSizes() {
		checkWithGenerator(new ALittleTooSmallVerifier());
	}",https://www.github.com/kungfoo/geohash-java/commit/555bc93bd6bd54ae6d74166557cc7deb1fb77423
555bc93bd6bd54ae6d74166557cc7deb1fb77423,GeoHashSizeTableTest.java,testKnownLargerBoundingBoxSizes,"	public void testKnownLargerBoundingBoxSizes() {
		checkWithGenerator(new BothALittleTooLargeVerifier());
	}",https://www.github.com/kungfoo/geohash-java/commit/555bc93bd6bd54ae6d74166557cc7deb1fb77423
555bc93bd6bd54ae6d74166557cc7deb1fb77423,GeoHashSizeTableTest.java,testKnownOneBitLargerBoxSizes,"	public void testKnownOneBitLargerBoxSizes() {
		// TODO: verify the number of bits for just one dimension too large.
	}

	private void checkWithGenerator(BoundingBoxSizeTableVerifier generator) {
		for (int bits = 4; bits < 64; bits++) {
			BoundingBox bbox = generator.generate(bits);
			assertEquals(generator.getExpectedBits(bits), GeoHashSizeTable.numberOfBitsForOverlappingGeoHash(bbox));
		}
	}
}",https://www.github.com/kungfoo/geohash-java/commit/555bc93bd6bd54ae6d74166557cc7deb1fb77423
555bc93bd6bd54ae6d74166557cc7deb1fb77423,GeoHashSizeTableTest.java,checkWithGenerator,"	private void checkWithGenerator(BoundingBoxSizeTableVerifier generator) {
		for (int bits = 4; bits < 64; bits++) {
			BoundingBox bbox = generator.generate(bits);",https://www.github.com/kungfoo/geohash-java/commit/555bc93bd6bd54ae6d74166557cc7deb1fb77423
ae95a362b9105d4421c2fc461d03d151cb3dc14b,GeoHashSizeTableTest.java,testDLat,"	public void testDLat() {
		assertDLatIs(180d, 0);
		assertDLatIs(180d, 1);
		assertDLatIs(90d, 2);
		assertDLatIs(0.3515625, 18);
		assertDLatIs(0.3515625, 19);
	}",https://www.github.com/kungfoo/geohash-java/commit/ae95a362b9105d4421c2fc461d03d151cb3dc14b
ae95a362b9105d4421c2fc461d03d151cb3dc14b,GeoHashSizeTableTest.java,assertDLatIs,"	private void assertDLatIs(double d, int i) {
		assertEquals(d, GeoHashSizeTable.dLat(i), 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/ae95a362b9105d4421c2fc461d03d151cb3dc14b
ae95a362b9105d4421c2fc461d03d151cb3dc14b,GeoHashSizeTableTest.java,testDLon,"	public void testDLon() {
		assertDLonIs(360, 0);
		assertDLonIs(180, 1);
		assertDLonIs(0.0439453125, 25);
		assertDLonIs(0.0439453125, 26);
	}",https://www.github.com/kungfoo/geohash-java/commit/ae95a362b9105d4421c2fc461d03d151cb3dc14b
ae95a362b9105d4421c2fc461d03d151cb3dc14b,GeoHashSizeTableTest.java,assertDLonIs,"	private void assertDLonIs(double d, int i) {
		assertEquals(d, GeoHashSizeTable.dLon(i), 1 - 128);
	}",https://www.github.com/kungfoo/geohash-java/commit/ae95a362b9105d4421c2fc461d03d151cb3dc14b
ae95a362b9105d4421c2fc461d03d151cb3dc14b,GeoHashSizeTableTest.java,generate,"		public BoundingBox generate(int bits);

		/**
		 * return the number of expected bits.
		 */
		public int getExpectedBits(int bits);
	}

	/**
	 * the entire box is a little too small, thus it must fit nicely into the
	 * hash.
	 */
	private static class ALittleTooSmallVerifier implements BoundingBoxSizeTableVerifier {
		@Override
		public BoundingBox generate(int bits) {
			// make the bounding box a little smaller than dLat/dLon
			double dLat = GeoHashSizeTable.dLat(bits) - DELTA;
			double dLon = GeoHashSizeTable.dLon(bits) - DELTA;
			return new BoundingBox(45 - dLat, 30 - dLon, 45, 30);
		}

		@Override
		public int getExpectedBits(int bits) {
			return bits;
		}
	}

	/**
	 * if both lat and lon are a little too large, we must use a bigger hash,
	 * i.e. less bits.
	 */
	private static class BothALittleTooLargeVerifier implements BoundingBoxSizeTableVerifier {
		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);
			return new BoundingBox(0, 0, dLat + DELTA, dLon + DELTA);
		}

		@Override
		public int getExpectedBits(int bits) {
			return bits - 2;
		}
	}

	/**
	 * depending on whether we're currently at an even or odd nuber of bits, one
	 * or two bits have to be removed.
	 */
	private static class OnlyOneALittleTooLargeVerifier implements BoundingBoxSizeTableVerifier {
		private Random rand = new Random();
		private boolean latitudeAffected;

		@Override
		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);

			if (latitudeAffected = rand.nextBoolean()) {
				dLat += DELTA;
			} else {
				dLon += DELTA;
			}
			return new BoundingBox(0, 0, dLat, dLon);
		}

		@Override
		public int getExpectedBits(int bits) {
			if (latitudeAffected) {
				if (bits % 2 != 0) {
					return bits - 2;
				} else {
					return bits - 1;
				}
			} else {
				if (bits % 2 != 0) {
					return bits - 1;
				} else {
					return bits - 2;
				}
			}
		}
	}

	@Test
	public void testKnownSmallerBoundingBoxSizes() {
		checkWithGenerator(new ALittleTooSmallVerifier());
	}

	@Test
	public void testKnownLargerBoundingBoxSizes() {
		checkWithGenerator(new BothALittleTooLargeVerifier());
	}

	@Test
	public void testKnownOneBitLargerBoxSizes() {
		checkWithGenerator(new OnlyOneALittleTooLargeVerifier());
	}

	private void checkWithGenerator(BoundingBoxSizeTableVerifier generator) {
		for (int bits = 4; bits < 64; bits++) {
			BoundingBox bbox = generator.generate(bits);
			assertEquals(generator.getExpectedBits(bits), GeoHashSizeTable.numberOfBitsForOverlappingGeoHash(bbox));
		}
	}
}",https://www.github.com/kungfoo/geohash-java/commit/ae95a362b9105d4421c2fc461d03d151cb3dc14b
ae95a362b9105d4421c2fc461d03d151cb3dc14b,GeoHashSizeTableTest.java,getExpectedBits,"		public int getExpectedBits(int bits);
	}

	/**
	 * the entire box is a little too small, thus it must fit nicely into the
	 * hash.
	 */
	private static class ALittleTooSmallVerifier implements BoundingBoxSizeTableVerifier {
		@Override
		public BoundingBox generate(int bits) {
			// make the bounding box a little smaller than dLat/dLon
			double dLat = GeoHashSizeTable.dLat(bits) - DELTA;
			double dLon = GeoHashSizeTable.dLon(bits) - DELTA;
			return new BoundingBox(45 - dLat, 30 - dLon, 45, 30);
		}

		@Override
		public int getExpectedBits(int bits) {
			return bits;
		}
	}

	/**
	 * if both lat and lon are a little too large, we must use a bigger hash,
	 * i.e. less bits.
	 */
	private static class BothALittleTooLargeVerifier implements BoundingBoxSizeTableVerifier {
		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);
			return new BoundingBox(0, 0, dLat + DELTA, dLon + DELTA);
		}

		@Override
		public int getExpectedBits(int bits) {
			return bits - 2;
		}
	}

	/**
	 * depending on whether we're currently at an even or odd nuber of bits, one
	 * or two bits have to be removed.
	 */
	private static class OnlyOneALittleTooLargeVerifier implements BoundingBoxSizeTableVerifier {
		private Random rand = new Random();
		private boolean latitudeAffected;

		@Override
		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);

			if (latitudeAffected = rand.nextBoolean()) {
				dLat += DELTA;
			} else {
				dLon += DELTA;
			}
			return new BoundingBox(0, 0, dLat, dLon);
		}

		@Override
		public int getExpectedBits(int bits) {
			if (latitudeAffected) {
				if (bits % 2 != 0) {
					return bits - 2;
				} else {
					return bits - 1;
				}
			} else {
				if (bits % 2 != 0) {
					return bits - 1;
				} else {
					return bits - 2;
				}
			}
		}
	}

	@Test
	public void testKnownSmallerBoundingBoxSizes() {
		checkWithGenerator(new ALittleTooSmallVerifier());
	}

	@Test
	public void testKnownLargerBoundingBoxSizes() {
		checkWithGenerator(new BothALittleTooLargeVerifier());
	}

	@Test
	public void testKnownOneBitLargerBoxSizes() {
		checkWithGenerator(new OnlyOneALittleTooLargeVerifier());
	}

	private void checkWithGenerator(BoundingBoxSizeTableVerifier generator) {
		for (int bits = 4; bits < 64; bits++) {
			BoundingBox bbox = generator.generate(bits);
			assertEquals(generator.getExpectedBits(bits), GeoHashSizeTable.numberOfBitsForOverlappingGeoHash(bbox));
		}
	}
}",https://www.github.com/kungfoo/geohash-java/commit/ae95a362b9105d4421c2fc461d03d151cb3dc14b
ae95a362b9105d4421c2fc461d03d151cb3dc14b,GeoHashSizeTableTest.java,generate,"		public BoundingBox generate(int bits) {
			// make the bounding box a little smaller than dLat/dLon
			double dLat = GeoHashSizeTable.dLat(bits) - DELTA;
			double dLon = GeoHashSizeTable.dLon(bits) - DELTA;
			return new BoundingBox(45 - dLat, 30 - dLon, 45, 30);
		}",https://www.github.com/kungfoo/geohash-java/commit/ae95a362b9105d4421c2fc461d03d151cb3dc14b
ae95a362b9105d4421c2fc461d03d151cb3dc14b,GeoHashSizeTableTest.java,getExpectedBits,"		public int getExpectedBits(int bits) {
			return bits;
		}",https://www.github.com/kungfoo/geohash-java/commit/ae95a362b9105d4421c2fc461d03d151cb3dc14b
ae95a362b9105d4421c2fc461d03d151cb3dc14b,GeoHashSizeTableTest.java,generate,"		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);
			return new BoundingBox(0, 0, dLat + DELTA, dLon + DELTA);
		}",https://www.github.com/kungfoo/geohash-java/commit/ae95a362b9105d4421c2fc461d03d151cb3dc14b
ae95a362b9105d4421c2fc461d03d151cb3dc14b,GeoHashSizeTableTest.java,getExpectedBits,"		public int getExpectedBits(int bits) {
			return bits - 2;
		}",https://www.github.com/kungfoo/geohash-java/commit/ae95a362b9105d4421c2fc461d03d151cb3dc14b
ae95a362b9105d4421c2fc461d03d151cb3dc14b,GeoHashSizeTableTest.java,generate,"		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);

			if (latitudeAffected = rand.nextBoolean()) {
				dLat += DELTA;
			} else {
				dLon += DELTA;
			}
			return new BoundingBox(0, 0, dLat, dLon);
		}",https://www.github.com/kungfoo/geohash-java/commit/ae95a362b9105d4421c2fc461d03d151cb3dc14b
ae95a362b9105d4421c2fc461d03d151cb3dc14b,GeoHashSizeTableTest.java,getExpectedBits,"		public int getExpectedBits(int bits) {
			if (latitudeAffected) {
				if (bits % 2 != 0) {",https://www.github.com/kungfoo/geohash-java/commit/ae95a362b9105d4421c2fc461d03d151cb3dc14b
ae95a362b9105d4421c2fc461d03d151cb3dc14b,GeoHashSizeTableTest.java,testKnownSmallerBoundingBoxSizes,"	public void testKnownSmallerBoundingBoxSizes() {
		checkWithGenerator(new ALittleTooSmallVerifier());
	}",https://www.github.com/kungfoo/geohash-java/commit/ae95a362b9105d4421c2fc461d03d151cb3dc14b
ae95a362b9105d4421c2fc461d03d151cb3dc14b,GeoHashSizeTableTest.java,testKnownLargerBoundingBoxSizes,"	public void testKnownLargerBoundingBoxSizes() {
		checkWithGenerator(new BothALittleTooLargeVerifier());
	}",https://www.github.com/kungfoo/geohash-java/commit/ae95a362b9105d4421c2fc461d03d151cb3dc14b
ae95a362b9105d4421c2fc461d03d151cb3dc14b,GeoHashSizeTableTest.java,testKnownOneBitLargerBoxSizes,"	public void testKnownOneBitLargerBoxSizes() {
		checkWithGenerator(new OnlyOneALittleTooLargeVerifier());
	}",https://www.github.com/kungfoo/geohash-java/commit/ae95a362b9105d4421c2fc461d03d151cb3dc14b
ae95a362b9105d4421c2fc461d03d151cb3dc14b,GeoHashSizeTableTest.java,checkWithGenerator,"	private void checkWithGenerator(BoundingBoxSizeTableVerifier generator) {
		for (int bits = 4; bits < 64; bits++) {
			BoundingBox bbox = generator.generate(bits);",https://www.github.com/kungfoo/geohash-java/commit/ae95a362b9105d4421c2fc461d03d151cb3dc14b
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(latitudeRange[1],
				longitudeRange[1]));",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(), southern,
				southern.getWesternNeighbour(), western, northern.getWesternNeighbour() };",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,toBase32,"	public String toBase32() {
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", Long.toBinaryString(bits), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,mask,"	private final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHashBoundingBoxSearch.java,expandSearch,"	private void expandSearch(GeoHash centerHash, BoundingBox bbox) {
		assert centerHash.getBoundingBox().intersects(bbox) : ""center hash must at least intersect the bounding box!"";
		addSearchHash(centerHash);

		for (GeoHash adjacent : centerHash.getAdjacent()) {
			if (adjacent.getBoundingBox().intersects(bbox) && !searchHashes.contains(adjacent)) {",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHashBoundingBoxSearch.java,addSearchHash,"	private void addSearchHash(GeoHash hash) {
		searchHashes.add(hash);
		expandSearchBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHashBoundingBoxSearch.java,expandSearchBoundingBox,"	private void expandSearchBoundingBox(GeoHash hash) {
		// TODO: adjust the bounding box size with the added hashes.
	}

	private boolean hashFits(GeoHash hash, BoundingBox bbox) {
		return hash.contains(bbox.getUpperLeft()) && hash.contains(bbox.getLowerRight());
	}

	public List<GeoHash> getSearchHashes() {
		return searchHashes;
	}

	@Override
	public String toString() {
		StringBuilder bui = new StringBuilder();
		for (GeoHash hash : searchHashes) {
			bui.append(hash).append(""\n"");
		}
		return bui.toString();
	}
}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHashBoundingBoxSearch.java,hashFits,"	private boolean hashFits(GeoHash hash, BoundingBox bbox) {
		return hash.contains(bbox.getUpperLeft()) && hash.contains(bbox.getLowerRight());
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHashBoundingBoxSearch.java,getSearchHashes,"	public List<GeoHash> getSearchHashes() {
		return searchHashes;
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHashBoundingBoxSearch.java,toString,"	public String toString() {
		StringBuilder bui = new StringBuilder();
		for (GeoHash hash : searchHashes) {
			bui.append(hash).append(""\n"");
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHashBoundingBoxSearchTest.java,testSeveralBoundingBoxes,"	public void testSeveralBoundingBoxes() {
		checkSearchYieldsCorrectNumberOfHashes(40.2, -22.5, 40.3, -22.4);
		checkSearchYieldsCorrectNumberOfHashes(40.2, -22.5, 40.3, -22.4);
		checkSearchYieldsCorrectNumberOfHashes(40.2090980098, -22.523432424324, 40.21982983232432, -22.494234232442);
		checkSearchYieldsCorrectNumberOfHashes(40.09872762, 30.0113312322, 41.23452234, 31.23432);
		checkSearchYieldsCorrectHashes(47.447907, 8.471276, 47.300200, 8.760941, ""u0qj"");
		checkSearchYieldsCorrectHashes(47.157502, 8.562244, 47.329727, 8.859215, ""u0qj"", ""u0qm"", ""u0qh"", ""u0qk"");
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHashBoundingBoxSearchTest.java,checkSearchYieldsCorrectNumberOfHashes,"	private void checkSearchYieldsCorrectNumberOfHashes(double minLat, double minLon, double maxLat, double maxLon) {
		GeoHashBoundingBoxSearch search = new GeoHashBoundingBoxSearch(new BoundingBox(minLat, minLon, maxLat, maxLon));
		assertRightNumberOfSearchHashes(search);
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHashBoundingBoxSearchTest.java,checkSearchYieldsCorrectHashes,"	private void checkSearchYieldsCorrectHashes(double minLat, double minLon, double maxLat, double maxLon,
			String... hashes) {
		GeoHashBoundingBoxSearch search = new GeoHashBoundingBoxSearch(new BoundingBox(minLat, minLon, maxLat, maxLon));
		assertEquals(hashes.length, search.getSearchHashes().size());
		for (String expectedHash : hashes) {
			assertTrue(""search hashes should contain "" + expectedHash + "" is: "" + search, search.getSearchHashes().contains(",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
0253c176cfc61181c60b4299f7038f314a7ce74f,GeoHashBoundingBoxSearchTest.java,assertRightNumberOfSearchHashes,"	private void assertRightNumberOfSearchHashes(GeoHashBoundingBoxSearch search) {
		int size = search.getSearchHashes().size();
		assertTrue(size == 1 || size == 2 || size == 4);
	}",https://www.github.com/kungfoo/geohash-java/commit/0253c176cfc61181c60b4299f7038f314a7ce74f
aacc3761b4e8eb4689b274861579ff98a6ca0db7,BoundingBox.java,getUpperLeft,"	public WGS84Point getUpperLeft() {
		return new WGS84Point(maxLat, minLon);
	}",https://www.github.com/kungfoo/geohash-java/commit/aacc3761b4e8eb4689b274861579ff98a6ca0db7
aacc3761b4e8eb4689b274861579ff98a6ca0db7,BoundingBox.java,getLowerRight,"	public WGS84Point getLowerRight() {
		return new WGS84Point(minLat, maxLon);
	}",https://www.github.com/kungfoo/geohash-java/commit/aacc3761b4e8eb4689b274861579ff98a6ca0db7
aacc3761b4e8eb4689b274861579ff98a6ca0db7,BoundingBox.java,getLatitudeSize,"	public double getLatitudeSize() {
		return maxLat - minLat;
	}",https://www.github.com/kungfoo/geohash-java/commit/aacc3761b4e8eb4689b274861579ff98a6ca0db7
aacc3761b4e8eb4689b274861579ff98a6ca0db7,BoundingBox.java,getLongitudeSize,"	public double getLongitudeSize() {
		return maxLon - minLon;
	}",https://www.github.com/kungfoo/geohash-java/commit/aacc3761b4e8eb4689b274861579ff98a6ca0db7
aacc3761b4e8eb4689b274861579ff98a6ca0db7,BoundingBox.java,equals,"	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj instanceof BoundingBox) {
			BoundingBox that = (BoundingBox) obj;",https://www.github.com/kungfoo/geohash-java/commit/aacc3761b4e8eb4689b274861579ff98a6ca0db7
aacc3761b4e8eb4689b274861579ff98a6ca0db7,BoundingBox.java,hashCode,"	public int hashCode() {
		int result = 17;
		result = 37 * result + hashCode(minLat);
		result = 37 * result + hashCode(maxLat);
		result = 37 * result + hashCode(minLon);
		result = 37 * result + hashCode(maxLon);
		return result;
	}",https://www.github.com/kungfoo/geohash-java/commit/aacc3761b4e8eb4689b274861579ff98a6ca0db7
aacc3761b4e8eb4689b274861579ff98a6ca0db7,BoundingBox.java,hashCode,"	private static int hashCode(double x) {
		long f = Double.doubleToLongBits(x);
		return (int) (f ^ (f >>> 32));
	}",https://www.github.com/kungfoo/geohash-java/commit/aacc3761b4e8eb4689b274861579ff98a6ca0db7
aacc3761b4e8eb4689b274861579ff98a6ca0db7,BoundingBox.java,contains,"	public boolean contains(WGS84Point point) {
		return (point.latitude >= minLat) && (point.longitude >= minLon) && (point.latitude <= maxLat)
				&& (point.longitude <= maxLon);",https://www.github.com/kungfoo/geohash-java/commit/aacc3761b4e8eb4689b274861579ff98a6ca0db7
aacc3761b4e8eb4689b274861579ff98a6ca0db7,BoundingBox.java,intersects,"	public boolean intersects(BoundingBox other) {
		return !(other.minLon > maxLon || other.maxLon < minLon || other.minLon > maxLon || other.maxLon < minLon);
	}",https://www.github.com/kungfoo/geohash-java/commit/aacc3761b4e8eb4689b274861579ff98a6ca0db7
aacc3761b4e8eb4689b274861579ff98a6ca0db7,BoundingBox.java,toString,"	public String toString() {
		return getUpperLeft() + "" -> "" + getLowerRight();
	}",https://www.github.com/kungfoo/geohash-java/commit/aacc3761b4e8eb4689b274861579ff98a6ca0db7
aacc3761b4e8eb4689b274861579ff98a6ca0db7,BoundingBox.java,getCenterPoint,"	public WGS84Point getCenterPoint() {
		double centerLatitude = (minLat + maxLat) / 2;
		double centerLongitude = (minLon + maxLon) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/aacc3761b4e8eb4689b274861579ff98a6ca0db7
aacc3761b4e8eb4689b274861579ff98a6ca0db7,BoundingBoxTest.java,setUp,"	public void setUp() {
		a = new BoundingBox(new WGS84Point(30, 20), new WGS84Point(21, 31));
		b = new BoundingBox(a);
		c = new BoundingBox(new WGS84Point(45, -170), new WGS84Point(-45, 170));
	}",https://www.github.com/kungfoo/geohash-java/commit/aacc3761b4e8eb4689b274861579ff98a6ca0db7
aacc3761b4e8eb4689b274861579ff98a6ca0db7,BoundingBoxTest.java,testHashCode,"	public void testHashCode() {
		assertEquals(a.hashCode(), b.hashCode());
		assertFalse(a.hashCode() == c.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/aacc3761b4e8eb4689b274861579ff98a6ca0db7
aacc3761b4e8eb4689b274861579ff98a6ca0db7,BoundingBoxTest.java,testEqualsObject,"	public void testEqualsObject() {
		assertEquals(a, b);
		assertEquals(b, a);
		assertFalse(a.equals(c));
	}",https://www.github.com/kungfoo/geohash-java/commit/aacc3761b4e8eb4689b274861579ff98a6ca0db7
aacc3761b4e8eb4689b274861579ff98a6ca0db7,BoundingBoxTest.java,testContains,"	public void testContains() {
		BoundingBox bbox = new BoundingBox(45, 46, 121, 120);
		assertContains(bbox, new WGS84Point(45.5, 120.5));
		assertNotContains(bbox, new WGS84Point(90, 90));
	}",https://www.github.com/kungfoo/geohash-java/commit/aacc3761b4e8eb4689b274861579ff98a6ca0db7
aacc3761b4e8eb4689b274861579ff98a6ca0db7,BoundingBoxTest.java,testIntersects,"	public void testIntersects() {
		BoundingBox bbox = new BoundingBox(10, -10, 41, 40);
		assertIntersects(bbox, new BoundingBox(5, -15, 40.5, 43));
		assertDoesNotIntersect(bbox, new BoundingBox(5, -15, 42, 43));
	}",https://www.github.com/kungfoo/geohash-java/commit/aacc3761b4e8eb4689b274861579ff98a6ca0db7
aacc3761b4e8eb4689b274861579ff98a6ca0db7,BoundingBoxTest.java,assertDoesNotIntersect,"	private void assertDoesNotIntersect(BoundingBox bbox, BoundingBox boundingBox) {
		assertFalse(bbox + "" should NOT intersect "" + boundingBox, bbox.intersects(boundingBox));
		assertFalse(boundingBox + "" should NOT intersect "" + bbox, boundingBox.intersects(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/aacc3761b4e8eb4689b274861579ff98a6ca0db7
aacc3761b4e8eb4689b274861579ff98a6ca0db7,BoundingBoxTest.java,assertIntersects,"	private void assertIntersects(BoundingBox bbox, BoundingBox boundingBox) {
		assertTrue(bbox + "" should intersect "" + boundingBox, bbox.intersects(boundingBox));
		assertTrue(boundingBox + "" should intersect "" + bbox, boundingBox.intersects(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/aacc3761b4e8eb4689b274861579ff98a6ca0db7
aacc3761b4e8eb4689b274861579ff98a6ca0db7,BoundingBoxTest.java,assertContains,"	private void assertContains(BoundingBox box, WGS84Point p) {
		assertTrue(p + "" should be in "" + box, box.contains(p));
	}",https://www.github.com/kungfoo/geohash-java/commit/aacc3761b4e8eb4689b274861579ff98a6ca0db7
aacc3761b4e8eb4689b274861579ff98a6ca0db7,BoundingBoxTest.java,assertNotContains,"	private void assertNotContains(BoundingBox box, WGS84Point p) {
		assertFalse(p + "" should NOT be in "" + box, box.contains(p));
	}",https://www.github.com/kungfoo/geohash-java/commit/aacc3761b4e8eb4689b274861579ff98a6ca0db7
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,BoundingBox.java,getUpperLeft,"	public WGS84Point getUpperLeft() {
		return new WGS84Point(maxLat, minLon);
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,BoundingBox.java,getLowerRight,"	public WGS84Point getLowerRight() {
		return new WGS84Point(minLat, maxLon);
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,BoundingBox.java,getLatitudeSize,"	public double getLatitudeSize() {
		return maxLat - minLat;
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,BoundingBox.java,getLongitudeSize,"	public double getLongitudeSize() {
		return maxLon - minLon;
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,BoundingBox.java,equals,"	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj instanceof BoundingBox) {
			BoundingBox that = (BoundingBox) obj;",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,BoundingBox.java,hashCode,"	public int hashCode() {
		int result = 17;
		result = 37 * result + hashCode(minLat);
		result = 37 * result + hashCode(maxLat);
		result = 37 * result + hashCode(minLon);
		result = 37 * result + hashCode(maxLon);
		return result;
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,BoundingBox.java,hashCode,"	private static int hashCode(double x) {
		long f = Double.doubleToLongBits(x);
		return (int) (f ^ (f >>> 32));
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,BoundingBox.java,contains,"	public boolean contains(WGS84Point point) {
		return (point.latitude >= minLat) && (point.longitude >= minLon) && (point.latitude <= maxLat)
				&& (point.longitude <= maxLon);",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,BoundingBox.java,intersects,"	public boolean intersects(BoundingBox other) {
		return !(other.minLon > maxLon || other.maxLon < minLon || other.minLon > maxLon || other.maxLon < minLon);
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,BoundingBox.java,toString,"	public String toString() {
		return getUpperLeft() + "" -> "" + getLowerRight();
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,BoundingBox.java,getCenterPoint,"	public WGS84Point getCenterPoint() {
		double centerLatitude = (minLat + maxLat) / 2;
		double centerLongitude = (minLon + maxLon) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,GeoHashSizeTable.java,dLat,"	protected static final double dLat(int bits) {
		return 180d / Math.pow(2, bits / 2);
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,GeoHashSizeTable.java,dLon,"	protected static final double dLon(int bits) {
		return 360d / Math.pow(2, (bits + 1) / 2);
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,GeoHashSizeTable.java,numberOfBitsForOverlappingGeoHash,"	public static final int numberOfBitsForOverlappingGeoHash(BoundingBox boundingBox) {
		int bits = 63;
		double height = boundingBox.getLatitudeSize();
		double width = boundingBox.getLongitudeSize();
		while ((dLat[bits] < height || dLon[bits] < width) && bits > 0) {
			bits--;
		}
		return bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,BoundingBoxTest.java,setUp,"	public void setUp() {
		a = new BoundingBox(new WGS84Point(30, 20), new WGS84Point(21, 31));
		b = new BoundingBox(a);
		c = new BoundingBox(new WGS84Point(45, -170), new WGS84Point(-45, 170));
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,BoundingBoxTest.java,testHashCode,"	public void testHashCode() {
		assertEquals(a.hashCode(), b.hashCode());
		assertFalse(a.hashCode() == c.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,BoundingBoxTest.java,testEqualsObject,"	public void testEqualsObject() {
		assertEquals(a, b);
		assertEquals(b, a);
		assertFalse(a.equals(c));
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,BoundingBoxTest.java,testContains,"	public void testContains() {
		BoundingBox bbox = new BoundingBox(45, 46, 121, 120);
		assertContains(bbox, new WGS84Point(45.5, 120.5));
		assertNotContains(bbox, new WGS84Point(90, 90));
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,BoundingBoxTest.java,testSize,"	public void testSize(){ 
		BoundingBox bbox = new BoundingBox(45, 90, 0, 30);
		assertHeightIs(bbox, 45);
		assertWidthIs(bbox, 30);
		bbox = new BoundingBox(-45, 45, -22.5, 30);
		assertHeightIs(bbox, 90);
		assertWidthIs(bbox, 52.5);
		bbox = new BoundingBox(-44, -46.1, -127.2, -128);
		assertHeightIs(bbox, 2.1);
		assertWidthIs(bbox, 0.8);
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,BoundingBoxTest.java,assertWidthIs,"	private void assertWidthIs(BoundingBox bbox, double width) {
		assertEquals(width, bbox.getLongitudeSize(), DELTA);
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,BoundingBoxTest.java,assertHeightIs,"	private void assertHeightIs(BoundingBox bbox, double height) {
		assertEquals(height, bbox.getLatitudeSize(), DELTA);
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,BoundingBoxTest.java,testIntersects,"	public void testIntersects() {
		BoundingBox bbox = new BoundingBox(10, -10, 41, 40);
		assertIntersects(bbox, new BoundingBox(5, -15, 40.5, 43));
		assertDoesNotIntersect(bbox, new BoundingBox(5, -15, 42, 43));
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,BoundingBoxTest.java,assertDoesNotIntersect,"	private void assertDoesNotIntersect(BoundingBox bbox, BoundingBox boundingBox) {
		assertFalse(bbox + "" should NOT intersect "" + boundingBox, bbox.intersects(boundingBox));
		assertFalse(boundingBox + "" should NOT intersect "" + bbox, boundingBox.intersects(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,BoundingBoxTest.java,assertIntersects,"	private void assertIntersects(BoundingBox bbox, BoundingBox boundingBox) {
		assertTrue(bbox + "" should intersect "" + boundingBox, bbox.intersects(boundingBox));
		assertTrue(boundingBox + "" should intersect "" + bbox, boundingBox.intersects(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,BoundingBoxTest.java,assertContains,"	private void assertContains(BoundingBox box, WGS84Point p) {
		assertTrue(p + "" should be in "" + box, box.contains(p));
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,BoundingBoxTest.java,assertNotContains,"	private void assertNotContains(BoundingBox box, WGS84Point p) {
		assertFalse(p + "" should NOT be in "" + box, box.contains(p));
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,GeoHashBoundingBoxSearchTest.java,testSeveralBoundingBoxes,"	public void testSeveralBoundingBoxes() {
		checkSearchYieldsCorrectNumberOfHashes(-22.5,-22.4, 40.2,  40.3);
		checkSearchYieldsCorrectNumberOfHashes(40.2,  40.3, -22.5,-22.4);
		checkSearchYieldsCorrectNumberOfHashes(40.2090980098, 40.21982983232432, -22.523432424324,-22.494234232442);
		checkSearchYieldsCorrectNumberOfHashes( 41.23452234, 40.09872762,31.23432, 30.0113312322);
		checkSearchYieldsCorrectHashes(8.760941,  8.471276, 47.447907, 47.300200,""u0qj"");
		checkSearchYieldsCorrectHashes(8.562244, 8.859215,47.157502, 47.329727,  ""u0qj"", ""u0qm"", ""u0qh"", ""u0qk"");
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,GeoHashBoundingBoxSearchTest.java,checkSearchYieldsCorrectNumberOfHashes,"	private void checkSearchYieldsCorrectNumberOfHashes(double minLat, double maxLat, double minLon, double maxLon) {
		GeoHashBoundingBoxSearch search = new GeoHashBoundingBoxSearch(new BoundingBox(minLat, maxLat, minLon, maxLon));
		assertRightNumberOfSearchHashes(search);
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,GeoHashBoundingBoxSearchTest.java,checkSearchYieldsCorrectHashes,"	private void checkSearchYieldsCorrectHashes(double minLat, double maxLat, double minLon, double maxLon,
			String... hashes) {
		GeoHashBoundingBoxSearch search = new GeoHashBoundingBoxSearch(new BoundingBox(minLat,  maxLat,minLon, maxLon));
		assertEquals(hashes.length, search.getSearchHashes().size());
		for (String expectedHash : hashes) {
			assertTrue(""search hashes should contain "" + expectedHash + "" is: "" + search, search.getSearchHashes().contains(",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,GeoHashBoundingBoxSearchTest.java,assertRightNumberOfSearchHashes,"	private void assertRightNumberOfSearchHashes(GeoHashBoundingBoxSearch search) {
		int size = search.getSearchHashes().size();
		assertTrue(size == 1 || size == 2 || size == 4);
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,GeoHashSizeTableTest.java,testDLat,"	public void testDLat() {
		assertDLatIs(180d, 0);
		assertDLatIs(180d, 1);
		assertDLatIs(90d, 2);
		assertDLatIs(0.3515625, 18);
		assertDLatIs(0.3515625, 19);
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,GeoHashSizeTableTest.java,assertDLatIs,"	private void assertDLatIs(double d, int i) {
		assertEquals(d, GeoHashSizeTable.dLat(i), 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,GeoHashSizeTableTest.java,testDLon,"	public void testDLon() {
		assertDLonIs(360, 0);
		assertDLonIs(180, 1);
		assertDLonIs(0.0439453125, 25);
		assertDLonIs(0.0439453125, 26);
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,GeoHashSizeTableTest.java,assertDLonIs,"	private void assertDLonIs(double d, int i) {
		assertEquals(d, GeoHashSizeTable.dLon(i), 1 - 128);
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,GeoHashSizeTableTest.java,generate,"		public BoundingBox generate(int bits);

		/**
		 * return the number of expected bits.
		 */
		public int getExpectedBits(int bits);
	}

	/**
	 * the entire box is a little too small, thus it must fit nicely into the
	 * hash.
	 */
	private static class ALittleTooSmallVerifier implements BoundingBoxSizeTableVerifier {
		@Override
		public BoundingBox generate(int bits) {
			// make the bounding box a little smaller than dLat/dLon
			double dLat = GeoHashSizeTable.dLat(bits) - DELTA;
			double dLon = GeoHashSizeTable.dLon(bits) - DELTA;
			return new BoundingBox(45 - dLat, 45, 30, 30 - dLon);
		}

		@Override
		public int getExpectedBits(int bits) {
			return bits;
		}
	}

	/**
	 * if both lat and lon are a little too large, we must use a bigger hash,
	 * i.e. less bits.
	 */
	private static class BothALittleTooLargeVerifier implements BoundingBoxSizeTableVerifier {
		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);
			return new BoundingBox(0, dLat + DELTA, 0, dLon + DELTA);
		}

		@Override
		public int getExpectedBits(int bits) {
			return bits - 2;
		}
	}

	/**
	 * depending on whether we're currently at an even or odd nuber of bits, one
	 * or two bits have to be removed.
	 */
	private static class OnlyOneALittleTooLargeVerifier implements BoundingBoxSizeTableVerifier {
		private Random rand = new Random();
		private boolean latitudeAffected;

		@Override
		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);

			if (latitudeAffected = rand.nextBoolean()) {
				dLat += DELTA;
			} else {
				dLon += DELTA;
			}
			return new BoundingBox(0, dLat, 0, dLon);
		}

		@Override
		public int getExpectedBits(int bits) {
			if (latitudeAffected) {
				if (bits % 2 != 0) {
					return bits - 2;
				} else {
					return bits - 1;
				}
			} else {
				if (bits % 2 != 0) {
					return bits - 1;
				} else {
					return bits - 2;
				}
			}
		}
	}

	@Test
	public void testKnownSmallerBoundingBoxSizes() {
		checkWithGenerator(new ALittleTooSmallVerifier());
	}

	@Test
	public void testKnownLargerBoundingBoxSizes() {
		checkWithGenerator(new BothALittleTooLargeVerifier());
	}

	@Test
	public void testKnownOneBitLargerBoxSizes() {
		checkWithGenerator(new OnlyOneALittleTooLargeVerifier());
	}

	private void checkWithGenerator(BoundingBoxSizeTableVerifier generator) {
		for (int bits = 4; bits < 64; bits++) {
			BoundingBox bbox = generator.generate(bits);
			assertEquals(generator.getExpectedBits(bits), GeoHashSizeTable.numberOfBitsForOverlappingGeoHash(bbox));
		}
	}
}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,GeoHashSizeTableTest.java,getExpectedBits,"		public int getExpectedBits(int bits);
	}

	/**
	 * the entire box is a little too small, thus it must fit nicely into the
	 * hash.
	 */
	private static class ALittleTooSmallVerifier implements BoundingBoxSizeTableVerifier {
		@Override
		public BoundingBox generate(int bits) {
			// make the bounding box a little smaller than dLat/dLon
			double dLat = GeoHashSizeTable.dLat(bits) - DELTA;
			double dLon = GeoHashSizeTable.dLon(bits) - DELTA;
			return new BoundingBox(45 - dLat, 45, 30, 30 - dLon);
		}

		@Override
		public int getExpectedBits(int bits) {
			return bits;
		}
	}

	/**
	 * if both lat and lon are a little too large, we must use a bigger hash,
	 * i.e. less bits.
	 */
	private static class BothALittleTooLargeVerifier implements BoundingBoxSizeTableVerifier {
		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);
			return new BoundingBox(0, dLat + DELTA, 0, dLon + DELTA);
		}

		@Override
		public int getExpectedBits(int bits) {
			return bits - 2;
		}
	}

	/**
	 * depending on whether we're currently at an even or odd nuber of bits, one
	 * or two bits have to be removed.
	 */
	private static class OnlyOneALittleTooLargeVerifier implements BoundingBoxSizeTableVerifier {
		private Random rand = new Random();
		private boolean latitudeAffected;

		@Override
		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);

			if (latitudeAffected = rand.nextBoolean()) {
				dLat += DELTA;
			} else {
				dLon += DELTA;
			}
			return new BoundingBox(0, dLat, 0, dLon);
		}

		@Override
		public int getExpectedBits(int bits) {
			if (latitudeAffected) {
				if (bits % 2 != 0) {
					return bits - 2;
				} else {
					return bits - 1;
				}
			} else {
				if (bits % 2 != 0) {
					return bits - 1;
				} else {
					return bits - 2;
				}
			}
		}
	}

	@Test
	public void testKnownSmallerBoundingBoxSizes() {
		checkWithGenerator(new ALittleTooSmallVerifier());
	}

	@Test
	public void testKnownLargerBoundingBoxSizes() {
		checkWithGenerator(new BothALittleTooLargeVerifier());
	}

	@Test
	public void testKnownOneBitLargerBoxSizes() {
		checkWithGenerator(new OnlyOneALittleTooLargeVerifier());
	}

	private void checkWithGenerator(BoundingBoxSizeTableVerifier generator) {
		for (int bits = 4; bits < 64; bits++) {
			BoundingBox bbox = generator.generate(bits);
			assertEquals(generator.getExpectedBits(bits), GeoHashSizeTable.numberOfBitsForOverlappingGeoHash(bbox));
		}
	}
}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,GeoHashSizeTableTest.java,generate,"		public BoundingBox generate(int bits) {
			// make the bounding box a little smaller than dLat/dLon
			double dLat = GeoHashSizeTable.dLat(bits) - DELTA;
			double dLon = GeoHashSizeTable.dLon(bits) - DELTA;
			return new BoundingBox(45 - dLat, 45, 30, 30 - dLon);
		}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,GeoHashSizeTableTest.java,getExpectedBits,"		public int getExpectedBits(int bits) {
			return bits;
		}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,GeoHashSizeTableTest.java,generate,"		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);
			return new BoundingBox(0, dLat + DELTA, 0, dLon + DELTA);
		}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,GeoHashSizeTableTest.java,getExpectedBits,"		public int getExpectedBits(int bits) {
			return bits - 2;
		}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,GeoHashSizeTableTest.java,generate,"		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);

			if (latitudeAffected = rand.nextBoolean()) {
				dLat += DELTA;
			} else {
				dLon += DELTA;
			}
			return new BoundingBox(0, dLat, 0, dLon);
		}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,GeoHashSizeTableTest.java,getExpectedBits,"		public int getExpectedBits(int bits) {
			if (latitudeAffected) {
				if (bits % 2 != 0) {",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,GeoHashSizeTableTest.java,testKnownSmallerBoundingBoxSizes,"	public void testKnownSmallerBoundingBoxSizes() {
		checkWithGenerator(new ALittleTooSmallVerifier());
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,GeoHashSizeTableTest.java,testKnownLargerBoundingBoxSizes,"	public void testKnownLargerBoundingBoxSizes() {
		checkWithGenerator(new BothALittleTooLargeVerifier());
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,GeoHashSizeTableTest.java,testKnownOneBitLargerBoxSizes,"	public void testKnownOneBitLargerBoxSizes() {
		checkWithGenerator(new OnlyOneALittleTooLargeVerifier());
	}",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c,GeoHashSizeTableTest.java,checkWithGenerator,"	private void checkWithGenerator(BoundingBoxSizeTableVerifier generator) {
		for (int bits = 4; bits < 64; bits++) {
			BoundingBox bbox = generator.generate(bits);",https://www.github.com/kungfoo/geohash-java/commit/e4b8030b2d1cead3a8034f8b7c67fb70542e8f7c
9b5b21e261f6f537f8ba77680d1e7da4a398ac37,BoundingBox.java,getUpperLeft,"	public WGS84Point getUpperLeft() {
		return new WGS84Point(maxLat, minLon);
	}",https://www.github.com/kungfoo/geohash-java/commit/9b5b21e261f6f537f8ba77680d1e7da4a398ac37
9b5b21e261f6f537f8ba77680d1e7da4a398ac37,BoundingBox.java,getLowerRight,"	public WGS84Point getLowerRight() {
		return new WGS84Point(minLat, maxLon);
	}",https://www.github.com/kungfoo/geohash-java/commit/9b5b21e261f6f537f8ba77680d1e7da4a398ac37
9b5b21e261f6f537f8ba77680d1e7da4a398ac37,BoundingBox.java,getLatitudeSize,"	public double getLatitudeSize() {
		return maxLat - minLat;
	}",https://www.github.com/kungfoo/geohash-java/commit/9b5b21e261f6f537f8ba77680d1e7da4a398ac37
9b5b21e261f6f537f8ba77680d1e7da4a398ac37,BoundingBox.java,getLongitudeSize,"	public double getLongitudeSize() {
		return maxLon - minLon;
	}",https://www.github.com/kungfoo/geohash-java/commit/9b5b21e261f6f537f8ba77680d1e7da4a398ac37
9b5b21e261f6f537f8ba77680d1e7da4a398ac37,BoundingBox.java,equals,"	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj instanceof BoundingBox) {
			BoundingBox that = (BoundingBox) obj;",https://www.github.com/kungfoo/geohash-java/commit/9b5b21e261f6f537f8ba77680d1e7da4a398ac37
9b5b21e261f6f537f8ba77680d1e7da4a398ac37,BoundingBox.java,hashCode,"	public int hashCode() {
		int result = 17;
		result = 37 * result + hashCode(minLat);
		result = 37 * result + hashCode(maxLat);
		result = 37 * result + hashCode(minLon);
		result = 37 * result + hashCode(maxLon);
		return result;
	}",https://www.github.com/kungfoo/geohash-java/commit/9b5b21e261f6f537f8ba77680d1e7da4a398ac37
9b5b21e261f6f537f8ba77680d1e7da4a398ac37,BoundingBox.java,hashCode,"	private static int hashCode(double x) {
		long f = Double.doubleToLongBits(x);
		return (int) (f ^ (f >>> 32));
	}",https://www.github.com/kungfoo/geohash-java/commit/9b5b21e261f6f537f8ba77680d1e7da4a398ac37
9b5b21e261f6f537f8ba77680d1e7da4a398ac37,BoundingBox.java,contains,"	public boolean contains(WGS84Point point) {
		return (point.latitude >= minLat) && (point.longitude >= minLon) && (point.latitude <= maxLat)
				&& (point.longitude <= maxLon);",https://www.github.com/kungfoo/geohash-java/commit/9b5b21e261f6f537f8ba77680d1e7da4a398ac37
9b5b21e261f6f537f8ba77680d1e7da4a398ac37,BoundingBox.java,intersects,"	public boolean intersects(BoundingBox other) {
		return !(other.minLon > maxLon || other.maxLon < minLon || other.minLat > maxLat || other.maxLat < minLat);
	}",https://www.github.com/kungfoo/geohash-java/commit/9b5b21e261f6f537f8ba77680d1e7da4a398ac37
9b5b21e261f6f537f8ba77680d1e7da4a398ac37,BoundingBox.java,toString,"	public String toString() {
		return getUpperLeft() + "" -> "" + getLowerRight();
	}",https://www.github.com/kungfoo/geohash-java/commit/9b5b21e261f6f537f8ba77680d1e7da4a398ac37
9b5b21e261f6f537f8ba77680d1e7da4a398ac37,BoundingBox.java,getCenterPoint,"	public WGS84Point getCenterPoint() {
		double centerLatitude = (minLat + maxLat) / 2;
		double centerLongitude = (minLon + maxLon) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/9b5b21e261f6f537f8ba77680d1e7da4a398ac37
9b5b21e261f6f537f8ba77680d1e7da4a398ac37,GeoHashBoundingBoxSearch.java,expandSearch,"	private void expandSearch(GeoHash centerHash, BoundingBox bbox) {
		assert centerHash.getBoundingBox().intersects(bbox) : ""center hash must at least intersect the bounding box!"";
		addSearchHash(centerHash);

		for (GeoHash adjacent : centerHash.getAdjacent()) {
			BoundingBox adjacentBox = adjacent.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/9b5b21e261f6f537f8ba77680d1e7da4a398ac37
9b5b21e261f6f537f8ba77680d1e7da4a398ac37,GeoHashBoundingBoxSearch.java,addSearchHash,"	private void addSearchHash(GeoHash hash) {
		searchHashes.add(hash);
		expandSearchBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/9b5b21e261f6f537f8ba77680d1e7da4a398ac37
9b5b21e261f6f537f8ba77680d1e7da4a398ac37,GeoHashBoundingBoxSearch.java,expandSearchBoundingBox,"	private void expandSearchBoundingBox(GeoHash hash) {
		// TODO: adjust the bounding box size with the added hashes.
	}

	private boolean hashFits(GeoHash hash, BoundingBox bbox) {
		return hash.contains(bbox.getUpperLeft()) && hash.contains(bbox.getLowerRight());
	}

	public List<GeoHash> getSearchHashes() {
		return searchHashes;
	}

	@Override
	public String toString() {
		StringBuilder bui = new StringBuilder();
		for (GeoHash hash : searchHashes) {
			bui.append(hash).append(""\n"");
		}
		return bui.toString();
	}
}",https://www.github.com/kungfoo/geohash-java/commit/9b5b21e261f6f537f8ba77680d1e7da4a398ac37
9b5b21e261f6f537f8ba77680d1e7da4a398ac37,GeoHashBoundingBoxSearch.java,hashFits,"	private boolean hashFits(GeoHash hash, BoundingBox bbox) {
		return hash.contains(bbox.getUpperLeft()) && hash.contains(bbox.getLowerRight());
	}",https://www.github.com/kungfoo/geohash-java/commit/9b5b21e261f6f537f8ba77680d1e7da4a398ac37
9b5b21e261f6f537f8ba77680d1e7da4a398ac37,GeoHashBoundingBoxSearch.java,getSearchHashes,"	public List<GeoHash> getSearchHashes() {
		return searchHashes;
	}",https://www.github.com/kungfoo/geohash-java/commit/9b5b21e261f6f537f8ba77680d1e7da4a398ac37
9b5b21e261f6f537f8ba77680d1e7da4a398ac37,GeoHashBoundingBoxSearch.java,toString,"	public String toString() {
		StringBuilder bui = new StringBuilder();
		for (GeoHash hash : searchHashes) {
			bui.append(hash).append(""\n"");
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/9b5b21e261f6f537f8ba77680d1e7da4a398ac37
9b5b21e261f6f537f8ba77680d1e7da4a398ac37,GeoHashBoundingBoxSearchTest.java,testSeveralBoundingBoxes,"	public void testSeveralBoundingBoxes() {
		checkSearchYieldsCorrectNumberOfHashes(40.2090980098, 40.21982983232432, -22.523432424324,-22.494234232442);
		checkSearchYieldsCorrectNumberOfHashes( 41.23452234, 40.09872762,31.23432, 30.0113312322);
		checkSearchYieldsCorrectHashes( 47.447907, 47.300200,8.760941,  8.471276, ""u0qj"");
		checkSearchYieldsCorrectHashes(47.157502, 47.329727, 8.562244, 8.859215, ""u0qj"", ""u0qm"", ""u0qh"", ""u0qk"");
	}",https://www.github.com/kungfoo/geohash-java/commit/9b5b21e261f6f537f8ba77680d1e7da4a398ac37
9b5b21e261f6f537f8ba77680d1e7da4a398ac37,GeoHashBoundingBoxSearchTest.java,checkSearchYieldsCorrectNumberOfHashes,"	private void checkSearchYieldsCorrectNumberOfHashes(double minLat, double maxLat, double minLon, double maxLon) {
		GeoHashBoundingBoxSearch search = new GeoHashBoundingBoxSearch(new BoundingBox(minLat, maxLat, minLon, maxLon));
		assertRightNumberOfSearchHashes(search);
	}",https://www.github.com/kungfoo/geohash-java/commit/9b5b21e261f6f537f8ba77680d1e7da4a398ac37
9b5b21e261f6f537f8ba77680d1e7da4a398ac37,GeoHashBoundingBoxSearchTest.java,checkSearchYieldsCorrectHashes,"	private void checkSearchYieldsCorrectHashes(double minLat, double maxLat, double minLon, double maxLon,
			String... hashes) {
		GeoHashBoundingBoxSearch search = new GeoHashBoundingBoxSearch(new BoundingBox(minLat,  maxLat,minLon, maxLon));
		assertEquals(hashes.length, search.getSearchHashes().size());
		for (String expectedHash : hashes) {
			assertTrue(""search hashes should contain "" + expectedHash + "" is: "" + search, search.getSearchHashes().contains(",https://www.github.com/kungfoo/geohash-java/commit/9b5b21e261f6f537f8ba77680d1e7da4a398ac37
9b5b21e261f6f537f8ba77680d1e7da4a398ac37,GeoHashBoundingBoxSearchTest.java,assertRightNumberOfSearchHashes,"	private void assertRightNumberOfSearchHashes(GeoHashBoundingBoxSearch search) {
		int size = search.getSearchHashes().size();
		assertTrue(size == 1 || size == 2 || size == 4);
	}",https://www.github.com/kungfoo/geohash-java/commit/9b5b21e261f6f537f8ba77680d1e7da4a398ac37
871b2094a6d47f8a6a034d9c1d0d5759886266d2,GeoHashBoundingBoxSearch.java,expandSearch,"	private void expandSearch(GeoHash centerHash, BoundingBox bbox) {
		assert centerHash.getBoundingBox().intersects(bbox) : ""center hash must at least intersect the bounding box!"";
		addSearchHash(centerHash);

		for (GeoHash adjacent : centerHash.getAdjacent()) {
			BoundingBox adjacentBox = adjacent.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/871b2094a6d47f8a6a034d9c1d0d5759886266d2
871b2094a6d47f8a6a034d9c1d0d5759886266d2,GeoHashBoundingBoxSearch.java,addSearchHash,"	private void addSearchHash(GeoHash hash) {
		searchHashes.add(hash);
		expandSearchBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/871b2094a6d47f8a6a034d9c1d0d5759886266d2
871b2094a6d47f8a6a034d9c1d0d5759886266d2,GeoHashBoundingBoxSearch.java,expandSearchBoundingBox,"	private void expandSearchBoundingBox(GeoHash hash) {
		// TODO: adjust the bounding box size with the added hashes.
	}

	private boolean hashFits(GeoHash hash, BoundingBox bbox) {
		return hash.contains(bbox.getUpperLeft()) && hash.contains(bbox.getLowerRight());
	}

	public List<GeoHash> getSearchHashes() {
		return searchHashes;
	}

	@Override
	public String toString() {
		StringBuilder bui = new StringBuilder();
		for (GeoHash hash : searchHashes) {
			bui.append(hash).append(""\n"");
		}
		return bui.toString();
	}
}",https://www.github.com/kungfoo/geohash-java/commit/871b2094a6d47f8a6a034d9c1d0d5759886266d2
871b2094a6d47f8a6a034d9c1d0d5759886266d2,GeoHashBoundingBoxSearch.java,hashFits,"	private boolean hashFits(GeoHash hash, BoundingBox bbox) {
		return hash.contains(bbox.getUpperLeft()) && hash.contains(bbox.getLowerRight());
	}",https://www.github.com/kungfoo/geohash-java/commit/871b2094a6d47f8a6a034d9c1d0d5759886266d2
871b2094a6d47f8a6a034d9c1d0d5759886266d2,GeoHashBoundingBoxSearch.java,getSearchHashes,"	public List<GeoHash> getSearchHashes() {
		return searchHashes;
	}",https://www.github.com/kungfoo/geohash-java/commit/871b2094a6d47f8a6a034d9c1d0d5759886266d2
871b2094a6d47f8a6a034d9c1d0d5759886266d2,GeoHashBoundingBoxSearch.java,toString,"	public String toString() {
		StringBuilder bui = new StringBuilder();
		for (GeoHash hash : searchHashes) {
			bui.append(hash).append(""\n"");
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/871b2094a6d47f8a6a034d9c1d0d5759886266d2
33fd5ffe33b8817cd030008d46874fc89167a8d6,GeoHashBoundingBoxSearch.java,expandSearch,"	private void expandSearch(GeoHash centerHash, BoundingBox bbox) {
		assert centerHash.getBoundingBox().intersects(bbox) : ""center hash must at least intersect the bounding box!"";
		addSearchHash(centerHash);

		for (GeoHash adjacent : centerHash.getAdjacent()) {
			BoundingBox adjacentBox = adjacent.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/33fd5ffe33b8817cd030008d46874fc89167a8d6
33fd5ffe33b8817cd030008d46874fc89167a8d6,GeoHashBoundingBoxSearch.java,addSearchHash,"	private void addSearchHash(GeoHash hash) {
		searchHashes.add(hash);
		expandSearchBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/33fd5ffe33b8817cd030008d46874fc89167a8d6
33fd5ffe33b8817cd030008d46874fc89167a8d6,GeoHashBoundingBoxSearch.java,expandSearchBoundingBox,"	private void expandSearchBoundingBox(GeoHash hash) {
		// TODO: adjust the bounding box size with the added hashes.
	}

	private boolean hashFits(GeoHash hash, BoundingBox bbox) {
		return hash.contains(bbox.getUpperLeft()) && hash.contains(bbox.getLowerRight());
	}

	public List<GeoHash> getSearchHashes() {
		return searchHashes;
	}

	@Override
	public String toString() {
		StringBuilder bui = new StringBuilder();
		for (GeoHash hash : searchHashes) {
			bui.append(hash).append(""\n"");
		}
		return bui.toString();
	}
}",https://www.github.com/kungfoo/geohash-java/commit/33fd5ffe33b8817cd030008d46874fc89167a8d6
33fd5ffe33b8817cd030008d46874fc89167a8d6,GeoHashBoundingBoxSearch.java,hashFits,"	private boolean hashFits(GeoHash hash, BoundingBox bbox) {
		return hash.contains(bbox.getUpperLeft()) && hash.contains(bbox.getLowerRight());
	}",https://www.github.com/kungfoo/geohash-java/commit/33fd5ffe33b8817cd030008d46874fc89167a8d6
33fd5ffe33b8817cd030008d46874fc89167a8d6,GeoHashBoundingBoxSearch.java,getSearchHashes,"	public List<GeoHash> getSearchHashes() {
		return searchHashes;
	}",https://www.github.com/kungfoo/geohash-java/commit/33fd5ffe33b8817cd030008d46874fc89167a8d6
33fd5ffe33b8817cd030008d46874fc89167a8d6,GeoHashBoundingBoxSearch.java,toString,"	public String toString() {
		StringBuilder bui = new StringBuilder();
		for (GeoHash hash : searchHashes) {
			bui.append(hash).append(""\n"");
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/33fd5ffe33b8817cd030008d46874fc89167a8d6
94d927648f91aaabd9c909657db2663bc49a7d41,GeoHashBoundingBoxSearch.java,expandSearch,"	private void expandSearch(GeoHash centerHash, BoundingBox bbox) {
		assert centerHash.getBoundingBox().intersects(bbox) : ""center hash must at least intersect the bounding box!"";
		searchHashes.add(centerHash);

		for (GeoHash adjacent : centerHash.getAdjacent()) {
			BoundingBox adjacentBox = adjacent.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/94d927648f91aaabd9c909657db2663bc49a7d41
94d927648f91aaabd9c909657db2663bc49a7d41,GeoHashBoundingBoxSearch.java,hashFits,"	private boolean hashFits(GeoHash hash, BoundingBox bbox) {
		return hash.contains(bbox.getUpperLeft()) && hash.contains(bbox.getLowerRight());
	}",https://www.github.com/kungfoo/geohash-java/commit/94d927648f91aaabd9c909657db2663bc49a7d41
94d927648f91aaabd9c909657db2663bc49a7d41,GeoHashBoundingBoxSearch.java,getSearchHashes,"	public List<GeoHash> getSearchHashes() {
		return searchHashes;
	}",https://www.github.com/kungfoo/geohash-java/commit/94d927648f91aaabd9c909657db2663bc49a7d41
94d927648f91aaabd9c909657db2663bc49a7d41,GeoHashBoundingBoxSearch.java,toString,"	public String toString() {
		StringBuilder bui = new StringBuilder();
		for (GeoHash hash : searchHashes) {
			bui.append(hash).append(""\n"");
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/94d927648f91aaabd9c909657db2663bc49a7d41
d737fb5fd339fbefd4477975c80eee176709dcc1,GeoHashBoundingBoxSearch.java,expandSearch,"	private void expandSearch(GeoHash centerHash, BoundingBox bbox) {
		assert centerHash.getBoundingBox().intersects(bbox) : ""center hash must at least intersect the bounding box!"";
		searchHashes.add(centerHash);

		for (GeoHash adjacent : centerHash.getAdjacent()) {
			BoundingBox adjacentBox = adjacent.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/d737fb5fd339fbefd4477975c80eee176709dcc1
d737fb5fd339fbefd4477975c80eee176709dcc1,GeoHashBoundingBoxSearch.java,hashFits,"	private boolean hashFits(GeoHash hash, BoundingBox bbox) {
		return hash.contains(bbox.getUpperLeft()) && hash.contains(bbox.getLowerRight());
	}",https://www.github.com/kungfoo/geohash-java/commit/d737fb5fd339fbefd4477975c80eee176709dcc1
d737fb5fd339fbefd4477975c80eee176709dcc1,GeoHashBoundingBoxSearch.java,getSearchHashes,"	public List<GeoHash> getSearchHashes() {
		return searchHashes;
	}",https://www.github.com/kungfoo/geohash-java/commit/d737fb5fd339fbefd4477975c80eee176709dcc1
d737fb5fd339fbefd4477975c80eee176709dcc1,GeoHashBoundingBoxSearch.java,toString,"	public String toString() {
		StringBuilder bui = new StringBuilder();
		for (GeoHash hash : searchHashes) {
			bui.append(hash).append(""\n"");
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/d737fb5fd339fbefd4477975c80eee176709dcc1
e95264cf18961b2036d4c44b6953adf183e8e160,GeoHashBoundingBoxSearch.java,expandSearch,"	private void expandSearch(GeoHash centerHash, BoundingBox bbox) {
		searchHashes.add(centerHash);

		for (GeoHash adjacent : centerHash.getAdjacent()) {
			BoundingBox adjacentBox = adjacent.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/e95264cf18961b2036d4c44b6953adf183e8e160
e95264cf18961b2036d4c44b6953adf183e8e160,GeoHashBoundingBoxSearch.java,hashFits,"	private boolean hashFits(GeoHash hash, BoundingBox bbox) {
		return hash.contains(bbox.getUpperLeft()) && hash.contains(bbox.getLowerRight());
	}",https://www.github.com/kungfoo/geohash-java/commit/e95264cf18961b2036d4c44b6953adf183e8e160
e95264cf18961b2036d4c44b6953adf183e8e160,GeoHashBoundingBoxSearch.java,getSearchHashes,"	public List<GeoHash> getSearchHashes() {
		return searchHashes;
	}",https://www.github.com/kungfoo/geohash-java/commit/e95264cf18961b2036d4c44b6953adf183e8e160
e95264cf18961b2036d4c44b6953adf183e8e160,GeoHashBoundingBoxSearch.java,toString,"	public String toString() {
		StringBuilder bui = new StringBuilder();
		for (GeoHash hash : searchHashes) {
			bui.append(hash).append(""\n"");
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/e95264cf18961b2036d4c44b6953adf183e8e160
5f6737b16121c43dbdce3d17ff92cca3cc69a8a1,BoundingBox.java,getUpperLeft,"	public WGS84Point getUpperLeft() {
		return new WGS84Point(maxLat, minLon);
	}",https://www.github.com/kungfoo/geohash-java/commit/5f6737b16121c43dbdce3d17ff92cca3cc69a8a1
5f6737b16121c43dbdce3d17ff92cca3cc69a8a1,BoundingBox.java,getLowerRight,"	public WGS84Point getLowerRight() {
		return new WGS84Point(minLat, maxLon);
	}",https://www.github.com/kungfoo/geohash-java/commit/5f6737b16121c43dbdce3d17ff92cca3cc69a8a1
5f6737b16121c43dbdce3d17ff92cca3cc69a8a1,BoundingBox.java,getLatitudeSize,"	public double getLatitudeSize() {
		return maxLat - minLat;
	}",https://www.github.com/kungfoo/geohash-java/commit/5f6737b16121c43dbdce3d17ff92cca3cc69a8a1
5f6737b16121c43dbdce3d17ff92cca3cc69a8a1,BoundingBox.java,getLongitudeSize,"	public double getLongitudeSize() {
		return maxLon - minLon;
	}",https://www.github.com/kungfoo/geohash-java/commit/5f6737b16121c43dbdce3d17ff92cca3cc69a8a1
5f6737b16121c43dbdce3d17ff92cca3cc69a8a1,BoundingBox.java,equals,"	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj instanceof BoundingBox) {
			BoundingBox that = (BoundingBox) obj;",https://www.github.com/kungfoo/geohash-java/commit/5f6737b16121c43dbdce3d17ff92cca3cc69a8a1
5f6737b16121c43dbdce3d17ff92cca3cc69a8a1,BoundingBox.java,hashCode,"	public int hashCode() {
		int result = 17;
		result = 37 * result + hashCode(minLat);
		result = 37 * result + hashCode(maxLat);
		result = 37 * result + hashCode(minLon);
		result = 37 * result + hashCode(maxLon);
		return result;
	}",https://www.github.com/kungfoo/geohash-java/commit/5f6737b16121c43dbdce3d17ff92cca3cc69a8a1
5f6737b16121c43dbdce3d17ff92cca3cc69a8a1,BoundingBox.java,hashCode,"	private static int hashCode(double x) {
		long f = Double.doubleToLongBits(x);
		return (int) (f ^ (f >>> 32));
	}",https://www.github.com/kungfoo/geohash-java/commit/5f6737b16121c43dbdce3d17ff92cca3cc69a8a1
5f6737b16121c43dbdce3d17ff92cca3cc69a8a1,BoundingBox.java,contains,"	public boolean contains(WGS84Point point) {
		return (point.getLatitude() >= minLat) && (point.getLongitude() >= minLon) && (point.getLatitude() <= maxLat)
				&& (point.getLongitude() <= maxLon);",https://www.github.com/kungfoo/geohash-java/commit/5f6737b16121c43dbdce3d17ff92cca3cc69a8a1
5f6737b16121c43dbdce3d17ff92cca3cc69a8a1,BoundingBox.java,intersects,"	public boolean intersects(BoundingBox other) {
		return !(other.minLon > maxLon || other.maxLon < minLon || other.minLat > maxLat || other.maxLat < minLat);
	}",https://www.github.com/kungfoo/geohash-java/commit/5f6737b16121c43dbdce3d17ff92cca3cc69a8a1
5f6737b16121c43dbdce3d17ff92cca3cc69a8a1,BoundingBox.java,toString,"	public String toString() {
		return getUpperLeft() + "" -> "" + getLowerRight();
	}",https://www.github.com/kungfoo/geohash-java/commit/5f6737b16121c43dbdce3d17ff92cca3cc69a8a1
5f6737b16121c43dbdce3d17ff92cca3cc69a8a1,BoundingBox.java,getCenterPoint,"	public WGS84Point getCenterPoint() {
		double centerLatitude = (minLat + maxLat) / 2;
		double centerLongitude = (minLon + maxLon) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/5f6737b16121c43dbdce3d17ff92cca3cc69a8a1
5f6737b16121c43dbdce3d17ff92cca3cc69a8a1,WGS84Point.java,getLatitude,"	public double getLatitude() {
		return latitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/5f6737b16121c43dbdce3d17ff92cca3cc69a8a1
5f6737b16121c43dbdce3d17ff92cca3cc69a8a1,WGS84Point.java,getLongitude,"	public double getLongitude() {
		return longitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/5f6737b16121c43dbdce3d17ff92cca3cc69a8a1
5f6737b16121c43dbdce3d17ff92cca3cc69a8a1,WGS84Point.java,toString,"	public String toString() {
		return String.format(""("" + latitude + "","" + longitude + "")"");
	}",https://www.github.com/kungfoo/geohash-java/commit/5f6737b16121c43dbdce3d17ff92cca3cc69a8a1
5f6737b16121c43dbdce3d17ff92cca3cc69a8a1,WGS84Point.java,equals,"	public boolean equals(Object obj) {
		if (obj instanceof WGS84Point) {
			WGS84Point other = (WGS84Point) obj;
			return latitude == other.latitude && longitude == other.longitude;
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/5f6737b16121c43dbdce3d17ff92cca3cc69a8a1
5f6737b16121c43dbdce3d17ff92cca3cc69a8a1,WGS84Point.java,hashCode,"	public int hashCode() {
		int result = 42;
		long latBits = Double.doubleToLongBits(latitude);
		long lonBits = Double.doubleToLongBits(longitude);
		result = 31 * result + (int) (latBits ^ (latBits >>> 32));
		result = 31 * result + (int) (lonBits ^ (lonBits >>> 32));
		return result;
	}",https://www.github.com/kungfoo/geohash-java/commit/5f6737b16121c43dbdce3d17ff92cca3cc69a8a1
5f6737b16121c43dbdce3d17ff92cca3cc69a8a1,VincentyGeodesy.java,moveInDirection,"	public static WGS84Point moveInDirection(WGS84Point point, double bearingInDegrees, double distanceInMeters) {

		if (bearingInDegrees < 0 || bearingInDegrees > 360) {
			throw new IllegalArgumentException(""direction must be in (0,360)"");
		}

		double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; // WGS-84
		// ellipsiod
		double alpha1 = bearingInDegrees * degToRad;
		double sinAlpha1 = Math.sin(alpha1), cosAlpha1 = Math.cos(alpha1);

		double tanU1 = (1 - f) * Math.tan(point.getLatitude() * degToRad);
		double cosU1 = 1 / Math.sqrt((1 + tanU1 * tanU1)), sinU1 = tanU1 * cosU1;
		double sigma1 = Math.atan2(tanU1, cosAlpha1);
		double sinAlpha = cosU1 * sinAlpha1;
		double cosSqAlpha = 1 - sinAlpha * sinAlpha;
		double uSq = cosSqAlpha * (a * a - b * b) / (b * b);
		double A = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));
		double B = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));

		double sinSigma = 0, cosSigma = 0, cos2SigmaM = 0;
		double sigma = distanceInMeters / (b * A), sigmaP = 2 * Math.PI;
		while (Math.abs(sigma - sigmaP) > 1e-12) {
			cos2SigmaM = Math.cos(2 * sigma1 + sigma);
			sinSigma = Math.sin(sigma);
			cosSigma = Math.cos(sigma);
			double deltaSigma = B
					* sinSigma
					* (cos2SigmaM + B
							/ 4
							* (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM
									* (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));
			sigmaP = sigma;
			sigma = distanceInMeters / (b * A) + deltaSigma;
		}

		double tmp = sinU1 * sinSigma - cosU1 * cosSigma * cosAlpha1;
		double lat2 = Math.atan2(sinU1 * cosSigma + cosU1 * sinSigma * cosAlpha1, (1 - f)
				* Math.sqrt(sinAlpha * sinAlpha + tmp * tmp));
		double lambda = Math.atan2(sinSigma * sinAlpha1, cosU1 * cosSigma - sinU1 * sinSigma * cosAlpha1);
		double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
		double L = lambda - (1 - C) * f * sinAlpha
				* (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));

		return new WGS84Point(lat2 / degToRad, point.getLongitude() + L / degToRad);
	}",https://www.github.com/kungfoo/geohash-java/commit/5f6737b16121c43dbdce3d17ff92cca3cc69a8a1
5f6737b16121c43dbdce3d17ff92cca3cc69a8a1,VincentyGeodesy.java,distanceInMeters,"	public static double distanceInMeters(WGS84Point foo, WGS84Point bar) {
		double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; // WGS-84
		// ellipsiod
		double L = (bar.getLongitude() - foo.getLongitude()) * degToRad;
		double U1 = Math.atan((1 - f) * Math.tan(foo.getLatitude() * degToRad));
		double U2 = Math.atan((1 - f) * Math.tan(bar.getLatitude() * degToRad));
		double sinU1 = Math.sin(U1), cosU1 = Math.cos(U1);
		double sinU2 = Math.sin(U2), cosU2 = Math.cos(U2);

		double cosSqAlpha, sinSigma, cos2SigmaM, cosSigma, sigma;

		double lambda = L, lambdaP, iterLimit = 20;
		do {
			double sinLambda = Math.sin(lambda), cosLambda = Math.cos(lambda);
			sinSigma = Math.sqrt((cosU2 * sinLambda) * (cosU2 * sinLambda)
					+ (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda) * (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda));
			if (sinSigma == 0)
				return 0; // co-incident points
			cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda;
			sigma = Math.atan2(sinSigma, cosSigma);
			double sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma;
			cosSqAlpha = 1 - sinAlpha * sinAlpha;
			cos2SigmaM = cosSigma - 2 * sinU1 * sinU2 / cosSqAlpha;
			if (cos2SigmaM == Double.NaN)
				cos2SigmaM = 0; // equatorial line: cosSqAlpha=0 (�6)
			double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
			lambdaP = lambda;
			lambda = L + (1 - C) * f * sinAlpha
					* (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));
		} while (Math.abs(lambda - lambdaP) > EPSILON && --iterLimit > 0);

		if (iterLimit == 0)
			return Double.NaN;
		double uSquared = cosSqAlpha * (a * a - b * b) / (b * b);
		double A = 1 + uSquared / 16384 * (4096 + uSquared * (-768 + uSquared * (320 - 175 * uSquared)));
		double B = uSquared / 1024 * (256 + uSquared * (-128 + uSquared * (74 - 47 * uSquared)));
		double deltaSigma = B
				* sinSigma
				* (cos2SigmaM + B
						/ 4
						* (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM
								* (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));
		double s = b * A * (sigma - deltaSigma);

		return s;
	}",https://www.github.com/kungfoo/geohash-java/commit/5f6737b16121c43dbdce3d17ff92cca3cc69a8a1
5f6737b16121c43dbdce3d17ff92cca3cc69a8a1,WGS84PointTest.java,setUp,"	public void setUp() {
		a = new WGS84Point(47.2342, 15.7465465);
		b = new WGS84Point(a);
		c = new WGS84Point(-47.234, b.getLongitude());
		d = new WGS84Point(-32.9687253, 12.42334242);
	}",https://www.github.com/kungfoo/geohash-java/commit/5f6737b16121c43dbdce3d17ff92cca3cc69a8a1
5f6737b16121c43dbdce3d17ff92cca3cc69a8a1,WGS84PointTest.java,testVincenty,"	public void testVincenty() {
		WGS84Point startPoint = new WGS84Point(40, 40);

		int distanceInMeters = 10000;
		WGS84Point result = VincentyGeodesy.moveInDirection(startPoint, 120,
				distanceInMeters);
		Assert.assertEquals(40.10134882, result.getLongitude(), DELTA);
		Assert.assertEquals(39.9549245, result.getLatitude(), DELTA);

		Assert.assertEquals(distanceInMeters, VincentyGeodesy.distanceInMeters(
				startPoint, result), DELTA);
		
		
		WGS84Point p1 = new WGS84Point(1,1);
		int tenThousandKilometers = 10000000;
		WGS84Point p2 = VincentyGeodesy.moveInDirection(p1, 270, tenThousandKilometers);
		System.out.println(p2);
		Assert.assertEquals(tenThousandKilometers, VincentyGeodesy.distanceInMeters(p1, p2), DELTA);
	}",https://www.github.com/kungfoo/geohash-java/commit/5f6737b16121c43dbdce3d17ff92cca3cc69a8a1
5f6737b16121c43dbdce3d17ff92cca3cc69a8a1,WGS84PointTest.java,testEquals,"	public void testEquals() {
		assertEquals(a, a);
		assertEquals(a, b);
		assertEquals(b, a);
		assertNotSame(a, b);
		
		assertFalse(a.equals(c));
		assertFalse(c.equals(a));
		assertFalse(d.equals(c));
		assertFalse(d.equals(a));
		assertFalse(d.equals(new Integer(10)));
	}",https://www.github.com/kungfoo/geohash-java/commit/5f6737b16121c43dbdce3d17ff92cca3cc69a8a1
5f6737b16121c43dbdce3d17ff92cca3cc69a8a1,WGS84PointTest.java,testHashCode,"	public void testHashCode() {
		assertEquals(a.hashCode(), a.hashCode());
		assertEquals(a.hashCode(), b.hashCode());
		assertFalse(a.hashCode() == c.hashCode());
		assertFalse(d.hashCode() == c.hashCode());
		assertFalse(d.hashCode() == new Integer(10).hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/5f6737b16121c43dbdce3d17ff92cca3cc69a8a1
5f6737b16121c43dbdce3d17ff92cca3cc69a8a1,WGS84PointTest.java,testRangeCheck,"	public void testRangeCheck() {
		WGS84Point p = new WGS84Point(180, 240);
	}",https://www.github.com/kungfoo/geohash-java/commit/5f6737b16121c43dbdce3d17ff92cca3cc69a8a1
6f96ce0e75e9745f922c68b8787227000f801a71,GeoHashBoundingBoxQuery.java,expandSearch,"	private void expandSearch(GeoHash centerHash, BoundingBox bbox) {
		searchHashes.add(centerHash);

		for (GeoHash adjacent : centerHash.getAdjacent()) {
			BoundingBox adjacentBox = adjacent.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/6f96ce0e75e9745f922c68b8787227000f801a71
6f96ce0e75e9745f922c68b8787227000f801a71,GeoHashBoundingBoxQuery.java,hashFits,"	private boolean hashFits(GeoHash hash, BoundingBox bbox) {
		return hash.contains(bbox.getUpperLeft()) && hash.contains(bbox.getLowerRight());
	}",https://www.github.com/kungfoo/geohash-java/commit/6f96ce0e75e9745f922c68b8787227000f801a71
6f96ce0e75e9745f922c68b8787227000f801a71,GeoHashBoundingBoxQuery.java,contains,"	public boolean contains(GeoHash hash) {
		for (GeoHash searchHash : searchHashes) {
			if (hash.within(searchHash))
				return true;
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/6f96ce0e75e9745f922c68b8787227000f801a71
6f96ce0e75e9745f922c68b8787227000f801a71,GeoHashBoundingBoxQuery.java,getSearchHashes,"	public List<GeoHash> getSearchHashes() {
		return searchHashes;
	}",https://www.github.com/kungfoo/geohash-java/commit/6f96ce0e75e9745f922c68b8787227000f801a71
6f96ce0e75e9745f922c68b8787227000f801a71,GeoHashBoundingBoxQuery.java,toString,"	public String toString() {
		StringBuilder bui = new StringBuilder();
		for (GeoHash hash : searchHashes) {
			bui.append(hash).append(""\n"");
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/6f96ce0e75e9745f922c68b8787227000f801a71
6f96ce0e75e9745f922c68b8787227000f801a71,GeoHashCircleQuery.java,contains,"	public boolean contains(GeoHash hash) {
		return query.contains(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/6f96ce0e75e9745f922c68b8787227000f801a71
6f96ce0e75e9745f922c68b8787227000f801a71,GeoHashCircleQuery.java,getSearchHashes,"	public List<GeoHash> getSearchHashes() {
		return query.getSearchHashes();
	}",https://www.github.com/kungfoo/geohash-java/commit/6f96ce0e75e9745f922c68b8787227000f801a71
6f96ce0e75e9745f922c68b8787227000f801a71,GeoHashQuery.java,contains,"	public abstract boolean contains(GeoHash hash);

	/**
	 * should return the hashes that re required to perform this search.
	 */
	public abstract List<GeoHash> getSearchHashes();

}",https://www.github.com/kungfoo/geohash-java/commit/6f96ce0e75e9745f922c68b8787227000f801a71
6f96ce0e75e9745f922c68b8787227000f801a71,GeoHashQuery.java,getSearchHashes,"	public abstract List<GeoHash> getSearchHashes();

}",https://www.github.com/kungfoo/geohash-java/commit/6f96ce0e75e9745f922c68b8787227000f801a71
6f96ce0e75e9745f922c68b8787227000f801a71,GeoHashBoundingBoxSearchTest.java,testSeveralBoundingBoxes,"	public void testSeveralBoundingBoxes() {
		checkSearchYieldsCorrectNumberOfHashes(40.2090980098, 40.21982983232432, -22.523432424324,-22.494234232442);
		checkSearchYieldsCorrectNumberOfHashes( 41.23452234, 40.09872762,31.23432, 30.0113312322);
		checkSearchYieldsCorrectHashes( 47.447907, 47.300200,8.760941,  8.471276, ""u0qj"");
		checkSearchYieldsCorrectHashes(47.157502, 47.329727, 8.562244, 8.859215, ""u0qj"", ""u0qm"", ""u0qh"", ""u0qk"");
	}",https://www.github.com/kungfoo/geohash-java/commit/6f96ce0e75e9745f922c68b8787227000f801a71
6f96ce0e75e9745f922c68b8787227000f801a71,GeoHashBoundingBoxSearchTest.java,checkSearchYieldsCorrectNumberOfHashes,"	private void checkSearchYieldsCorrectNumberOfHashes(double minLat, double maxLat, double minLon, double maxLon) {
		GeoHashQuery search = new GeoHashBoundingBoxQuery(new BoundingBox(minLat, maxLat, minLon, maxLon));
		assertRightNumberOfSearchHashes(search);
	}",https://www.github.com/kungfoo/geohash-java/commit/6f96ce0e75e9745f922c68b8787227000f801a71
6f96ce0e75e9745f922c68b8787227000f801a71,GeoHashBoundingBoxSearchTest.java,checkSearchYieldsCorrectHashes,"	private void checkSearchYieldsCorrectHashes(double minLat, double maxLat, double minLon, double maxLon,
			String... hashes) {
		GeoHashQuery search = new GeoHashBoundingBoxQuery(new BoundingBox(minLat,  maxLat,minLon, maxLon));
		assertEquals(hashes.length, search.getSearchHashes().size());
		for (String expectedHash : hashes) {
			assertTrue(""search hashes should contain "" + expectedHash + "" is: "" + search, search.getSearchHashes().contains(",https://www.github.com/kungfoo/geohash-java/commit/6f96ce0e75e9745f922c68b8787227000f801a71
6f96ce0e75e9745f922c68b8787227000f801a71,GeoHashBoundingBoxSearchTest.java,assertRightNumberOfSearchHashes,"	private void assertRightNumberOfSearchHashes(GeoHashQuery search) {
		int size = search.getSearchHashes().size();
		assertTrue(size == 1 || size == 2 || size == 4);
	}",https://www.github.com/kungfoo/geohash-java/commit/6f96ce0e75e9745f922c68b8787227000f801a71
6f96ce0e75e9745f922c68b8787227000f801a71,WGS84PointTest.java,setUp,"	public void setUp() {
		a = new WGS84Point(47.2342, 15.7465465);
		b = new WGS84Point(a);
		c = new WGS84Point(-47.234, b.getLongitude());
		d = new WGS84Point(-32.9687253, 12.42334242);
	}",https://www.github.com/kungfoo/geohash-java/commit/6f96ce0e75e9745f922c68b8787227000f801a71
6f96ce0e75e9745f922c68b8787227000f801a71,WGS84PointTest.java,testVincenty,"	public void testVincenty() {
		WGS84Point startPoint = new WGS84Point(40, 40);

		int distanceInMeters = 10000;
		WGS84Point result = VincentyGeodesy.moveInDirection(startPoint, 120,
				distanceInMeters);
		Assert.assertEquals(40.10134882, result.getLongitude(), DELTA);
		Assert.assertEquals(39.9549245, result.getLatitude(), DELTA);

		Assert.assertEquals(distanceInMeters, VincentyGeodesy.distanceInMeters(
				startPoint, result), DELTA);
		
		
		WGS84Point p1 = new WGS84Point(1,1);
		int tenThousandKilometers = 10000000;
		WGS84Point p2 = VincentyGeodesy.moveInDirection(p1, 270, tenThousandKilometers);
		System.out.println(p2);
		Assert.assertEquals(tenThousandKilometers, VincentyGeodesy.distanceInMeters(p1, p2), DELTA);
	}",https://www.github.com/kungfoo/geohash-java/commit/6f96ce0e75e9745f922c68b8787227000f801a71
6f96ce0e75e9745f922c68b8787227000f801a71,WGS84PointTest.java,testEquals,"	public void testEquals() {
		assertEquals(a, a);
		assertEquals(a, b);
		assertEquals(b, a);
		assertNotSame(a, b);
		
		assertFalse(a.equals(c));
		assertFalse(c.equals(a));
		assertFalse(d.equals(c));
		assertFalse(d.equals(a));
		assertFalse(d.equals(new Integer(10)));
	}",https://www.github.com/kungfoo/geohash-java/commit/6f96ce0e75e9745f922c68b8787227000f801a71
6f96ce0e75e9745f922c68b8787227000f801a71,WGS84PointTest.java,testHashCode,"	public void testHashCode() {
		assertEquals(a.hashCode(), a.hashCode());
		assertEquals(a.hashCode(), b.hashCode());
		assertFalse(a.hashCode() == c.hashCode());
		assertFalse(d.hashCode() == c.hashCode());
		assertFalse(d.hashCode() == new Integer(10).hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/6f96ce0e75e9745f922c68b8787227000f801a71
6f96ce0e75e9745f922c68b8787227000f801a71,WGS84PointTest.java,testRangeCheck,"	public void testRangeCheck() {
		new WGS84Point(180, 240);
	}",https://www.github.com/kungfoo/geohash-java/commit/6f96ce0e75e9745f922c68b8787227000f801a71
7cfd3c1d57e0d0f674ece977e733409a3914218a,GeoHashSizeTableTest.java,testDLat,"	public void testDLat() {
		assertDLatIs(180d, 0);
		assertDLatIs(180d, 1);
		assertDLatIs(90d, 2);
		assertDLatIs(0.3515625, 18);
		assertDLatIs(0.3515625, 19);
	}",https://www.github.com/kungfoo/geohash-java/commit/7cfd3c1d57e0d0f674ece977e733409a3914218a
7cfd3c1d57e0d0f674ece977e733409a3914218a,GeoHashSizeTableTest.java,assertDLatIs,"	private void assertDLatIs(double d, int i) {
		assertEquals(d, GeoHashSizeTable.dLat(i), 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/7cfd3c1d57e0d0f674ece977e733409a3914218a
7cfd3c1d57e0d0f674ece977e733409a3914218a,GeoHashSizeTableTest.java,testDLon,"	public void testDLon() {
		assertDLonIs(360, 0);
		assertDLonIs(180, 1);
		assertDLonIs(0.0439453125, 25);
		assertDLonIs(0.0439453125, 26);
	}",https://www.github.com/kungfoo/geohash-java/commit/7cfd3c1d57e0d0f674ece977e733409a3914218a
7cfd3c1d57e0d0f674ece977e733409a3914218a,GeoHashSizeTableTest.java,assertDLonIs,"	private void assertDLonIs(double d, int i) {
		assertEquals(d, GeoHashSizeTable.dLon(i), 1 - 128);
	}",https://www.github.com/kungfoo/geohash-java/commit/7cfd3c1d57e0d0f674ece977e733409a3914218a
7cfd3c1d57e0d0f674ece977e733409a3914218a,GeoHashSizeTableTest.java,generate,"		public BoundingBox generate(int bits);

		/**
		 * return the number of expected bits.
		 */
		public int getExpectedBits(int bits);
	}

	/**
	 * the entire box is a little too small, thus it must fit nicely into the
	 * hash.
	 */
	static class ALittleTooSmallVerifier implements BoundingBoxSizeTableVerifier {
		@Override
		public BoundingBox generate(int bits) {
			// make the bounding box a little smaller than dLat/dLon
			double dLat = GeoHashSizeTable.dLat(bits) - DELTA;
			double dLon = GeoHashSizeTable.dLon(bits) - DELTA;
			return new BoundingBox(45 - dLat, 45, 30, 30 - dLon);
		}

		@Override
		public int getExpectedBits(int bits) {
			return bits;
		}
	}

	/**
	 * if both lat and lon are a little too large, we must use a bigger hash,
	 * i.e. less bits.
	 */
	static class BothALittleTooLargeVerifier implements BoundingBoxSizeTableVerifier {
		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);
			return new BoundingBox(0, dLat + DELTA, 0, dLon + DELTA);
		}

		@Override
		public int getExpectedBits(int bits) {
			return bits - 2;
		}
	}

	/**
	 * depending on whether we're currently at an even or odd nuber of bits, one
	 * or two bits have to be removed.
	 */
	static class OnlyOneALittleTooLargeVerifier implements BoundingBoxSizeTableVerifier {
		private Random rand = new Random();
		private boolean latitudeAffected;

		@Override
		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);

			if (latitudeAffected = rand.nextBoolean()) {
				dLat += DELTA;
			} else {
				dLon += DELTA;
			}
			return new BoundingBox(0, dLat, 0, dLon);
		}

		@Override
		public int getExpectedBits(int bits) {
			if (latitudeAffected) {
				if (bits % 2 != 0) {
					return bits - 2;
				} else {
					return bits - 1;
				}
			} else {
				if (bits % 2 != 0) {
					return bits - 1;
				} else {
					return bits - 2;
				}
			}
		}
	}

	@Test
	public void testKnownSmallerBoundingBoxSizes() {
		checkWithGenerator(new ALittleTooSmallVerifier());
	}

	@Test
	public void testKnownLargerBoundingBoxSizes() {
		checkWithGenerator(new BothALittleTooLargeVerifier());
	}

	@Test
	public void testKnownOneBitLargerBoxSizes() {
		checkWithGenerator(new OnlyOneALittleTooLargeVerifier());
	}

	private void checkWithGenerator(BoundingBoxSizeTableVerifier generator) {
		for (int bits = 4; bits < 64; bits++) {
			BoundingBox bbox = generator.generate(bits);
			assertEquals(generator.getExpectedBits(bits), GeoHashSizeTable.numberOfBitsForOverlappingGeoHash(bbox));
		}
	}
}",https://www.github.com/kungfoo/geohash-java/commit/7cfd3c1d57e0d0f674ece977e733409a3914218a
7cfd3c1d57e0d0f674ece977e733409a3914218a,GeoHashSizeTableTest.java,getExpectedBits,"		public int getExpectedBits(int bits);
	}

	/**
	 * the entire box is a little too small, thus it must fit nicely into the
	 * hash.
	 */
	static class ALittleTooSmallVerifier implements BoundingBoxSizeTableVerifier {
		@Override
		public BoundingBox generate(int bits) {
			// make the bounding box a little smaller than dLat/dLon
			double dLat = GeoHashSizeTable.dLat(bits) - DELTA;
			double dLon = GeoHashSizeTable.dLon(bits) - DELTA;
			return new BoundingBox(45 - dLat, 45, 30, 30 - dLon);
		}

		@Override
		public int getExpectedBits(int bits) {
			return bits;
		}
	}

	/**
	 * if both lat and lon are a little too large, we must use a bigger hash,
	 * i.e. less bits.
	 */
	static class BothALittleTooLargeVerifier implements BoundingBoxSizeTableVerifier {
		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);
			return new BoundingBox(0, dLat + DELTA, 0, dLon + DELTA);
		}

		@Override
		public int getExpectedBits(int bits) {
			return bits - 2;
		}
	}

	/**
	 * depending on whether we're currently at an even or odd nuber of bits, one
	 * or two bits have to be removed.
	 */
	static class OnlyOneALittleTooLargeVerifier implements BoundingBoxSizeTableVerifier {
		private Random rand = new Random();
		private boolean latitudeAffected;

		@Override
		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);

			if (latitudeAffected = rand.nextBoolean()) {
				dLat += DELTA;
			} else {
				dLon += DELTA;
			}
			return new BoundingBox(0, dLat, 0, dLon);
		}

		@Override
		public int getExpectedBits(int bits) {
			if (latitudeAffected) {
				if (bits % 2 != 0) {
					return bits - 2;
				} else {
					return bits - 1;
				}
			} else {
				if (bits % 2 != 0) {
					return bits - 1;
				} else {
					return bits - 2;
				}
			}
		}
	}

	@Test
	public void testKnownSmallerBoundingBoxSizes() {
		checkWithGenerator(new ALittleTooSmallVerifier());
	}

	@Test
	public void testKnownLargerBoundingBoxSizes() {
		checkWithGenerator(new BothALittleTooLargeVerifier());
	}

	@Test
	public void testKnownOneBitLargerBoxSizes() {
		checkWithGenerator(new OnlyOneALittleTooLargeVerifier());
	}

	private void checkWithGenerator(BoundingBoxSizeTableVerifier generator) {
		for (int bits = 4; bits < 64; bits++) {
			BoundingBox bbox = generator.generate(bits);
			assertEquals(generator.getExpectedBits(bits), GeoHashSizeTable.numberOfBitsForOverlappingGeoHash(bbox));
		}
	}
}",https://www.github.com/kungfoo/geohash-java/commit/7cfd3c1d57e0d0f674ece977e733409a3914218a
7cfd3c1d57e0d0f674ece977e733409a3914218a,GeoHashSizeTableTest.java,generate,"		public BoundingBox generate(int bits) {
			// make the bounding box a little smaller than dLat/dLon
			double dLat = GeoHashSizeTable.dLat(bits) - DELTA;
			double dLon = GeoHashSizeTable.dLon(bits) - DELTA;
			return new BoundingBox(45 - dLat, 45, 30, 30 - dLon);
		}",https://www.github.com/kungfoo/geohash-java/commit/7cfd3c1d57e0d0f674ece977e733409a3914218a
7cfd3c1d57e0d0f674ece977e733409a3914218a,GeoHashSizeTableTest.java,getExpectedBits,"		public int getExpectedBits(int bits) {
			return bits;
		}",https://www.github.com/kungfoo/geohash-java/commit/7cfd3c1d57e0d0f674ece977e733409a3914218a
7cfd3c1d57e0d0f674ece977e733409a3914218a,GeoHashSizeTableTest.java,generate,"		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);
			return new BoundingBox(0, dLat + DELTA, 0, dLon + DELTA);
		}",https://www.github.com/kungfoo/geohash-java/commit/7cfd3c1d57e0d0f674ece977e733409a3914218a
7cfd3c1d57e0d0f674ece977e733409a3914218a,GeoHashSizeTableTest.java,getExpectedBits,"		public int getExpectedBits(int bits) {
			return bits - 2;
		}",https://www.github.com/kungfoo/geohash-java/commit/7cfd3c1d57e0d0f674ece977e733409a3914218a
7cfd3c1d57e0d0f674ece977e733409a3914218a,GeoHashSizeTableTest.java,generate,"		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);

			if (latitudeAffected = rand.nextBoolean()) {
				dLat += DELTA;
			} else {
				dLon += DELTA;
			}
			return new BoundingBox(0, dLat, 0, dLon);
		}",https://www.github.com/kungfoo/geohash-java/commit/7cfd3c1d57e0d0f674ece977e733409a3914218a
7cfd3c1d57e0d0f674ece977e733409a3914218a,GeoHashSizeTableTest.java,getExpectedBits,"		public int getExpectedBits(int bits) {
			if (latitudeAffected) {
				if (bits % 2 != 0) {",https://www.github.com/kungfoo/geohash-java/commit/7cfd3c1d57e0d0f674ece977e733409a3914218a
7cfd3c1d57e0d0f674ece977e733409a3914218a,GeoHashSizeTableTest.java,testKnownSmallerBoundingBoxSizes,"	public void testKnownSmallerBoundingBoxSizes() {
		checkWithGenerator(new ALittleTooSmallVerifier());
	}",https://www.github.com/kungfoo/geohash-java/commit/7cfd3c1d57e0d0f674ece977e733409a3914218a
7cfd3c1d57e0d0f674ece977e733409a3914218a,GeoHashSizeTableTest.java,testKnownLargerBoundingBoxSizes,"	public void testKnownLargerBoundingBoxSizes() {
		checkWithGenerator(new BothALittleTooLargeVerifier());
	}",https://www.github.com/kungfoo/geohash-java/commit/7cfd3c1d57e0d0f674ece977e733409a3914218a
7cfd3c1d57e0d0f674ece977e733409a3914218a,GeoHashSizeTableTest.java,testKnownOneBitLargerBoxSizes,"	public void testKnownOneBitLargerBoxSizes() {
		checkWithGenerator(new OnlyOneALittleTooLargeVerifier());
	}",https://www.github.com/kungfoo/geohash-java/commit/7cfd3c1d57e0d0f674ece977e733409a3914218a
7cfd3c1d57e0d0f674ece977e733409a3914218a,GeoHashSizeTableTest.java,checkWithGenerator,"	private void checkWithGenerator(BoundingBoxSizeTableVerifier generator) {
		for (int bits = 4; bits < 64; bits++) {
			BoundingBox bbox = generator.generate(bits);",https://www.github.com/kungfoo/geohash-java/commit/7cfd3c1d57e0d0f674ece977e733409a3914218a
0471960ba6c1aa045a96d1146d2b2e5175a47990,GeoHashSizeTableTest.java,testDLat,"	public void testDLat() {
		assertDLatIs(180d, 0);
		assertDLatIs(180d, 1);
		assertDLatIs(90d, 2);
		assertDLatIs(0.3515625, 18);
		assertDLatIs(0.3515625, 19);
	}",https://www.github.com/kungfoo/geohash-java/commit/0471960ba6c1aa045a96d1146d2b2e5175a47990
0471960ba6c1aa045a96d1146d2b2e5175a47990,GeoHashSizeTableTest.java,assertDLatIs,"	private void assertDLatIs(double d, int i) {
		assertEquals(d, GeoHashSizeTable.dLat(i), 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/0471960ba6c1aa045a96d1146d2b2e5175a47990
0471960ba6c1aa045a96d1146d2b2e5175a47990,GeoHashSizeTableTest.java,testDLon,"	public void testDLon() {
		assertDLonIs(360, 0);
		assertDLonIs(180, 1);
		assertDLonIs(0.0439453125, 25);
		assertDLonIs(0.0439453125, 26);
	}",https://www.github.com/kungfoo/geohash-java/commit/0471960ba6c1aa045a96d1146d2b2e5175a47990
0471960ba6c1aa045a96d1146d2b2e5175a47990,GeoHashSizeTableTest.java,assertDLonIs,"	private void assertDLonIs(double d, int i) {
		assertEquals(d, GeoHashSizeTable.dLon(i), 1 - 128);
	}",https://www.github.com/kungfoo/geohash-java/commit/0471960ba6c1aa045a96d1146d2b2e5175a47990
0471960ba6c1aa045a96d1146d2b2e5175a47990,GeoHashSizeTableTest.java,generate,"		public BoundingBox generate(int bits);

		/**
		 * return the number of expected bits.
		 */
		public int getExpectedBits(int bits);
	}

	/**
	 * the entire box is a little too small, thus it must fit nicely into the
	 * hash.
	 */
	private static class ALittleTooSmallVerifier implements BoundingBoxSizeTableVerifier {
		public ALittleTooSmallVerifier() {
		}

		@Override
		public BoundingBox generate(int bits) {
			// make the bounding box a little smaller than dLat/dLon
			double dLat = GeoHashSizeTable.dLat(bits) - DELTA;
			double dLon = GeoHashSizeTable.dLon(bits) - DELTA;
			return new BoundingBox(45 - dLat, 45, 30, 30 - dLon);
		}

		@Override
		public int getExpectedBits(int bits) {
			return bits;
		}
	}

	/**
	 * if both lat and lon are a little too large, we must use a bigger hash,
	 * i.e. less bits.
	 */
	private static class BothALittleTooLargeVerifier implements BoundingBoxSizeTableVerifier {
		public BothALittleTooLargeVerifier() {
		}

		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);
			return new BoundingBox(0, dLat + DELTA, 0, dLon + DELTA);
		}

		@Override
		public int getExpectedBits(int bits) {
			return bits - 2;
		}
	}

	/**
	 * depending on whether we're currently at an even or odd nuber of bits, one
	 * or two bits have to be removed.
	 */
	private static class OnlyOneALittleTooLargeVerifier implements BoundingBoxSizeTableVerifier {
		public OnlyOneALittleTooLargeVerifier() {
		}
		
		private Random rand = new Random();
		private boolean latitudeAffected;

		@Override
		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);

			if (latitudeAffected = rand.nextBoolean()) {
				dLat += DELTA;
			} else {
				dLon += DELTA;
			}
			return new BoundingBox(0, dLat, 0, dLon);
		}

		@Override
		public int getExpectedBits(int bits) {
			if (latitudeAffected) {
				if (bits % 2 != 0) {
					return bits - 2;
				} else {
					return bits - 1;
				}
			} else {
				if (bits % 2 != 0) {
					return bits - 1;
				} else {
					return bits - 2;
				}
			}
		}
	}

	@Test
	public void testKnownSmallerBoundingBoxSizes() {
		checkWithGenerator(new ALittleTooSmallVerifier());
	}

	@Test
	public void testKnownLargerBoundingBoxSizes() {
		checkWithGenerator(new BothALittleTooLargeVerifier());
	}

	@Test
	public void testKnownOneBitLargerBoxSizes() {
		checkWithGenerator(new OnlyOneALittleTooLargeVerifier());
	}

	private void checkWithGenerator(BoundingBoxSizeTableVerifier generator) {
		for (int bits = 4; bits < 64; bits++) {
			BoundingBox bbox = generator.generate(bits);
			assertEquals(generator.getExpectedBits(bits), GeoHashSizeTable.numberOfBitsForOverlappingGeoHash(bbox));
		}
	}
}",https://www.github.com/kungfoo/geohash-java/commit/0471960ba6c1aa045a96d1146d2b2e5175a47990
0471960ba6c1aa045a96d1146d2b2e5175a47990,GeoHashSizeTableTest.java,getExpectedBits,"		public int getExpectedBits(int bits);
	}

	/**
	 * the entire box is a little too small, thus it must fit nicely into the
	 * hash.
	 */
	private static class ALittleTooSmallVerifier implements BoundingBoxSizeTableVerifier {
		public ALittleTooSmallVerifier() {
		}

		@Override
		public BoundingBox generate(int bits) {
			// make the bounding box a little smaller than dLat/dLon
			double dLat = GeoHashSizeTable.dLat(bits) - DELTA;
			double dLon = GeoHashSizeTable.dLon(bits) - DELTA;
			return new BoundingBox(45 - dLat, 45, 30, 30 - dLon);
		}

		@Override
		public int getExpectedBits(int bits) {
			return bits;
		}
	}

	/**
	 * if both lat and lon are a little too large, we must use a bigger hash,
	 * i.e. less bits.
	 */
	private static class BothALittleTooLargeVerifier implements BoundingBoxSizeTableVerifier {
		public BothALittleTooLargeVerifier() {
		}

		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);
			return new BoundingBox(0, dLat + DELTA, 0, dLon + DELTA);
		}

		@Override
		public int getExpectedBits(int bits) {
			return bits - 2;
		}
	}

	/**
	 * depending on whether we're currently at an even or odd nuber of bits, one
	 * or two bits have to be removed.
	 */
	private static class OnlyOneALittleTooLargeVerifier implements BoundingBoxSizeTableVerifier {
		public OnlyOneALittleTooLargeVerifier() {
		}
		
		private Random rand = new Random();
		private boolean latitudeAffected;

		@Override
		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);

			if (latitudeAffected = rand.nextBoolean()) {
				dLat += DELTA;
			} else {
				dLon += DELTA;
			}
			return new BoundingBox(0, dLat, 0, dLon);
		}

		@Override
		public int getExpectedBits(int bits) {
			if (latitudeAffected) {
				if (bits % 2 != 0) {
					return bits - 2;
				} else {
					return bits - 1;
				}
			} else {
				if (bits % 2 != 0) {
					return bits - 1;
				} else {
					return bits - 2;
				}
			}
		}
	}

	@Test
	public void testKnownSmallerBoundingBoxSizes() {
		checkWithGenerator(new ALittleTooSmallVerifier());
	}

	@Test
	public void testKnownLargerBoundingBoxSizes() {
		checkWithGenerator(new BothALittleTooLargeVerifier());
	}

	@Test
	public void testKnownOneBitLargerBoxSizes() {
		checkWithGenerator(new OnlyOneALittleTooLargeVerifier());
	}

	private void checkWithGenerator(BoundingBoxSizeTableVerifier generator) {
		for (int bits = 4; bits < 64; bits++) {
			BoundingBox bbox = generator.generate(bits);
			assertEquals(generator.getExpectedBits(bits), GeoHashSizeTable.numberOfBitsForOverlappingGeoHash(bbox));
		}
	}
}",https://www.github.com/kungfoo/geohash-java/commit/0471960ba6c1aa045a96d1146d2b2e5175a47990
0471960ba6c1aa045a96d1146d2b2e5175a47990,GeoHashSizeTableTest.java,generate,"		public BoundingBox generate(int bits) {
			// make the bounding box a little smaller than dLat/dLon
			double dLat = GeoHashSizeTable.dLat(bits) - DELTA;
			double dLon = GeoHashSizeTable.dLon(bits) - DELTA;
			return new BoundingBox(45 - dLat, 45, 30, 30 - dLon);
		}",https://www.github.com/kungfoo/geohash-java/commit/0471960ba6c1aa045a96d1146d2b2e5175a47990
0471960ba6c1aa045a96d1146d2b2e5175a47990,GeoHashSizeTableTest.java,getExpectedBits,"		public int getExpectedBits(int bits) {
			return bits;
		}",https://www.github.com/kungfoo/geohash-java/commit/0471960ba6c1aa045a96d1146d2b2e5175a47990
0471960ba6c1aa045a96d1146d2b2e5175a47990,GeoHashSizeTableTest.java,generate,"		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);
			return new BoundingBox(0, dLat + DELTA, 0, dLon + DELTA);
		}",https://www.github.com/kungfoo/geohash-java/commit/0471960ba6c1aa045a96d1146d2b2e5175a47990
0471960ba6c1aa045a96d1146d2b2e5175a47990,GeoHashSizeTableTest.java,getExpectedBits,"		public int getExpectedBits(int bits) {
			return bits - 2;
		}",https://www.github.com/kungfoo/geohash-java/commit/0471960ba6c1aa045a96d1146d2b2e5175a47990
0471960ba6c1aa045a96d1146d2b2e5175a47990,GeoHashSizeTableTest.java,generate,"		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);

			if (latitudeAffected = rand.nextBoolean()) {
				dLat += DELTA;
			} else {
				dLon += DELTA;
			}
			return new BoundingBox(0, dLat, 0, dLon);
		}",https://www.github.com/kungfoo/geohash-java/commit/0471960ba6c1aa045a96d1146d2b2e5175a47990
0471960ba6c1aa045a96d1146d2b2e5175a47990,GeoHashSizeTableTest.java,getExpectedBits,"		public int getExpectedBits(int bits) {
			if (latitudeAffected) {
				if (bits % 2 != 0) {",https://www.github.com/kungfoo/geohash-java/commit/0471960ba6c1aa045a96d1146d2b2e5175a47990
0471960ba6c1aa045a96d1146d2b2e5175a47990,GeoHashSizeTableTest.java,testKnownSmallerBoundingBoxSizes,"	public void testKnownSmallerBoundingBoxSizes() {
		checkWithGenerator(new ALittleTooSmallVerifier());
	}",https://www.github.com/kungfoo/geohash-java/commit/0471960ba6c1aa045a96d1146d2b2e5175a47990
0471960ba6c1aa045a96d1146d2b2e5175a47990,GeoHashSizeTableTest.java,testKnownLargerBoundingBoxSizes,"	public void testKnownLargerBoundingBoxSizes() {
		checkWithGenerator(new BothALittleTooLargeVerifier());
	}",https://www.github.com/kungfoo/geohash-java/commit/0471960ba6c1aa045a96d1146d2b2e5175a47990
0471960ba6c1aa045a96d1146d2b2e5175a47990,GeoHashSizeTableTest.java,testKnownOneBitLargerBoxSizes,"	public void testKnownOneBitLargerBoxSizes() {
		checkWithGenerator(new OnlyOneALittleTooLargeVerifier());
	}",https://www.github.com/kungfoo/geohash-java/commit/0471960ba6c1aa045a96d1146d2b2e5175a47990
0471960ba6c1aa045a96d1146d2b2e5175a47990,GeoHashSizeTableTest.java,checkWithGenerator,"	private void checkWithGenerator(BoundingBoxSizeTableVerifier generator) {
		for (int bits = 4; bits < 64; bits++) {
			BoundingBox bbox = generator.generate(bits);",https://www.github.com/kungfoo/geohash-java/commit/0471960ba6c1aa045a96d1146d2b2e5175a47990
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(latitudeRange[1],
				longitudeRange[1]));",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(), southern,
				southern.getWesternNeighbour(), western, northern.getWesternNeighbour() };",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,toBase32,"	public String toBase32() {
		if(significantBits % 5 != 0){
			return """";
		}
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", Long.toBinaryString(bits), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,mask,"	private final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHashCircleQuery.java,contains,"	public boolean contains(GeoHash hash) {
		return query.contains(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHashCircleQuery.java,getSearchHashes,"	public List<GeoHash> getSearchHashes() {
		return query.getSearchHashes();
	}",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHashCircleQuery.java,toString,"	public String toString() {
		return ""Cicle Query [center="" + center + "", radius="" + getRadiusString() + ""]"";
	}",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
d565bde674692d7bec8e073f1e729257cb497ce5,GeoHashCircleQuery.java,getRadiusString,"	private String getRadiusString() {
		if (radius > 1000) {
			return radius / 1000 + ""km"";",https://www.github.com/kungfoo/geohash-java/commit/d565bde674692d7bec8e073f1e729257cb497ce5
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,BoundingBox.java,getUpperLeft,"	public WGS84Point getUpperLeft() {
		return new WGS84Point(maxLat, minLon);
	}",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,BoundingBox.java,getLowerRight,"	public WGS84Point getLowerRight() {
		return new WGS84Point(minLat, maxLon);
	}",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,BoundingBox.java,getLatitudeSize,"	public double getLatitudeSize() {
		return maxLat - minLat;
	}",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,BoundingBox.java,getLongitudeSize,"	public double getLongitudeSize() {
		return maxLon - minLon;
	}",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,BoundingBox.java,equals,"	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj instanceof BoundingBox) {
			BoundingBox that = (BoundingBox) obj;",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,BoundingBox.java,hashCode,"	public int hashCode() {
		int result = 17;
		result = 37 * result + hashCode(minLat);
		result = 37 * result + hashCode(maxLat);
		result = 37 * result + hashCode(minLon);
		result = 37 * result + hashCode(maxLon);
		return result;
	}",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,BoundingBox.java,hashCode,"	private static int hashCode(double x) {
		long f = Double.doubleToLongBits(x);
		return (int) (f ^ (f >>> 32));
	}",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,BoundingBox.java,contains,"	public boolean contains(WGS84Point point) {
		return (point.getLatitude() >= minLat) && (point.getLongitude() >= minLon) && (point.getLatitude() <= maxLat)
				&& (point.getLongitude() <= maxLon);",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,BoundingBox.java,intersects,"	public boolean intersects(BoundingBox other) {
		return !(other.minLon > maxLon || other.maxLon < minLon || other.minLat > maxLat || other.maxLat < minLat);
	}",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,BoundingBox.java,toString,"	public String toString() {
		return getUpperLeft() + "" -> "" + getLowerRight();
	}",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,BoundingBox.java,getCenterPoint,"	public WGS84Point getCenterPoint() {
		double centerLatitude = (minLat + maxLat) / 2;
		double centerLongitude = (minLon + maxLon) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,BoundingBox.java,expandToInclude,"	public void expandToInclude(BoundingBox other) {
		if (other.minLon < minLon) {
			minLon = other.minLon;
		}
		if (other.maxLon > maxLon) {
			maxLon = other.maxLon;
		}
		if (other.minLat < minLat) {
			minLat = other.minLat;
		}
		if (other.maxLat > maxLat) {
			maxLat = other.maxLat;",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,BoundingBox.java,getMinLon,"	public double getMinLon() {
		return minLon;
	}",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,BoundingBox.java,getMinLat,"	public double getMinLat() {
		return minLat;
	}",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,BoundingBox.java,getMaxLat,"	public double getMaxLat() {
		return maxLat;
	}",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,BoundingBox.java,getMaxLon,"	public double getMaxLon() {
		return maxLon;
	}",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,GeoHashBoundingBoxQuery.java,addSearchHash,"	private void addSearchHash(GeoHash hash) {
		if (boundingBox == null) {
			boundingBox = new BoundingBox(hash.getBoundingBox());
		} else {
			boundingBox.expandToInclude(hash.getBoundingBox());
		}
		searchHashes.add(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,GeoHashBoundingBoxQuery.java,expandSearch,"	private void expandSearch(GeoHash centerHash, BoundingBox bbox) {
		addSearchHash(centerHash);

		for (GeoHash adjacent : centerHash.getAdjacent()) {
			BoundingBox adjacentBox = adjacent.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,GeoHashBoundingBoxQuery.java,hashFits,"	private boolean hashFits(GeoHash hash, BoundingBox bbox) {
		return hash.contains(bbox.getUpperLeft()) && hash.contains(bbox.getLowerRight());
	}",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,GeoHashBoundingBoxQuery.java,contains,"	public boolean contains(GeoHash hash) {
		for (GeoHash searchHash : searchHashes) {
			if (hash.within(searchHash))
				return true;
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,GeoHashBoundingBoxQuery.java,getSearchHashes,"	public List<GeoHash> getSearchHashes() {
		return searchHashes;
	}",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,GeoHashBoundingBoxQuery.java,toString,"	public String toString() {
		StringBuilder bui = new StringBuilder();
		for (GeoHash hash : searchHashes) {
			bui.append(hash).append(""\n"");
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,GeoHashBoundingBoxQuery.java,getWktBox,"	public String getWktBox() {
		return ""BOX("" + boundingBox.getMinLon() + "" "" + boundingBox.getMinLat() + "","" + boundingBox.getMaxLon() + "" ""
				+ boundingBox.getMaxLat() + "")"";",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,GeoHashCircleQuery.java,contains,"	public boolean contains(GeoHash hash) {
		return query.contains(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,GeoHashCircleQuery.java,getWktBox,"	public String getWktBox() {
		return query.getWktBox();
	}",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,GeoHashCircleQuery.java,getSearchHashes,"	public List<GeoHash> getSearchHashes() {
		return query.getSearchHashes();
	}",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,GeoHashCircleQuery.java,toString,"	public String toString() {
		return ""Cicle Query [center="" + center + "", radius="" + getRadiusString() + ""]"";
	}",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,GeoHashCircleQuery.java,getRadiusString,"	private String getRadiusString() {
		if (radius > 1000) {
			return radius / 1000 + ""km"";",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,GeoHashQuery.java,contains,"	public abstract boolean contains(GeoHash hash);

	/**
	 * should return the hashes that re required to perform this search.
	 */
	public abstract List<GeoHash> getSearchHashes();

	public abstract String getWktBox();

}",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,GeoHashQuery.java,getSearchHashes,"	public abstract List<GeoHash> getSearchHashes();

	public abstract String getWktBox();

}",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,GeoHashQuery.java,getWktBox,"	public abstract String getWktBox();

}",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,GeoHashCircleQueryTest.java,checkJerryDonSample1,"	public void checkJerryDonSample1() {
		checkRadiusSearchHashes(1000, ""t9y2bk"" );
	}",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,GeoHashCircleQueryTest.java,testJerryDonSample2,"	public void testJerryDonSample2() {
		checkRadiusSearchHashes(1500, ""t9y2bh"", ""t9y2bs"", ""t9yb2b0"", ""t9yb2b8"");
	}",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,GeoHashCircleQueryTest.java,testJerryDonSample3,"	public void testJerryDonSample3() {
		checkRadiusSearchHashes(2500, ""t9y2b"");
	}",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
6d0d50e11356b8001a5dbb0e66bf80158a7649a3,GeoHashCircleQueryTest.java,checkRadiusSearchHashes,"	private void checkRadiusSearchHashes(int radius, String ... string) {
		GeoHashQuery query = new GeoHashCircleQuery(center, radius);
		List<String> expectedHashes = Arrays.asList(string);
		List<GeoHash> searchHashes = query.getSearchHashes();
		assertEquals(expectedHashes.size(), searchHashes.size());
		for(GeoHash hash : searchHashes){
			if(! expectedHashes.contains(hash.toBase32())){",https://www.github.com/kungfoo/geohash-java/commit/6d0d50e11356b8001a5dbb0e66bf80158a7649a3
54d773038db68cd4add3fa11b1b1fd9240176c58,GeoHashCircleQueryTest.java,testJerryDonSample3,"	public void testJerryDonSample3() {
		checkRadiusSearchHashes(2500, ""t9y2b"");
	}",https://www.github.com/kungfoo/geohash-java/commit/54d773038db68cd4add3fa11b1b1fd9240176c58
54d773038db68cd4add3fa11b1b1fd9240176c58,GeoHashCircleQueryTest.java,checkRadiusSearchHashes,"	private void checkRadiusSearchHashes(int radius, String ... string) {
		GeoHashQuery query = new GeoHashCircleQuery(center, radius);
		List<String> expectedHashes = Arrays.asList(string);
		List<GeoHash> searchHashes = query.getSearchHashes();
		assertEquals(expectedHashes.size(), searchHashes.size());
		for(GeoHash hash : searchHashes){
			if(! expectedHashes.contains(hash.toBase32())){",https://www.github.com/kungfoo/geohash-java/commit/54d773038db68cd4add3fa11b1b1fd9240176c58
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,fromBinaryString,"	public static GeoHash fromBinaryString(String binaryString) {
	  GeoHash geohash = new GeoHash();
	  geohash.significantBits = (byte) binaryString.length();
	  if(binaryString.length() < 64)
	  {
	    StringBuffer b = new StringBuffer();
	    b.append(binaryString);
	    for(int i = binaryString.length(); i < 63; i++)
	    {
	      b.append(""0"");
	    }
	    binaryString = b.toString();
	  }
	  
	  geohash.bits = Long.valueOf(binaryString, 2);
	  
	  
    long[] latitudeBits = geohash.getRightAlignedLatitudeBits();
    long[] longitudeBits = geohash.getRightAlignedLongitudeBits();
    //latitudeBits[0] += 1;
    //latitudeBits[0] = geohash.maskLastNBits(latitudeBits[0], latitudeBits[1]);
    return geohash.recombineLatLonBitsToHash(latitudeBits, longitudeBits);
		",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(latitudeRange[1],
				longitudeRange[1]));",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(), southern,
				southern.getWesternNeighbour(), western, northern.getWesternNeighbour() };",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,toBase32,"	public String toBase32() {
		if(significantBits % 5 != 0){
			return """";
		}
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", Long.toBinaryString(bits), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,toStringWithSignificantPrecision,"	public String toStringWithSignificantPrecision() {
    return Long.toBinaryString(bits).substring(0,significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,mask,"	private final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/0696143c9bb4e74bf26b92a0ea536ed1fa2dfd55
2e8905f39a3ae884e95a143d9b62018bb19692e8,GeoHashBoundingBoxQuery.java,addSearchHash,"	private void addSearchHash(GeoHash hash) {
		if (boundingBox == null) {
			boundingBox = new BoundingBox(hash.getBoundingBox());
		} else {
			boundingBox.expandToInclude(hash.getBoundingBox());
		}
		searchHashes.add(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/2e8905f39a3ae884e95a143d9b62018bb19692e8
2e8905f39a3ae884e95a143d9b62018bb19692e8,GeoHashBoundingBoxQuery.java,expandSearch,"	private void expandSearch(GeoHash centerHash, BoundingBox bbox) {
		addSearchHash(centerHash);

		for (GeoHash adjacent : centerHash.getAdjacent()) {
			BoundingBox adjacentBox = adjacent.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/2e8905f39a3ae884e95a143d9b62018bb19692e8
2e8905f39a3ae884e95a143d9b62018bb19692e8,GeoHashBoundingBoxQuery.java,hashFits,"	private boolean hashFits(GeoHash hash, BoundingBox bbox) {
		return hash.contains(bbox.getUpperLeft()) && hash.contains(bbox.getLowerRight());
	}",https://www.github.com/kungfoo/geohash-java/commit/2e8905f39a3ae884e95a143d9b62018bb19692e8
2e8905f39a3ae884e95a143d9b62018bb19692e8,GeoHashBoundingBoxQuery.java,contains,"	public boolean contains(GeoHash hash) {
		for (GeoHash searchHash : searchHashes) {
			if (hash.within(searchHash))
				return true;
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/2e8905f39a3ae884e95a143d9b62018bb19692e8
2e8905f39a3ae884e95a143d9b62018bb19692e8,GeoHashBoundingBoxQuery.java,contains,"	public boolean contains(WGS84Point point) {
		return contains(GeoHash.withBitPrecision(point.getLatitude(), point.getLongitude(), 64));
	}",https://www.github.com/kungfoo/geohash-java/commit/2e8905f39a3ae884e95a143d9b62018bb19692e8
2e8905f39a3ae884e95a143d9b62018bb19692e8,GeoHashBoundingBoxQuery.java,getSearchHashes,"	public List<GeoHash> getSearchHashes() {
		return searchHashes;
	}",https://www.github.com/kungfoo/geohash-java/commit/2e8905f39a3ae884e95a143d9b62018bb19692e8
2e8905f39a3ae884e95a143d9b62018bb19692e8,GeoHashBoundingBoxQuery.java,toString,"	public String toString() {
		StringBuilder bui = new StringBuilder();
		for (GeoHash hash : searchHashes) {
			bui.append(hash).append(""\n"");
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/2e8905f39a3ae884e95a143d9b62018bb19692e8
2e8905f39a3ae884e95a143d9b62018bb19692e8,GeoHashBoundingBoxQuery.java,getWktBox,"	public String getWktBox() {
		return ""BOX("" + boundingBox.getMinLon() + "" "" + boundingBox.getMinLat() + "","" + boundingBox.getMaxLon() + "" ""
				+ boundingBox.getMaxLat() + "")"";",https://www.github.com/kungfoo/geohash-java/commit/2e8905f39a3ae884e95a143d9b62018bb19692e8
2e8905f39a3ae884e95a143d9b62018bb19692e8,GeoHashCircleQuery.java,contains,"	public boolean contains(GeoHash hash) {
		return query.contains(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/2e8905f39a3ae884e95a143d9b62018bb19692e8
2e8905f39a3ae884e95a143d9b62018bb19692e8,GeoHashCircleQuery.java,getWktBox,"	public String getWktBox() {
		return query.getWktBox();
	}",https://www.github.com/kungfoo/geohash-java/commit/2e8905f39a3ae884e95a143d9b62018bb19692e8
2e8905f39a3ae884e95a143d9b62018bb19692e8,GeoHashCircleQuery.java,getSearchHashes,"	public List<GeoHash> getSearchHashes() {
		return query.getSearchHashes();
	}",https://www.github.com/kungfoo/geohash-java/commit/2e8905f39a3ae884e95a143d9b62018bb19692e8
2e8905f39a3ae884e95a143d9b62018bb19692e8,GeoHashCircleQuery.java,toString,"	public String toString() {
		return ""Cicle Query [center="" + center + "", radius="" + getRadiusString() + ""]"";
	}",https://www.github.com/kungfoo/geohash-java/commit/2e8905f39a3ae884e95a143d9b62018bb19692e8
2e8905f39a3ae884e95a143d9b62018bb19692e8,GeoHashCircleQuery.java,getRadiusString,"	private String getRadiusString() {
		if (radius > 1000) {
			return radius / 1000 + ""km"";",https://www.github.com/kungfoo/geohash-java/commit/2e8905f39a3ae884e95a143d9b62018bb19692e8
2e8905f39a3ae884e95a143d9b62018bb19692e8,GeoHashCircleQuery.java,contains,"	public boolean contains(WGS84Point point) {
		return query.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/2e8905f39a3ae884e95a143d9b62018bb19692e8
2e8905f39a3ae884e95a143d9b62018bb19692e8,GeoHashQuery.java,contains,"	public boolean contains(GeoHash hash);

	/**
	 * returns whether a point lies within a query.
	 */
	public boolean contains(WGS84Point point);

	/**
	 * should return the hashes that re required to perform this search.
	 */
	public List<GeoHash> getSearchHashes();

	public String getWktBox();

}",https://www.github.com/kungfoo/geohash-java/commit/2e8905f39a3ae884e95a143d9b62018bb19692e8
2e8905f39a3ae884e95a143d9b62018bb19692e8,GeoHashQuery.java,contains,"	public boolean contains(WGS84Point point);

	/**
	 * should return the hashes that re required to perform this search.
	 */
	public List<GeoHash> getSearchHashes();

	public String getWktBox();

}",https://www.github.com/kungfoo/geohash-java/commit/2e8905f39a3ae884e95a143d9b62018bb19692e8
2e8905f39a3ae884e95a143d9b62018bb19692e8,GeoHashQuery.java,getSearchHashes,"	public List<GeoHash> getSearchHashes();

	public String getWktBox();

}",https://www.github.com/kungfoo/geohash-java/commit/2e8905f39a3ae884e95a143d9b62018bb19692e8
2e8905f39a3ae884e95a143d9b62018bb19692e8,GeoHashQuery.java,getWktBox,"	public String getWktBox();

}",https://www.github.com/kungfoo/geohash-java/commit/2e8905f39a3ae884e95a143d9b62018bb19692e8
2e8905f39a3ae884e95a143d9b62018bb19692e8,GeoHashCircleQueryTest.java,testIssue3WithCircleQuery,"	public void testIssue3WithCircleQuery() throws Exception {
		WGS84Point center = new WGS84Point(39.86391280373075, 116.37356590048701);
		GeoHashCircleQuery query = new GeoHashCircleQuery(center, 589);

		// the distance between center and test1 is about 430 meters
		WGS84Point test1 = new WGS84Point(39.8648866576058, 116.378465869303);
		// the distance between center and test2 is about 510 meters
		WGS84Point test2 = new WGS84Point(39.8664787092599, 116.378552856158);

		assertTrue(query.contains(test1));
		assertTrue(query.contains(test2));
	}",https://www.github.com/kungfoo/geohash-java/commit/2e8905f39a3ae884e95a143d9b62018bb19692e8
49bdb4c3bb9a643b9d002fbe1658b1ecbc466d3a,BoundingBoxGeoHashIterator.java,withCharacterPrecision,"    public static BoundingBoxGeoHashIterator withCharacterPrecision(BoundingBox bbox, int numberOfCharacters) {
        GeoHash bottomLeft = GeoHash.withCharacterPrecision(bbox.getMinLat(), bbox.getMinLon(), numberOfCharacters);
        GeoHash topRight = GeoHash.withCharacterPrecision(bbox.getMaxLat(), bbox.getMaxLon(), numberOfCharacters);
        return new BoundingBoxGeoHashIterator(bottomLeft, topRight);
    }",https://www.github.com/kungfoo/geohash-java/commit/49bdb4c3bb9a643b9d002fbe1658b1ecbc466d3a
49bdb4c3bb9a643b9d002fbe1658b1ecbc466d3a,BoundingBoxGeoHashIterator.java,withBitPrecision,"    public static BoundingBoxGeoHashIterator withBitPrecision(BoundingBox bbox, int numberOfBits) {
        GeoHash bottomLeft = GeoHash.withBitPrecision(bbox.getMinLat(), bbox.getMinLon(), numberOfBits);
        GeoHash topRight = GeoHash.withBitPrecision(bbox.getMaxLat(), bbox.getMaxLon(), numberOfBits);
        return new BoundingBoxGeoHashIterator(bottomLeft, topRight);
    }",https://www.github.com/kungfoo/geohash-java/commit/49bdb4c3bb9a643b9d002fbe1658b1ecbc466d3a
49bdb4c3bb9a643b9d002fbe1658b1ecbc466d3a,BoundingBoxGeoHashIterator.java,getBoundingBox,"    public BoundingBox getBoundingBox() {
        return boundingBox;
    }",https://www.github.com/kungfoo/geohash-java/commit/49bdb4c3bb9a643b9d002fbe1658b1ecbc466d3a
49bdb4c3bb9a643b9d002fbe1658b1ecbc466d3a,BoundingBoxGeoHashIterator.java,getBottomLeft,"    public GeoHash getBottomLeft() {
        return bottomLeft;
    }",https://www.github.com/kungfoo/geohash-java/commit/49bdb4c3bb9a643b9d002fbe1658b1ecbc466d3a
49bdb4c3bb9a643b9d002fbe1658b1ecbc466d3a,BoundingBoxGeoHashIterator.java,getTopRight,"    public GeoHash getTopRight() {
        return topRight;
    }",https://www.github.com/kungfoo/geohash-java/commit/49bdb4c3bb9a643b9d002fbe1658b1ecbc466d3a
49bdb4c3bb9a643b9d002fbe1658b1ecbc466d3a,BoundingBoxGeoHashIterator.java,hasNext,"    public boolean hasNext() {
        return current.compareTo(topRight) <= 0;
    }",https://www.github.com/kungfoo/geohash-java/commit/49bdb4c3bb9a643b9d002fbe1658b1ecbc466d3a
49bdb4c3bb9a643b9d002fbe1658b1ecbc466d3a,BoundingBoxGeoHashIterator.java,next,"    public GeoHash next() {
        GeoHash rv = current;
        if (!hasNext()) throw new NoSuchElementException(); 
        current = rv.next();
        while (hasNext() && !boundingBox.contains(current.getPoint())) {
            current = current.next();
        }
        return rv;
    }",https://www.github.com/kungfoo/geohash-java/commit/49bdb4c3bb9a643b9d002fbe1658b1ecbc466d3a
49bdb4c3bb9a643b9d002fbe1658b1ecbc466d3a,BoundingBoxGeoHashIterator.java,remove,"    public void remove() {
        throw new UnsupportedOperationException();
    }",https://www.github.com/kungfoo/geohash-java/commit/49bdb4c3bb9a643b9d002fbe1658b1ecbc466d3a
49bdb4c3bb9a643b9d002fbe1658b1ecbc466d3a,BoundingBoxGeoHashIteratorTest.java,testIter,"    public void testIter() {
        BoundingBox box = new BoundingBox(37.7, 37.84, -122.52, -122.35);
        BoundingBoxGeoHashIterator iter = BoundingBoxGeoHashIterator.withBitPrecision(box, 10);
        BoundingBox newBox = iter.getBoundingBox();
        List<GeoHash> hashes = new ArrayList<GeoHash>();
        while (iter.hasNext()) {
            hashes.add(iter.next());
        }
        GeoHash prev = null;
        for (GeoHash gh : hashes) {
            if (prev != null) Assert.assertTrue(prev.compareTo(gh) < 0);",https://www.github.com/kungfoo/geohash-java/commit/49bdb4c3bb9a643b9d002fbe1658b1ecbc466d3a
49bdb4c3bb9a643b9d002fbe1658b1ecbc466d3a,BoundingBoxGeoHashIteratorTest.java,testIter2,"    public void testIter2() {
        BoundingBox box = new BoundingBox(37.7, 37.84, -122.52, -122.35);
        BoundingBoxGeoHashIterator iter = BoundingBoxGeoHashIterator.withBitPrecision(box, 35);
        BoundingBox newBox = iter.getBoundingBox();
        List<GeoHash> hashes = new ArrayList<GeoHash>();
        while (iter.hasNext()) {
            hashes.add(iter.next());
        }
        GeoHash prev = null;
        int idx = 0;
        //System.out.println(""idx,lat,lon"");
        for (GeoHash gh : hashes) {
            if (prev != null) Assert.assertTrue(prev.compareTo(gh) < 0);",https://www.github.com/kungfoo/geohash-java/commit/49bdb4c3bb9a643b9d002fbe1658b1ecbc466d3a
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,fromLongValue,"    public static GeoHash fromLongValue(long hashVal, int significantBits) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

        boolean isEvenBit = true;
        GeoHash hash = new GeoHash();

        String binaryString = Long.toBinaryString(hashVal);
        while (binaryString.length() < 64) {
            binaryString = ""0"" + binaryString;
        }
        for (int j = 0; j < significantBits; j++) {
            if (isEvenBit) {
                divideRangeDecode(hash, longitudeRange, binaryString.charAt(j) != '0');
            } else {
                divideRangeDecode(hash, latitudeRange, binaryString.charAt(j) != '0');
            }
            isEvenBit = !isEvenBit;
        }

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
    }",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(latitudeRange[1],
				longitudeRange[1]));",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,next,"    public GeoHash next() {
        return fromLongValue(bits + (1l << (64 - significantBits)), significantBits);
    }",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(), southern,
				southern.getWesternNeighbour(), western, northern.getWesternNeighbour() };",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,longValue,"    public long longValue() {
        return bits;
    }",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,toBase32,"	public String toBase32() {
		if(significantBits % 5 != 0){
			return """";
		}
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", Long.toBinaryString(bits), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,mask,"	private final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHash.java,compareTo,"    public int compareTo(GeoHash o) {
        return new Long(bits).compareTo(o.bits);
    }",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
		rand = new Random();
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		// TODO could possibly be less brute-force here and be more scientific
		// about possible failure points
		for (double lat = -90; lat <= 90; lat += rand.nextDouble() + 1.45) {
			for (double lon = -180; lon <= 180; lon += rand.nextDouble() + 1.54) {",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertWithin(hash, bbox);
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,assertWithin,"	private void assertWithin(GeoHash hash, GeoHash bbox) {
		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xd000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xc000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);
",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertEquals(start.getBoundingBox(), end.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
			double randomLatitude = (rand.nextDouble() - 0.5) * 180;",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,testKnownNeighbouringHashes,"	public void testKnownNeighbouringHashes() {
		GeoHash h1 = GeoHash.fromGeohashString(""u1pb"");
		assertEquals(""u0zz"", h1.getSouthernNeighbour().toBase32());
		assertEquals(""u1pc"", h1.getNorthernNeighbour().toBase32());
		assertEquals(""u300"", h1.getEasternNeighbour().toBase32());
		assertEquals(""u302"", h1.getEasternNeighbour().getEasternNeighbour().toBase32());
		assertEquals(""u1p8"", h1.getWesternNeighbour().toBase32());
		
		assertEquals(""sp2j"", GeoHash.withCharacterPrecision(41.7, 0.08, 4).toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,testKnownAdjacentNeighbours,"	public void testKnownAdjacentNeighbours() {
		String center = ""dqcjqc"";
		String[] adjacent = new String[] { ""dqcjqf"", ""dqcjqb"", ""dqcjr1"", ""dqcjq9"", ""dqcjqd"", ""dqcjr4"", ""dqcjr0"",
				""dqcjq8"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""u1x0dfg"";
		adjacent = new String[] { ""u1x0dg4"", ""u1x0dg5"", ""u1x0dgh"", ""u1x0dfu"", ""u1x0dfs"", ""u1x0dfe"", ""u1x0dfd"",
				""u1x0dff"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""sp2j"";
		adjacent = new String[] { ""ezry"", ""sp2n"", ""sp2q"", ""sp2m"", ""sp2k"", ""sp2h"", ""ezru"", ""ezrv"" };
		assertAdjacentHashesAre(center, adjacent);
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,assertAdjacentHashesAre,"	private void assertAdjacentHashesAre(String centerString, String[] adjacentStrings) {
		GeoHash center = GeoHash.fromGeohashString(centerString);
		GeoHash[] adjacent = center.getAdjacent();
		for (String check : adjacentStrings) {
			assertArrayContainsGeoHash(check, adjacent);",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,assertArrayContainsGeoHash,"	private void assertArrayContainsGeoHash(String check, GeoHash[] hashes) {
		boolean found = false;
		for (GeoHash hash : hashes) {
			if (hash.toBase32().equals(check)) {
				found = true;
				break;
			}
		}
		assertTrue(""Array should contain "" + check, found);
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,testNeibouringHashesNearMeridian,"	public void testNeibouringHashesNearMeridian() {
		GeoHash hash = GeoHash.fromGeohashString(""sp2j"");
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(""ezrv"", west.toBase32());
		west = west.getWesternNeighbour();
		assertEquals(""ezrt"", west.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,testSimpleWithin,"	public void testSimpleWithin() {
		GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
		GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
		assertWithin(inside, hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(hash.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,testToLongAndBack,"    public void testToLongAndBack() {
        double lat = 40.390943;
        double lon = -75.9375;
        GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 10);
        long lv = hash.longValue();
        assertEquals(lv + (1 << (64 - hash.significantBits())), hash.next().longValue());
        GeoHash hashFromLong = GeoHash.fromLongValue(lv, hash.significantBits());
        assertEquals(""dr4jb0bn21"", hashFromLong.toBase32());
        assertEquals(hash, hashFromLong);
    }",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
ebdcaa189319399f5905bec4dbf6b3a0cad4b021,GeoHashTest.java,testNext,"    public void testNext() {
        double lat = 37.7;
        double lon = -122.52;
        GeoHash hash = GeoHash.withBitPrecision(lat, lon, 10);
        GeoHash next = hash.next();
        assertTrue(hash.compareTo(next) < 0);                
    }",https://www.github.com/kungfoo/geohash-java/commit/ebdcaa189319399f5905bec4dbf6b3a0cad4b021
890565f2b473faeeb16059e5e171d4da1566966f,BoundingBoxGeoHashIteratorTest.java,testIter,"    public void testIter() {
        BoundingBox box = new BoundingBox(37.7, 37.84, -122.52, -122.35);
        BoundingBoxGeoHashIterator iter = BoundingBoxGeoHashIterator.withBitPrecision(box, 10);
        BoundingBox newBox = iter.getBoundingBox();
        List<GeoHash> hashes = new ArrayList<GeoHash>();
        while (iter.hasNext()) {
            hashes.add(iter.next());
        }
        GeoHash prev = null;
        for (GeoHash gh : hashes) {
            if (prev != null) Assert.assertTrue(prev.compareTo(gh) < 0);",https://www.github.com/kungfoo/geohash-java/commit/890565f2b473faeeb16059e5e171d4da1566966f
890565f2b473faeeb16059e5e171d4da1566966f,BoundingBoxGeoHashIteratorTest.java,testIter2,"    public void testIter2() {
        BoundingBox box = new BoundingBox(37.7, 37.84, -122.52, -122.35);
        BoundingBoxGeoHashIterator iter = BoundingBoxGeoHashIterator.withBitPrecision(box, 35);
        BoundingBox newBox = iter.getBoundingBox();
        List<GeoHash> hashes = new ArrayList<GeoHash>();
        while (iter.hasNext()) {
            hashes.add(iter.next());
        }
        GeoHash prev = null;
        for (GeoHash gh : hashes) {
            if (prev != null) Assert.assertTrue(prev.compareTo(gh) < 0);",https://www.github.com/kungfoo/geohash-java/commit/890565f2b473faeeb16059e5e171d4da1566966f
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,fromBinaryString,"	public static GeoHash fromBinaryString(String binaryString) {
		GeoHash geohash = new GeoHash();
		geohash.significantBits = (byte) binaryString.length();
		if (binaryString.length() < 64) {
			StringBuffer b = new StringBuffer();
			b.append(binaryString);
			for (int i = binaryString.length(); i < 63; i++) {
				b.append(""0"");
			}
			binaryString = b.toString();
		}

		geohash.bits = Long.valueOf(binaryString, 2);
		long[] latitudeBits = geohash.getRightAlignedLatitudeBits();
		long[] longitudeBits = geohash.getRightAlignedLongitudeBits();
		return geohash.recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,fromLongValue,"    public static GeoHash fromLongValue(long hashVal, int significantBits) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

        boolean isEvenBit = true;
        GeoHash hash = new GeoHash();

        String binaryString = Long.toBinaryString(hashVal);
        while (binaryString.length() < 64) {
            binaryString = ""0"" + binaryString;
        }
        for (int j = 0; j < significantBits; j++) {
            if (isEvenBit) {
                divideRangeDecode(hash, longitudeRange, binaryString.charAt(j) != '0');
            } else {
                divideRangeDecode(hash, latitudeRange, binaryString.charAt(j) != '0');
            }
            isEvenBit = !isEvenBit;
        }

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
    }",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(latitudeRange[1],
				longitudeRange[1]));",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,next,"    public GeoHash next() {
        return fromLongValue(bits + (1l << (64 - significantBits)), significantBits);
    }",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(), southern,
				southern.getWesternNeighbour(), western, northern.getWesternNeighbour() };",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,longValue,"    public long longValue() {
        return bits;
    }",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,toBase32,"	public String toBase32() {
		if(significantBits % 5 != 0){
			return """";
		}
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", Long.toBinaryString(bits), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,toStringWithSignificantPrecision,"	public String toStringWithSignificantPrecision() {
    return Long.toBinaryString(bits).substring(0,significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,mask,"	private final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
0ba5b101f097b68fe98499ce82900e497f9a4ba1,GeoHash.java,compareTo,"    public int compareTo(GeoHash o) {
        return new Long(bits).compareTo(o.bits);
    }",https://www.github.com/kungfoo/geohash-java/commit/0ba5b101f097b68fe98499ce82900e497f9a4ba1
f3e0cc6b932ef6d066f411099d513d48350090e2,BoundingBox.java,getUpperLeft,"	public WGS84Point getUpperLeft() {
		return new WGS84Point(maxLat, minLon);
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,BoundingBox.java,getLowerRight,"	public WGS84Point getLowerRight() {
		return new WGS84Point(minLat, maxLon);
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,BoundingBox.java,getLatitudeSize,"	public double getLatitudeSize() {
		return maxLat - minLat;
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,BoundingBox.java,getLongitudeSize,"	public double getLongitudeSize() {
		return maxLon - minLon;
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,BoundingBox.java,equals,"	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj instanceof BoundingBox) {
			BoundingBox that = (BoundingBox) obj;",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,BoundingBox.java,hashCode,"	public int hashCode() {
		int result = 17;
		result = 37 * result + hashCode(minLat);
		result = 37 * result + hashCode(maxLat);
		result = 37 * result + hashCode(minLon);
		result = 37 * result + hashCode(maxLon);
		return result;
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,BoundingBox.java,hashCode,"	private static int hashCode(double x) {
		long f = Double.doubleToLongBits(x);
		return (int) (f ^ (f >>> 32));
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,BoundingBox.java,contains,"	public boolean contains(WGS84Point point) {
		return (point.getLatitude() >= minLat) && (point.getLongitude() >= minLon) && (point.getLatitude() <= maxLat)
				&& (point.getLongitude() <= maxLon);",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,BoundingBox.java,intersects,"	public boolean intersects(BoundingBox other) {
		return !(other.minLon > maxLon || other.maxLon < minLon || other.minLat > maxLat || other.maxLat < minLat);
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,BoundingBox.java,toString,"	public String toString() {
		return getUpperLeft() + "" -> "" + getLowerRight();
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,BoundingBox.java,getCenterPoint,"	public WGS84Point getCenterPoint() {
		double centerLatitude = (minLat + maxLat) / 2;
		double centerLongitude = (minLon + maxLon) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,BoundingBox.java,expandToInclude,"	public void expandToInclude(BoundingBox other) {
		if (other.minLon < minLon) {
			minLon = other.minLon;
		}
		if (other.maxLon > maxLon) {
			maxLon = other.maxLon;
		}
		if (other.minLat < minLat) {
			minLat = other.minLat;
		}
		if (other.maxLat > maxLat) {
			maxLat = other.maxLat;",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,BoundingBox.java,getMinLon,"	public double getMinLon() {
		return minLon;
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,BoundingBox.java,getMinLat,"	public double getMinLat() {
		return minLat;
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,BoundingBox.java,getMaxLat,"	public double getMaxLat() {
		return maxLat;
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,BoundingBox.java,getMaxLon,"	public double getMaxLon() {
		return maxLon;
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,fromLongValue,"    public static GeoHash fromLongValue(long hashVal, int significantBits) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

        boolean isEvenBit = true;
        GeoHash hash = new GeoHash();

        String binaryString = Long.toBinaryString(hashVal);
        while (binaryString.length() < 64) {
            binaryString = ""0"" + binaryString;
        }
        for (int j = 0; j < significantBits; j++) {
            if (isEvenBit) {
                divideRangeDecode(hash, longitudeRange, binaryString.charAt(j) != '0');
            } else {
                divideRangeDecode(hash, latitudeRange, binaryString.charAt(j) != '0');
            }
            isEvenBit = !isEvenBit;
        }

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
    }",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(latitudeRange[1],
				longitudeRange[1]));",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,next,"    public GeoHash next() {
        return fromLongValue(bits + (1l << (64 - significantBits)), significantBits);
    }",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(), southern,
				southern.getWesternNeighbour(), western, northern.getWesternNeighbour() };",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,longValue,"    public long longValue() {
        return bits;
    }",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,toBase32,"	public String toBase32() {
		if(significantBits % 5 != 0){
			return """";
		}
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", Long.toBinaryString(bits), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,mask,"	private final long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHash.java,compareTo,"    public int compareTo(GeoHash o) {
        return new Long(bits).compareTo(o.bits);
    }",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,WGS84Point.java,getLatitude,"	public double getLatitude() {
		return latitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,WGS84Point.java,getLongitude,"	public double getLongitude() {
		return longitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,WGS84Point.java,toString,"	public String toString() {
		return String.format(""("" + latitude + "","" + longitude + "")"");
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,WGS84Point.java,equals,"	public boolean equals(Object obj) {
		if (obj instanceof WGS84Point) {
			WGS84Point other = (WGS84Point) obj;
			return latitude == other.latitude && longitude == other.longitude;
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,WGS84Point.java,hashCode,"	public int hashCode() {
		int result = 42;
		long latBits = Double.doubleToLongBits(latitude);
		long lonBits = Double.doubleToLongBits(longitude);
		result = 31 * result + (int) (latBits ^ (latBits >>> 32));
		result = 31 * result + (int) (lonBits ^ (lonBits >>> 32));
		return result;
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHashBoundingBoxQuery.java,addSearchHash,"	private void addSearchHash(GeoHash hash) {
		if (boundingBox == null) {
			boundingBox = new BoundingBox(hash.getBoundingBox());
		} else {
			boundingBox.expandToInclude(hash.getBoundingBox());
		}
		searchHashes.add(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHashBoundingBoxQuery.java,expandSearch,"	private void expandSearch(GeoHash centerHash, BoundingBox bbox) {
		addSearchHash(centerHash);

		for (GeoHash adjacent : centerHash.getAdjacent()) {
			BoundingBox adjacentBox = adjacent.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHashBoundingBoxQuery.java,hashFits,"	private boolean hashFits(GeoHash hash, BoundingBox bbox) {
		return hash.contains(bbox.getUpperLeft()) && hash.contains(bbox.getLowerRight());
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHashBoundingBoxQuery.java,contains,"	public boolean contains(GeoHash hash) {
		for (GeoHash searchHash : searchHashes) {
			if (hash.within(searchHash))
				return true;
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHashBoundingBoxQuery.java,contains,"	public boolean contains(WGS84Point point) {
		return contains(GeoHash.withBitPrecision(point.getLatitude(), point.getLongitude(), 64));
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHashBoundingBoxQuery.java,getSearchHashes,"	public List<GeoHash> getSearchHashes() {
		return searchHashes;
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHashBoundingBoxQuery.java,toString,"	public String toString() {
		StringBuilder bui = new StringBuilder();
		for (GeoHash hash : searchHashes) {
			bui.append(hash).append(""\n"");
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHashBoundingBoxQuery.java,getWktBox,"	public String getWktBox() {
		return ""BOX("" + boundingBox.getMinLon() + "" "" + boundingBox.getMinLat() + "","" + boundingBox.getMaxLon() + "" ""
				+ boundingBox.getMaxLat() + "")"";",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHashCircleQuery.java,contains,"	public boolean contains(GeoHash hash) {
		return query.contains(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHashCircleQuery.java,getWktBox,"	public String getWktBox() {
		return query.getWktBox();
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHashCircleQuery.java,getSearchHashes,"	public List<GeoHash> getSearchHashes() {
		return query.getSearchHashes();
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHashCircleQuery.java,toString,"	public String toString() {
		return ""Cicle Query [center="" + center + "", radius="" + getRadiusString() + ""]"";
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHashCircleQuery.java,getRadiusString,"	private String getRadiusString() {
		if (radius > 1000) {
			return radius / 1000 + ""km"";",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
f3e0cc6b932ef6d066f411099d513d48350090e2,GeoHashCircleQuery.java,contains,"	public boolean contains(WGS84Point point) {
		return query.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/f3e0cc6b932ef6d066f411099d513d48350090e2
6b002b601c987c5120348bcb681737f8390b78c2,BoundingBox.java,getUpperLeft,"    public WGS84Point getUpperLeft() {
        return new WGS84Point(maxLat, minLon);
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,BoundingBox.java,getLowerRight,"    public WGS84Point getLowerRight() {
        return new WGS84Point(minLat, maxLon);
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,BoundingBox.java,getLatitudeSize,"    public double getLatitudeSize() {
        return maxLat - minLat;
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,BoundingBox.java,getLongitudeSize,"    public double getLongitudeSize() {
        return maxLon - minLon;
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,BoundingBox.java,equals,"    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj instanceof BoundingBox) {
            BoundingBox that = (BoundingBox) obj;",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,BoundingBox.java,hashCode,"    public int hashCode() {
        int result = 17;
        result = 37 * result + hashCode(minLat);
        result = 37 * result + hashCode(maxLat);
        result = 37 * result + hashCode(minLon);
        result = 37 * result + hashCode(maxLon);
        return result;
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,BoundingBox.java,hashCode,"    private static int hashCode(double x) {
        long f = Double.doubleToLongBits(x);
        return (int) (f ^ (f >>> 32));
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,BoundingBox.java,contains,"    public boolean contains(WGS84Point point) {
        return (point.getLatitude() >= minLat) && (point.getLongitude() >= minLon) && (point.getLatitude() <= maxLat)
                && (point.getLongitude() <= maxLon);",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,BoundingBox.java,intersects,"    public boolean intersects(BoundingBox other) {
        return !(other.minLon > maxLon || other.maxLon < minLon || other.minLat > maxLat || other.maxLat < minLat);
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,BoundingBox.java,toString,"    public String toString() {
        return getUpperLeft() + "" -> "" + getLowerRight();
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,BoundingBox.java,getCenterPoint,"    public WGS84Point getCenterPoint() {
        double centerLatitude = (minLat + maxLat) / 2;
        double centerLongitude = (minLon + maxLon) / 2;
        return new WGS84Point(centerLatitude, centerLongitude);
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,BoundingBox.java,expandToInclude,"    public void expandToInclude(BoundingBox other) {
        if (other.minLon < minLon) {
            minLon = other.minLon;
        }
        if (other.maxLon > maxLon) {
            maxLon = other.maxLon;
        }
        if (other.minLat < minLat) {
            minLat = other.minLat;
        }
        if (other.maxLat > maxLat) {
            maxLat = other.maxLat;",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,BoundingBox.java,getMinLon,"    public double getMinLon() {
        return minLon;
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,BoundingBox.java,getMinLat,"    public double getMinLat() {
        return minLat;
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,BoundingBox.java,getMaxLat,"    public double getMaxLat() {
        return maxLat;
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,BoundingBox.java,getMaxLon,"    public double getMaxLon() {
        return maxLon;
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,withCharacterPrecision,"    public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
        int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
        return new GeoHash(latitude, longitude, desiredPrecision);
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,withBitPrecision,"    public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
        if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
            throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
        return new GeoHash(latitude, longitude, numberOfBits);
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,fromBinaryString,"    public static GeoHash fromBinaryString(String binaryString) {
        GeoHash geohash = new GeoHash();
        geohash.significantBits = (byte) binaryString.length();
        if (binaryString.length() < 64) {
            StringBuffer b = new StringBuffer();
            b.append(binaryString);
            for (int i = binaryString.length(); i < 63; i++) {
                b.append(""0"");
            }
            binaryString = b.toString();
        }

        geohash.bits = Long.valueOf(binaryString, 2);
        long[] latitudeBits = geohash.getRightAlignedLatitudeBits();
        long[] longitudeBits = geohash.getRightAlignedLongitudeBits();
        return geohash.recombineLatLonBitsToHash(latitudeBits, longitudeBits);
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,fromGeohashString,"    public static GeoHash fromGeohashString(String geohash) {
        double[] latitudeRange = {-90.0, 90.0};
        double[] longitudeRange = {-180.0, 180.0};

        boolean isEvenBit = true;
        GeoHash hash = new GeoHash();

        for (int i = 0; i < geohash.length(); i++) {
            int cd = decodeMap.get(geohash.charAt(i));
            for (int j = 0; j < BASE32_BITS; j++) {
                int mask = BITS[j];
                if (isEvenBit) {
                    divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
                } else {
                    divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
                }
                isEvenBit = !isEvenBit;
            }
        }

        double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
        double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

        hash.point = new WGS84Point(latitude, longitude);
        setBoundingBox(hash, latitudeRange, longitudeRange);
        hash.bits <<= (64 - hash.significantBits);
        return hash;
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,fromLongValue,"    public static GeoHash fromLongValue(long hashVal, int significantBits) {
        double[] latitudeRange = {-90.0, 90.0};
        double[] longitudeRange = {-180.0, 180.0};

        boolean isEvenBit = true;
        GeoHash hash = new GeoHash();

        String binaryString = Long.toBinaryString(hashVal);
        while (binaryString.length() < 64) {
            binaryString = ""0"" + binaryString;
        }
        for (int j = 0; j < significantBits; j++) {
            if (isEvenBit) {
                divideRangeDecode(hash, longitudeRange, binaryString.charAt(j) != '0');
            } else {
                divideRangeDecode(hash, latitudeRange, binaryString.charAt(j) != '0');
            }
            isEvenBit = !isEvenBit;
        }

        double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
        double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

        hash.point = new WGS84Point(latitude, longitude);
        setBoundingBox(hash, latitudeRange, longitudeRange);
        hash.bits <<= (64 - hash.significantBits);
        return hash;
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,setBoundingBox,"    private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
        hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(latitudeRange[1],
                longitudeRange[1]));",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,next,"    public GeoHash next() {
        return fromLongValue(bits + (1l << (64 - significantBits)), significantBits);
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,divideRangeEncode,"    private void divideRangeEncode(double value, double[] range) {
        double mid = (range[0] + range[1]) / 2;
        if (value >= mid) {
            addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,divideRangeDecode,"    private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
        double mid = (range[0] + range[1]) / 2;
        if (b) {
            hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,getAdjacent,"    public GeoHash[] getAdjacent() {
        GeoHash northern = getNorthernNeighbour();
        GeoHash eastern = getEasternNeighbour();
        GeoHash southern = getSouthernNeighbour();
        GeoHash western = getWesternNeighbour();
        return new GeoHash[]{northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(), southern,
                southern.getWesternNeighbour(), western, northern.getWesternNeighbour()};",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,significantBits,"    public int significantBits() {
        return (int) significantBits;
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,longValue,"    public long longValue() {
        return bits;
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,toBase32,"    public String toBase32() {
        if (significantBits % 5 != 0) {
            return """";
        }
        StringBuilder buf = new StringBuilder();

        long firstFiveBitsMask = 0xf800000000000000l;
        long bitsCopy = bits;
        int partialChunks = (int) Math.ceil(((double) significantBits / 5));

        for (int i = 0; i < partialChunks; i++) {
            int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
            buf.append(base32[pointer]);
            bitsCopy <<= 5;
        }
        return buf.toString();
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,within,"    public boolean within(GeoHash boundingBox) {
        return (bits & boundingBox.mask()) == boundingBox.bits;
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,contains,"    public boolean contains(WGS84Point point) {
        return boundingBox.contains(point);
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,getPoint,"    public WGS84Point getPoint() {
        return point;
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,getBoundingBoxCenterPoint,"    public WGS84Point getBoundingBoxCenterPoint() {
        return boundingBox.getCenterPoint();
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,getBoundingBox,"    public BoundingBox getBoundingBox() {
        return boundingBox;
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,enclosesCircleAroundPoint,"    public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
        return false;
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,recombineLatLonBitsToHash,"    protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
        GeoHash hash = new GeoHash();
        boolean isEvenBit = false;
        latBits[0] <<= (64 - latBits[1]);
        lonBits[0] <<= (64 - lonBits[1]);
        double[] latitudeRange = {-90.0, 90.0};
        double[] longitudeRange = {-180.0, 180.0};

        for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
            if (isEvenBit) {
                divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
                latBits[0] <<= 1;
            } else {
                divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
                lonBits[0] <<= 1;
            }
            isEvenBit = !isEvenBit;
        }
        hash.bits <<= (64 - hash.significantBits);
        setBoundingBox(hash, latitudeRange, longitudeRange);
        return hash;
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,getNorthernNeighbour,"    public GeoHash getNorthernNeighbour() {
        long[] latitudeBits = getRightAlignedLatitudeBits();
        long[] longitudeBits = getRightAlignedLongitudeBits();
        latitudeBits[0] += 1;
        latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
        return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,getSouthernNeighbour,"    public GeoHash getSouthernNeighbour() {
        long[] latitudeBits = getRightAlignedLatitudeBits();
        long[] longitudeBits = getRightAlignedLongitudeBits();
        latitudeBits[0] -= 1;
        latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
        return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,getEasternNeighbour,"    public GeoHash getEasternNeighbour() {
        long[] latitudeBits = getRightAlignedLatitudeBits();
        long[] longitudeBits = getRightAlignedLongitudeBits();
        longitudeBits[0] += 1;
        longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
        return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,getWesternNeighbour,"    public GeoHash getWesternNeighbour() {
        long[] latitudeBits = getRightAlignedLatitudeBits();
        long[] longitudeBits = getRightAlignedLongitudeBits();
        longitudeBits[0] -= 1;
        longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
        return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,getRightAlignedLatitudeBits,"    protected long[] getRightAlignedLatitudeBits() {
        long copyOfBits = bits << 1;
        long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
        return new long[]{value, getNumberOfLatLonBits()[0]};
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,getRightAlignedLongitudeBits,"    protected long[] getRightAlignedLongitudeBits() {
        long copyOfBits = bits;
        long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
        return new long[]{value, getNumberOfLatLonBits()[1]};
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,extractEverySecondBit,"    private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
        long value = 0;
        for (int i = 0; i < numberOfBits; i++) {
            if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
                value |= 0x1;
            }
            value <<= 1;
            copyOfBits <<= 2;
        }
        value >>>= 1;
        return value;
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,getNumberOfLatLonBits,"    protected int[] getNumberOfLatLonBits() {
        if (significantBits % 2 == 0) {
            return new int[]{significantBits / 2, significantBits / 2};",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,addOnBitToEnd,"    protected final void addOnBitToEnd() {
        significantBits++;
        bits <<= 1;
        bits = bits | 0x1;
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,addOffBitToEnd,"    protected final void addOffBitToEnd() {
        significantBits++;
        bits <<= 1;
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,toString,"    public String toString() {
        if (significantBits % 5 == 0) {
            return String.format(""%s -> %s -> %s"", Long.toBinaryString(bits), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,toStringWithSignificantPrecision,"    public String toStringWithSignificantPrecision() {
        return Long.toBinaryString(bits).substring(0, significantBits);
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,equals,"    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj instanceof GeoHash) {
            GeoHash other = (GeoHash) obj;
            if (other.significantBits == significantBits && other.bits == bits) {
                return true;
            }
        }
        return false;
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,hashCode,"    public int hashCode() {
        int f = 17;
        f = 31 * f + (int) (bits ^ (bits >>> 32));
        f = 31 * f + significantBits;
        return f;
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,mask,"    private long mask() {
        if (significantBits == 0) {
            return 0;",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,maskLastNBits,"    private long maskLastNBits(long value, long n) {
        long mask = 0xffffffffffffffffl;
        mask >>>= (64 - n);
        return value & mask;
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHash.java,compareTo,"    public int compareTo(GeoHash o) {
        return new Long(bits).compareTo(o.bits);
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,WGS84Point.java,getLatitude,"    public double getLatitude() {
        return latitude;
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,WGS84Point.java,getLongitude,"    public double getLongitude() {
        return longitude;
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,WGS84Point.java,toString,"    public String toString() {
        return String.format(""("" + latitude + "","" + longitude + "")"");
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,WGS84Point.java,equals,"    public boolean equals(Object obj) {
        if (obj instanceof WGS84Point) {
            WGS84Point other = (WGS84Point) obj;
            return latitude == other.latitude && longitude == other.longitude;
        }
        return false;
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,WGS84Point.java,hashCode,"    public int hashCode() {
        int result = 42;
        long latBits = Double.doubleToLongBits(latitude);
        long lonBits = Double.doubleToLongBits(longitude);
        result = 31 * result + (int) (latBits ^ (latBits >>> 32));
        result = 31 * result + (int) (lonBits ^ (lonBits >>> 32));
        return result;
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHashBoundingBoxQuery.java,addSearchHash,"    private void addSearchHash(GeoHash hash) {
        if (boundingBox == null) {
            boundingBox = new BoundingBox(hash.getBoundingBox());
        } else {
            boundingBox.expandToInclude(hash.getBoundingBox());
        }
        searchHashes.add(hash);
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHashBoundingBoxQuery.java,expandSearch,"    private void expandSearch(GeoHash centerHash, BoundingBox bbox) {
        addSearchHash(centerHash);

        for (GeoHash adjacent : centerHash.getAdjacent()) {
            BoundingBox adjacentBox = adjacent.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHashBoundingBoxQuery.java,hashFits,"    private boolean hashFits(GeoHash hash, BoundingBox bbox) {
        return hash.contains(bbox.getUpperLeft()) && hash.contains(bbox.getLowerRight());
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHashBoundingBoxQuery.java,contains,"    public boolean contains(GeoHash hash) {
        for (GeoHash searchHash : searchHashes) {
            if (hash.within(searchHash))
                return true;
        }
        return false;
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHashBoundingBoxQuery.java,contains,"    public boolean contains(WGS84Point point) {
        return contains(GeoHash.withBitPrecision(point.getLatitude(), point.getLongitude(), 64));
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHashBoundingBoxQuery.java,getSearchHashes,"    public List<GeoHash> getSearchHashes() {
        return searchHashes;
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHashBoundingBoxQuery.java,toString,"    public String toString() {
        StringBuilder bui = new StringBuilder();
        for (GeoHash hash : searchHashes) {
            bui.append(hash).append(""\n"");
        }
        return bui.toString();
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHashBoundingBoxQuery.java,getWktBox,"    public String getWktBox() {
        return ""BOX("" + boundingBox.getMinLon() + "" "" + boundingBox.getMinLat() + "","" + boundingBox.getMaxLon() + "" ""
                + boundingBox.getMaxLat() + "")"";",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHashCircleQuery.java,contains,"    public boolean contains(GeoHash hash) {
        return query.contains(hash);
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHashCircleQuery.java,getWktBox,"    public String getWktBox() {
        return query.getWktBox();
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHashCircleQuery.java,getSearchHashes,"    public List<GeoHash> getSearchHashes() {
        return query.getSearchHashes();
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHashCircleQuery.java,toString,"    public String toString() {
        return ""Cicle Query [center="" + center + "", radius="" + getRadiusString() + ""]"";
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHashCircleQuery.java,getRadiusString,"    private String getRadiusString() {
        if (radius > 1000) {
            return radius / 1000 + ""km"";",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
6b002b601c987c5120348bcb681737f8390b78c2,GeoHashCircleQuery.java,contains,"    public boolean contains(WGS84Point point) {
        return query.contains(point);
    }",https://www.github.com/kungfoo/geohash-java/commit/6b002b601c987c5120348bcb681737f8390b78c2
a6bdf7c2b015405345879f727fe411a7b7e1ee32,BoundingBox.java,getUpperLeft,"	public WGS84Point getUpperLeft() {
		return new WGS84Point(maxLat, minLon);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,BoundingBox.java,getLowerRight,"	public WGS84Point getLowerRight() {
		return new WGS84Point(minLat, maxLon);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,BoundingBox.java,getLatitudeSize,"	public double getLatitudeSize() {
		return maxLat - minLat;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,BoundingBox.java,getLongitudeSize,"	public double getLongitudeSize() {
		return maxLon - minLon;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,BoundingBox.java,equals,"	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj instanceof BoundingBox) {
			BoundingBox that = (BoundingBox) obj;",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,BoundingBox.java,hashCode,"	public int hashCode() {
		int result = 17;
		result = 37 * result + hashCode(minLat);
		result = 37 * result + hashCode(maxLat);
		result = 37 * result + hashCode(minLon);
		result = 37 * result + hashCode(maxLon);
		return result;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,BoundingBox.java,hashCode,"	private static int hashCode(double x) {
		long f = Double.doubleToLongBits(x);
		return (int) (f ^ (f >>> 32));
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,BoundingBox.java,contains,"	public boolean contains(WGS84Point point) {
		return (point.getLatitude() >= minLat) && (point.getLongitude() >= minLon) && (point.getLatitude() <= maxLat)
				&& (point.getLongitude() <= maxLon);",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,BoundingBox.java,intersects,"	public boolean intersects(BoundingBox other) {
		return !(other.minLon > maxLon || other.maxLon < minLon || other.minLat > maxLat || other.maxLat < minLat);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,BoundingBox.java,toString,"	public String toString() {
		return getUpperLeft() + "" -> "" + getLowerRight();
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,BoundingBox.java,getCenterPoint,"	public WGS84Point getCenterPoint() {
		double centerLatitude = (minLat + maxLat) / 2;
		double centerLongitude = (minLon + maxLon) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,BoundingBox.java,expandToInclude,"	public void expandToInclude(BoundingBox other) {
		if (other.minLon < minLon) {
			minLon = other.minLon;
		}
		if (other.maxLon > maxLon) {
			maxLon = other.maxLon;
		}
		if (other.minLat < minLat) {
			minLat = other.minLat;
		}
		if (other.maxLat > maxLat) {
			maxLat = other.maxLat;",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,BoundingBox.java,getMinLon,"	public double getMinLon() {
		return minLon;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,BoundingBox.java,getMinLat,"	public double getMinLat() {
		return minLat;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,BoundingBox.java,getMaxLat,"	public double getMaxLat() {
		return maxLat;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,BoundingBox.java,getMaxLon,"	public double getMaxLon() {
		return maxLon;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,fromBinaryString,"	public static GeoHash fromBinaryString(String binaryString) {
		GeoHash geohash = new GeoHash();
		geohash.significantBits = (byte) binaryString.length();
		if (binaryString.length() < 64) {
			StringBuffer b = new StringBuffer();
			b.append(binaryString);
			for (int i = binaryString.length(); i < 63; i++) {
				b.append(""0"");
			}
			binaryString = b.toString();
		}

		geohash.bits = Long.valueOf(binaryString, 2);
		long[] latitudeBits = geohash.getRightAlignedLatitudeBits();
		long[] longitudeBits = geohash.getRightAlignedLongitudeBits();
		return geohash.recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,fromLongValue,"	public static GeoHash fromLongValue(long hashVal, int significantBits) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		String binaryString = Long.toBinaryString(hashVal);
		while (binaryString.length() < 64) {
			binaryString = ""0"" + binaryString;
		}
		for (int j = 0; j < significantBits; j++) {
			if (isEvenBit) {
				divideRangeDecode(hash, longitudeRange, binaryString.charAt(j) != '0');
			} else {
				divideRangeDecode(hash, latitudeRange, binaryString.charAt(j) != '0');
			}
			isEvenBit = !isEvenBit;
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(
				latitudeRange[1],",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,next,"	public GeoHash next() {
		return fromLongValue(bits + (1l << (64 - significantBits)), significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern,",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,longValue,"	public long longValue() {
		return bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,toBase32,"	public String toBase32() {
		if (significantBits % 5 != 0) {
			return """";
		}
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", Long.toBinaryString(bits), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,toStringWithSignificantPrecision,"	public String toStringWithSignificantPrecision() {
		return Long.toBinaryString(bits).substring(0, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,mask,"	private long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHash.java,compareTo,"	public int compareTo(GeoHash o) {
		return new Long(bits).compareTo(o.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,WGS84Point.java,getLatitude,"	public double getLatitude() {
		return latitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,WGS84Point.java,getLongitude,"	public double getLongitude() {
		return longitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,WGS84Point.java,toString,"	public String toString() {
		return String.format(""("" + latitude + "","" + longitude + "")"");
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,WGS84Point.java,equals,"	public boolean equals(Object obj) {
		if (obj instanceof WGS84Point) {
			WGS84Point other = (WGS84Point) obj;
			return latitude == other.latitude && longitude == other.longitude;
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,WGS84Point.java,hashCode,"	public int hashCode() {
		int result = 42;
		long latBits = Double.doubleToLongBits(latitude);
		long lonBits = Double.doubleToLongBits(longitude);
		result = 31 * result + (int) (latBits ^ (latBits >>> 32));
		result = 31 * result + (int) (lonBits ^ (lonBits >>> 32));
		return result;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHashBoundingBoxQuery.java,addSearchHash,"	private void addSearchHash(GeoHash hash) {
		if (boundingBox == null) {
			boundingBox = new BoundingBox(hash.getBoundingBox());
		} else {
			boundingBox.expandToInclude(hash.getBoundingBox());
		}
		searchHashes.add(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHashBoundingBoxQuery.java,expandSearch,"	private void expandSearch(GeoHash centerHash, BoundingBox bbox) {
		addSearchHash(centerHash);

		for (GeoHash adjacent : centerHash.getAdjacent()) {
			BoundingBox adjacentBox = adjacent.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHashBoundingBoxQuery.java,hashFits,"	private boolean hashFits(GeoHash hash, BoundingBox bbox) {
		return hash.contains(bbox.getUpperLeft()) && hash.contains(bbox.getLowerRight());
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHashBoundingBoxQuery.java,contains,"	public boolean contains(GeoHash hash) {
		for (GeoHash searchHash : searchHashes) {
			if (hash.within(searchHash))
				return true;
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHashBoundingBoxQuery.java,contains,"	public boolean contains(WGS84Point point) {
		return contains(GeoHash.withBitPrecision(point.getLatitude(), point.getLongitude(), 64));
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHashBoundingBoxQuery.java,getSearchHashes,"	public List<GeoHash> getSearchHashes() {
		return searchHashes;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHashBoundingBoxQuery.java,toString,"	public String toString() {
		StringBuilder bui = new StringBuilder();
		for (GeoHash hash : searchHashes) {
			bui.append(hash).append(""\n"");
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHashBoundingBoxQuery.java,getWktBox,"	public String getWktBox() {
		return ""BOX("" + boundingBox.getMinLon() + "" "" + boundingBox.getMinLat() + "","" + boundingBox.getMaxLon() + "" ""
				+ boundingBox.getMaxLat() + "")"";",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHashCircleQuery.java,contains,"	public boolean contains(GeoHash hash) {
		return query.contains(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHashCircleQuery.java,getWktBox,"	public String getWktBox() {
		return query.getWktBox();
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHashCircleQuery.java,getSearchHashes,"	public List<GeoHash> getSearchHashes() {
		return query.getSearchHashes();
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHashCircleQuery.java,toString,"	public String toString() {
		return ""Cicle Query [center="" + center + "", radius="" + getRadiusString() + ""]"";
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHashCircleQuery.java,getRadiusString,"	private String getRadiusString() {
		if (radius > 1000) {
			return radius / 1000 + ""km"";",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
a6bdf7c2b015405345879f727fe411a7b7e1ee32,GeoHashCircleQuery.java,contains,"	public boolean contains(WGS84Point point) {
		return query.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6bdf7c2b015405345879f727fe411a7b7e1ee32
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,fromBinaryString,"	public static GeoHash fromBinaryString(String binaryString) {
		GeoHash geohash = new GeoHash();
		geohash.significantBits = (byte) binaryString.length();
		if (binaryString.length() < 64) {
			StringBuilder b = new StringBuilder();
			b.append(binaryString);
			for (int i = binaryString.length(); i < 64; i++) {
				b.append('0');
			}
			binaryString = b.toString();
		}

		geohash.bits = Long.parseLong(binaryString, 2);
		long[] latitudeBits = geohash.getRightAlignedLatitudeBits();
		long[] longitudeBits = geohash.getRightAlignedLongitudeBits();
		return geohash.recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,fromLongValue,"	public static GeoHash fromLongValue(long hashVal, int significantBits) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		String binaryString = Long.toBinaryString(hashVal);
		while (binaryString.length() < 64) {
			binaryString = ""0"" + binaryString;
		}
		for (int j = 0; j < significantBits; j++) {
			if (isEvenBit) {
				divideRangeDecode(hash, longitudeRange, binaryString.charAt(j) != '0');
			} else {
				divideRangeDecode(hash, latitudeRange, binaryString.charAt(j) != '0');
			}
			isEvenBit = !isEvenBit;
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(
				latitudeRange[1],",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,next,"	public GeoHash next() {
		return fromLongValue(bits + (1l << (64 - significantBits)), significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern,",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,longValue,"	public long longValue() {
		return bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,toBase32,"	public String toBase32() {
		if (significantBits % 5 != 0) {
			return """";
		}
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", Long.toBinaryString(bits), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,toBinaryString,"	public String toBinaryString() {
		StringBuilder bui = new StringBuilder();
		long bitsCopy = bits;
		for (int i = 0; i < significantBits; i++) {
			if ((bitsCopy & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				bui.append('1');
			} else {
				bui.append('0');
			}
			bitsCopy <<= 1;
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,mask,"	private long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHash.java,compareTo,"	public int compareTo(GeoHash o) {
		return new Long(bits).compareTo(o.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
		rand = new Random();
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			BoundingBox bbox = gh.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,testToAndFromBinaryString,"	public void testToAndFromBinaryString() {
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			String binaryString = gh.toBinaryString();",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,testOffendingBinaryString,"	public void testOffendingBinaryString() {
		String offendingString = ""1000000000000000000010101000000000000000000000000000000000000000"";
		assertEquals(64, offendingString.length());
		Long.parseLong(offendingString, 2);
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertWithin(hash, bbox);
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,assertWithin,"	private void assertWithin(GeoHash hash, GeoHash bbox) {
		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xd000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xc000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);
",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertEquals(start.getBoundingBox(), end.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
			double randomLatitude = (rand.nextDouble() - 0.5) * 180;",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,testKnownNeighbouringHashes,"	public void testKnownNeighbouringHashes() {
		GeoHash h1 = GeoHash.fromGeohashString(""u1pb"");
		assertEquals(""u0zz"", h1.getSouthernNeighbour().toBase32());
		assertEquals(""u1pc"", h1.getNorthernNeighbour().toBase32());
		assertEquals(""u300"", h1.getEasternNeighbour().toBase32());
		assertEquals(""u302"", h1.getEasternNeighbour().getEasternNeighbour().toBase32());
		assertEquals(""u1p8"", h1.getWesternNeighbour().toBase32());

		assertEquals(""sp2j"", GeoHash.withCharacterPrecision(41.7, 0.08, 4).toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,testKnownAdjacentNeighbours,"	public void testKnownAdjacentNeighbours() {
		String center = ""dqcjqc"";
		String[] adjacent = new String[] { ""dqcjqf"", ""dqcjqb"", ""dqcjr1"", ""dqcjq9"", ""dqcjqd"", ""dqcjr4"", ""dqcjr0"",
				""dqcjq8"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""u1x0dfg"";
		adjacent = new String[] { ""u1x0dg4"", ""u1x0dg5"", ""u1x0dgh"", ""u1x0dfu"", ""u1x0dfs"", ""u1x0dfe"", ""u1x0dfd"",
				""u1x0dff"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""sp2j"";
		adjacent = new String[] { ""ezry"", ""sp2n"", ""sp2q"", ""sp2m"", ""sp2k"", ""sp2h"", ""ezru"", ""ezrv"" };
		assertAdjacentHashesAre(center, adjacent);
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,assertAdjacentHashesAre,"	private void assertAdjacentHashesAre(String centerString, String[] adjacentStrings) {
		GeoHash center = GeoHash.fromGeohashString(centerString);
		GeoHash[] adjacent = center.getAdjacent();
		for (String check : adjacentStrings) {
			assertArrayContainsGeoHash(check, adjacent);",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,assertArrayContainsGeoHash,"	private void assertArrayContainsGeoHash(String check, GeoHash[] hashes) {
		boolean found = false;
		for (GeoHash hash : hashes) {
			if (hash.toBase32().equals(check)) {
				found = true;
				break;
			}
		}
		assertTrue(""Array should contain "" + check, found);
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,testNeibouringHashesNearMeridian,"	public void testNeibouringHashesNearMeridian() {
		GeoHash hash = GeoHash.fromGeohashString(""sp2j"");
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(""ezrv"", west.toBase32());
		west = west.getWesternNeighbour();
		assertEquals(""ezrt"", west.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,testSimpleWithin,"	public void testSimpleWithin() {
		GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
		GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
		assertWithin(inside, hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(hash.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,testToLongAndBack,"	public void testToLongAndBack() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		long lv = hash.longValue();
		assertEquals(lv + (1 << (64 - hash.significantBits())), hash.next().longValue());
		GeoHash hashFromLong = GeoHash.fromLongValue(lv, hash.significantBits());
		assertEquals(""dr4jb0bn21"", hashFromLong.toBase32());
		assertEquals(hash, hashFromLong);
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,GeoHashTest.java,testNext,"	public void testNext() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 10);
		GeoHash next = hash.next();
		assertTrue(hash.compareTo(next) < 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,RandomGeohashes.java,fullRange,"	public static Iterable<GeoHash> fullRange() {
		return new Iterable<GeoHash>() {
			@Override",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e,RandomGeohashes.java,iterator,"			public Iterator<GeoHash> iterator() {
				Random rand = new Random();
				List<GeoHash> hashes = new ArrayList<GeoHash>();
				for (double lat = -90; lat <= 90; lat += rand.nextDouble() + 1.45) {
					for (double lon = -180; lon <= 180; lon += rand.nextDouble() + 1.54) {
						for (int precisionChars = 6; precisionChars <= 12; precisionChars++) {
							GeoHash gh = GeoHash.withCharacterPrecision(lat, lon, precisionChars);
							hashes.add(gh);
						}
					}
				}
				return hashes.iterator();
			}",https://www.github.com/kungfoo/geohash-java/commit/d0f9ca6afd5617f95c55d66fe7b2bd900e80a96e
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,fromBinaryString,"	public static GeoHash fromBinaryString(String binaryString) {
		GeoHash geohash = new GeoHash();
		for(int i = 0; i < binaryString.length(); i++){
			if(binaryString.charAt(i) == '1'){
				geohash.addOnBitToEnd();
			} else if(binaryString.charAt(i) == '0') {
				geohash.addOffBitToEnd();
			} else {
				throw new IllegalArgumentException(binaryString + "" is not a valid geohash as a binary string"");
			}
		}
		geohash.bits <<= (64 - geohash.significantBits);
		long[] latitudeBits = geohash.getRightAlignedLatitudeBits();
		long[] longitudeBits = geohash.getRightAlignedLongitudeBits();
		return geohash.recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,fromLongValue,"	public static GeoHash fromLongValue(long hashVal, int significantBits) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		String binaryString = Long.toBinaryString(hashVal);
		while (binaryString.length() < 64) {
			binaryString = ""0"" + binaryString;
		}
		for (int j = 0; j < significantBits; j++) {
			if (isEvenBit) {
				divideRangeDecode(hash, longitudeRange, binaryString.charAt(j) != '0');
			} else {
				divideRangeDecode(hash, latitudeRange, binaryString.charAt(j) != '0');
			}
			isEvenBit = !isEvenBit;
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(
				latitudeRange[1],",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,next,"	public GeoHash next() {
		return fromLongValue(bits + (1l << (64 - significantBits)), significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern,",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,longValue,"	public long longValue() {
		return bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,toBase32,"	public String toBase32() {
		if (significantBits % 5 != 0) {
			return """";
		}
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", Long.toBinaryString(bits), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,toBinaryString,"	public String toBinaryString() {
		StringBuilder bui = new StringBuilder();
		long bitsCopy = bits;
		for (int i = 0; i < significantBits; i++) {
			if ((bitsCopy & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				bui.append('1');
			} else {
				bui.append('0');
			}
			bitsCopy <<= 1;
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,mask,"	private long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHash.java,compareTo,"	public int compareTo(GeoHash o) {
		return new Long(bits).compareTo(o.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
		rand = new Random();
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			BoundingBox bbox = gh.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,testToAndFromBinaryString,"	public void testToAndFromBinaryString() {
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			String binaryString = gh.toBinaryString();",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertWithin(hash, bbox);
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,assertWithin,"	private void assertWithin(GeoHash hash, GeoHash bbox) {
		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xd000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xc000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);
",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertEquals(start.getBoundingBox(), end.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
			double randomLatitude = (rand.nextDouble() - 0.5) * 180;",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,testKnownNeighbouringHashes,"	public void testKnownNeighbouringHashes() {
		GeoHash h1 = GeoHash.fromGeohashString(""u1pb"");
		assertEquals(""u0zz"", h1.getSouthernNeighbour().toBase32());
		assertEquals(""u1pc"", h1.getNorthernNeighbour().toBase32());
		assertEquals(""u300"", h1.getEasternNeighbour().toBase32());
		assertEquals(""u302"", h1.getEasternNeighbour().getEasternNeighbour().toBase32());
		assertEquals(""u1p8"", h1.getWesternNeighbour().toBase32());

		assertEquals(""sp2j"", GeoHash.withCharacterPrecision(41.7, 0.08, 4).toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,testKnownAdjacentNeighbours,"	public void testKnownAdjacentNeighbours() {
		String center = ""dqcjqc"";
		String[] adjacent = new String[] { ""dqcjqf"", ""dqcjqb"", ""dqcjr1"", ""dqcjq9"", ""dqcjqd"", ""dqcjr4"", ""dqcjr0"",
				""dqcjq8"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""u1x0dfg"";
		adjacent = new String[] { ""u1x0dg4"", ""u1x0dg5"", ""u1x0dgh"", ""u1x0dfu"", ""u1x0dfs"", ""u1x0dfe"", ""u1x0dfd"",
				""u1x0dff"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""sp2j"";
		adjacent = new String[] { ""ezry"", ""sp2n"", ""sp2q"", ""sp2m"", ""sp2k"", ""sp2h"", ""ezru"", ""ezrv"" };
		assertAdjacentHashesAre(center, adjacent);
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,assertAdjacentHashesAre,"	private void assertAdjacentHashesAre(String centerString, String[] adjacentStrings) {
		GeoHash center = GeoHash.fromGeohashString(centerString);
		GeoHash[] adjacent = center.getAdjacent();
		for (String check : adjacentStrings) {
			assertArrayContainsGeoHash(check, adjacent);",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,assertArrayContainsGeoHash,"	private void assertArrayContainsGeoHash(String check, GeoHash[] hashes) {
		boolean found = false;
		for (GeoHash hash : hashes) {
			if (hash.toBase32().equals(check)) {
				found = true;
				break;
			}
		}
		assertTrue(""Array should contain "" + check, found);
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,testNeibouringHashesNearMeridian,"	public void testNeibouringHashesNearMeridian() {
		GeoHash hash = GeoHash.fromGeohashString(""sp2j"");
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(""ezrv"", west.toBase32());
		west = west.getWesternNeighbour();
		assertEquals(""ezrt"", west.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,testSimpleWithin,"	public void testSimpleWithin() {
		GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
		GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
		assertWithin(inside, hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(hash.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,testToLongAndBack,"	public void testToLongAndBack() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		long lv = hash.longValue();
		assertEquals(lv + (1 << (64 - hash.significantBits())), hash.next().longValue());
		GeoHash hashFromLong = GeoHash.fromLongValue(lv, hash.significantBits());
		assertEquals(""dr4jb0bn21"", hashFromLong.toBase32());
		assertEquals(hash, hashFromLong);
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
60dbfe470a4dee36503f6f7802d4be9e46e446be,GeoHashTest.java,testNext,"	public void testNext() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 10);
		GeoHash next = hash.next();
		assertTrue(hash.compareTo(next) < 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/60dbfe470a4dee36503f6f7802d4be9e46e446be
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,withCharacterPrecision,"    public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
        int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
        return new GeoHash(latitude, longitude, desiredPrecision);
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,withBitPrecision,"    public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
        if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
            throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
        return new GeoHash(latitude, longitude, numberOfBits);
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,fromBinaryString,"    public static GeoHash fromBinaryString(String binaryString) {
        GeoHash geohash = new GeoHash();
        geohash.significantBits = (byte) binaryString.length();
        if (binaryString.length() < 64) {
            StringBuffer b = new StringBuffer();
            b.append(binaryString);
            for (int i = binaryString.length(); i < 63; i++) {
                b.append(""0"");
            }
            binaryString = b.toString();
        }

        geohash.bits = Long.valueOf(binaryString, 2);
        long[] latitudeBits = geohash.getRightAlignedLatitudeBits();
        long[] longitudeBits = geohash.getRightAlignedLongitudeBits();
        return geohash.recombineLatLonBitsToHash(latitudeBits, longitudeBits);
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,fromGeohashString,"    public static GeoHash fromGeohashString(String geohash) {
        double[] latitudeRange = {-90.0, 90.0};
        double[] longitudeRange = {-180.0, 180.0};

        boolean isEvenBit = true;
        GeoHash hash = new GeoHash();

        for (int i = 0; i < geohash.length(); i++) {
            int cd = decodeMap.get(geohash.charAt(i));
            for (int j = 0; j < BASE32_BITS; j++) {
                int mask = BITS[j];
                if (isEvenBit) {
                    divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
                } else {
                    divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
                }
                isEvenBit = !isEvenBit;
            }
        }

        double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
        double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

        hash.point = new WGS84Point(latitude, longitude);
        setBoundingBox(hash, latitudeRange, longitudeRange);
        hash.bits <<= (64 - hash.significantBits);
        return hash;
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,fromLongValue,"    public static GeoHash fromLongValue(long hashVal, int significantBits) {
        double[] latitudeRange = {-90.0, 90.0};
        double[] longitudeRange = {-180.0, 180.0};

        boolean isEvenBit = true;
        GeoHash hash = new GeoHash();

        String binaryString = Long.toBinaryString(hashVal);
        while (binaryString.length() < 64) {
            binaryString = ""0"" + binaryString;
        }
        for (int j = 0; j < significantBits; j++) {
            if (isEvenBit) {
                divideRangeDecode(hash, longitudeRange, binaryString.charAt(j) != '0');
            } else {
                divideRangeDecode(hash, latitudeRange, binaryString.charAt(j) != '0');
            }
            isEvenBit = !isEvenBit;
        }

        double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
        double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

        hash.point = new WGS84Point(latitude, longitude);
        setBoundingBox(hash, latitudeRange, longitudeRange);
        hash.bits <<= (64 - hash.significantBits);
        return hash;
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,setBoundingBox,"    private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
        hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(latitudeRange[1],
                longitudeRange[1]));",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,next,"    public GeoHash next(int step) {
        int insignificantBits = 64 - significantBits;
        long unshiftedVal = bits >> insignificantBits;
        unshiftedVal += step;
        return fromLongValue(unshiftedVal << insignificantBits, significantBits);
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,next,"    public GeoHash next() {
        return next(1);
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,prev,"    public GeoHash prev() {
        return next(-1);
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,stepsBetween,"    public static long stepsBetween(GeoHash one, GeoHash two) {
        if (one.significantBits() != two.significantBits())
            throw new IllegalArgumentException(""It is only valid to compare the number of steps between two hashes if they have the same number of significant bits"");
        int insignificantBits = 64 - one.significantBits();
        long unshiftedVal1 = one.bits >> insignificantBits;
        long unshiftedVal2 = two.bits >> insignificantBits;
        return unshiftedVal2 - unshiftedVal1;
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,divideRangeEncode,"    private void divideRangeEncode(double value, double[] range) {
        double mid = (range[0] + range[1]) / 2;
        if (value >= mid) {
            addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,divideRangeDecode,"    private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
        double mid = (range[0] + range[1]) / 2;
        if (b) {
            hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,getAdjacent,"    public GeoHash[] getAdjacent() {
        GeoHash northern = getNorthernNeighbour();
        GeoHash eastern = getEasternNeighbour();
        GeoHash southern = getSouthernNeighbour();
        GeoHash western = getWesternNeighbour();
        return new GeoHash[]{northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(), southern,
                southern.getWesternNeighbour(), western, northern.getWesternNeighbour()};",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,significantBits,"    public int significantBits() {
        return (int) significantBits;
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,longValue,"    public long longValue() {
        return bits;
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,toBase32,"    public String toBase32() {
        if (significantBits % 5 != 0) {
            return """";
        }
        StringBuilder buf = new StringBuilder();

        long firstFiveBitsMask = 0xf800000000000000l;
        long bitsCopy = bits;
        int partialChunks = (int) Math.ceil(((double) significantBits / 5));

        for (int i = 0; i < partialChunks; i++) {
            int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
            buf.append(base32[pointer]);
            bitsCopy <<= 5;
        }
        return buf.toString();
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,within,"    public boolean within(GeoHash boundingBox) {
        return (bits & boundingBox.mask()) == boundingBox.bits;
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,contains,"    public boolean contains(WGS84Point point) {
        return boundingBox.contains(point);
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,getPoint,"    public WGS84Point getPoint() {
        return point;
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,getBoundingBoxCenterPoint,"    public WGS84Point getBoundingBoxCenterPoint() {
        return boundingBox.getCenterPoint();
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,getBoundingBox,"    public BoundingBox getBoundingBox() {
        return boundingBox;
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,enclosesCircleAroundPoint,"    public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
        return false;
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,recombineLatLonBitsToHash,"    protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
        GeoHash hash = new GeoHash();
        boolean isEvenBit = false;
        latBits[0] <<= (64 - latBits[1]);
        lonBits[0] <<= (64 - lonBits[1]);
        double[] latitudeRange = {-90.0, 90.0};
        double[] longitudeRange = {-180.0, 180.0};

        for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
            if (isEvenBit) {
                divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
                latBits[0] <<= 1;
            } else {
                divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
                lonBits[0] <<= 1;
            }
            isEvenBit = !isEvenBit;
        }
        hash.bits <<= (64 - hash.significantBits);
        setBoundingBox(hash, latitudeRange, longitudeRange);
        return hash;
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,getNorthernNeighbour,"    public GeoHash getNorthernNeighbour() {
        long[] latitudeBits = getRightAlignedLatitudeBits();
        long[] longitudeBits = getRightAlignedLongitudeBits();
        latitudeBits[0] += 1;
        latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
        return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,getSouthernNeighbour,"    public GeoHash getSouthernNeighbour() {
        long[] latitudeBits = getRightAlignedLatitudeBits();
        long[] longitudeBits = getRightAlignedLongitudeBits();
        latitudeBits[0] -= 1;
        latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
        return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,getEasternNeighbour,"    public GeoHash getEasternNeighbour() {
        long[] latitudeBits = getRightAlignedLatitudeBits();
        long[] longitudeBits = getRightAlignedLongitudeBits();
        longitudeBits[0] += 1;
        longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
        return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,getWesternNeighbour,"    public GeoHash getWesternNeighbour() {
        long[] latitudeBits = getRightAlignedLatitudeBits();
        long[] longitudeBits = getRightAlignedLongitudeBits();
        longitudeBits[0] -= 1;
        longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
        return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,getRightAlignedLatitudeBits,"    protected long[] getRightAlignedLatitudeBits() {
        long copyOfBits = bits << 1;
        long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
        return new long[]{value, getNumberOfLatLonBits()[0]};
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,getRightAlignedLongitudeBits,"    protected long[] getRightAlignedLongitudeBits() {
        long copyOfBits = bits;
        long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
        return new long[]{value, getNumberOfLatLonBits()[1]};
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,extractEverySecondBit,"    private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
        long value = 0;
        for (int i = 0; i < numberOfBits; i++) {
            if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
                value |= 0x1;
            }
            value <<= 1;
            copyOfBits <<= 2;
        }
        value >>>= 1;
        return value;
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,getNumberOfLatLonBits,"    protected int[] getNumberOfLatLonBits() {
        if (significantBits % 2 == 0) {
            return new int[]{significantBits / 2, significantBits / 2};",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,addOnBitToEnd,"    protected final void addOnBitToEnd() {
        significantBits++;
        bits <<= 1;
        bits = bits | 0x1;
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,addOffBitToEnd,"    protected final void addOffBitToEnd() {
        significantBits++;
        bits <<= 1;
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,toString,"    public String toString() {
        if (significantBits % 5 == 0) {
            return String.format(""%s -> %s -> %s"", Long.toBinaryString(bits), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,toStringWithSignificantPrecision,"    public String toStringWithSignificantPrecision() {
        return Long.toBinaryString(bits).substring(0, significantBits);
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,equals,"    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj instanceof GeoHash) {
            GeoHash other = (GeoHash) obj;
            if (other.significantBits == significantBits && other.bits == bits) {
                return true;
            }
        }
        return false;
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,hashCode,"    public int hashCode() {
        int f = 17;
        f = 31 * f + (int) (bits ^ (bits >>> 32));
        f = 31 * f + significantBits;
        return f;
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,mask,"    private long mask() {
        if (significantBits == 0) {
            return 0;",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,maskLastNBits,"    private long maskLastNBits(long value, long n) {
        long mask = 0xffffffffffffffffl;
        mask >>>= (64 - n);
        return value & mask;
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHash.java,compareTo,"    public int compareTo(GeoHash o) {
        return new Long(bits).compareTo(o.bits);
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,BoundingBoxGeoHashIterator.java,withCharacterPrecision,"    public static BoundingBoxGeoHashIterator withCharacterPrecision(BoundingBox bbox, int numberOfCharacters) {
        GeoHash bottomLeft = GeoHash.withCharacterPrecision(bbox.getMinLat(), bbox.getMinLon(), numberOfCharacters);
        GeoHash topRight = GeoHash.withCharacterPrecision(bbox.getMaxLat(), bbox.getMaxLon(), numberOfCharacters);
        return new BoundingBoxGeoHashIterator(bottomLeft, topRight);
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,BoundingBoxGeoHashIterator.java,withBitPrecision,"    public static BoundingBoxGeoHashIterator withBitPrecision(BoundingBox bbox, int numberOfBits) {
        GeoHash bottomLeft = GeoHash.withBitPrecision(bbox.getMinLat(), bbox.getMinLon(), numberOfBits);
        GeoHash topRight = GeoHash.withBitPrecision(bbox.getMaxLat(), bbox.getMaxLon(), numberOfBits);
        return new BoundingBoxGeoHashIterator(bottomLeft, topRight);
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,BoundingBoxGeoHashIterator.java,getBoundingBox,"    public BoundingBox getBoundingBox() {
        return boundingBox;
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,BoundingBoxGeoHashIterator.java,getBottomLeft,"    public GeoHash getBottomLeft() {
        return bottomLeft;
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,BoundingBoxGeoHashIterator.java,getTopRight,"    public GeoHash getTopRight() {
        return topRight;
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,BoundingBoxGeoHashIterator.java,hasNext,"    public boolean hasNext() {
        return current.compareTo(topRight) <= 0;
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,BoundingBoxGeoHashIterator.java,next,"    public GeoHash next() {
        GeoHash rv = current;
        if (!hasNext()) throw new NoSuchElementException();
        current = rv.next();
        while (hasNext() && !boundingBox.contains(current.getPoint())) {
            current = current.next();
        }
        return rv;
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,BoundingBoxGeoHashIterator.java,remove,"    public void remove() {
        throw new UnsupportedOperationException();
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,setUp,"    public void setUp() {
        hash = new GeoHash();
        rand = new Random();
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,testAddingOnes,"    public void testAddingOnes() {
        hash.addOnBitToEnd();
        assertEquals(0x1l, hash.bits);
        assertEquals(1, hash.significantBits());
        hash.addOnBitToEnd();
        hash.addOnBitToEnd();
        hash.addOnBitToEnd();
        assertEquals(0xfl, hash.bits);
        assertEquals(4, hash.significantBits());
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,testAddingZeroes,"    public void testAddingZeroes() {
        hash.addOnBitToEnd();
        assertEquals(0x1l, hash.bits);

        hash.addOffBitToEnd();
        hash.addOffBitToEnd();
        hash.addOffBitToEnd();
        hash.addOffBitToEnd();
        assertEquals(0x10l, hash.bits);
        assertEquals(5, hash.significantBits());
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,testToBase32,"    public void testToBase32() {
        hash.bits = 0x6ff0414000000000l;
        hash.significantBits = 25;

        String base32 = hash.toBase32();
        assertEquals(""ezs42"", base32);
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,testDecode,"    public void testDecode() {
        // for all lat/lon pairs check decoded point is in the same bbox as the
        // geohash formed by encoder
        // TODO could possibly be less brute-force here and be more scientific
        // about possible failure points
        for (double lat = -90; lat <= 90; lat += rand.nextDouble() + 1.45) {
            for (double lon = -180; lon <= 180; lon += rand.nextDouble() + 1.54) {",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,testWithin,"    public void testWithin() {
        hash.bits = 0x6ff0414000000000l;
        hash.significantBits = 25;
        System.out.println(hash.toBase32());
        assertEquals(""ezs42"", hash.toBase32());

        GeoHash bbox = new GeoHash();
        bbox.bits = 0x6ff0000000000000l;
        bbox.significantBits = 12;

        assertWithin(hash, bbox);
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,assertWithin,"    private void assertWithin(GeoHash hash, GeoHash bbox) {
        assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,testNotWithin,"    public void testNotWithin() {
        hash.bits = 0x6ff0414000000000l;
        hash.significantBits = 25;
        assertEquals(""ezs42"", hash.toBase32());

        GeoHash bbox = new GeoHash();
        bbox.bits = 0x6fc0000000000000l;
        bbox.significantBits = 12;

        assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,testConstructorWithBitPrecision,"    public void testConstructorWithBitPrecision() {
        GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
        assertEquals(hash1.significantBits, 20);
        System.out.println(hash1);
        System.out.println(hash1.toBase32());

        GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
        assertEquals(hash2.significantBits, 55);
        System.out.println(hash2);
        System.out.println(hash2.toBase32());

        assertTrue(hash2.within(hash1));

        // this should match Dave Troys Codebase. This is also his maximum
        // accuracy (12 5-nibbles).
        GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
        assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,testLatLonBoundingBoxes,"    public void testLatLonBoundingBoxes() {
        hash = GeoHash.withBitPrecision(40, 120, 10);
        System.out.println(hash.toBase32());
        printBoundingBox(hash);
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,testByCharacterPrecision,"    public void testByCharacterPrecision() {
        assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
        assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
        assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

        WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
        String fullStringValue = ""hf7u8p8gn747"";
        for (int characters = 12; characters > 1; characters--) {
            assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
        }

        assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,assertEncodingWithCharacterPrecision,"    private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
        GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
        assertEquals(stringValue, hash.toBase32());
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,testGetLatitudeBits,"    public void testGetLatitudeBits() {
        hash = GeoHash.withBitPrecision(30, 30, 16);
        long[] latitudeBits = hash.getRightAlignedLatitudeBits();
        assertEquals(0xaal, latitudeBits[0]);
        assertEquals(8, latitudeBits[1]);
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,testGetLongitudeBits,"    public void testGetLongitudeBits() {
        hash = GeoHash.withBitPrecision(30, 30, 16);
        long[] longitudeBits = hash.getRightAlignedLongitudeBits();
        assertEquals(0x95l, longitudeBits[0]);
        assertEquals(8, longitudeBits[1]);
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,testNeighbourLocationCode,"    public void testNeighbourLocationCode() {
        // set up corner case
        hash.bits = 0xc400000000000000l;
        hash.significantBits = 7;

        long[] lonBits = hash.getRightAlignedLongitudeBits();
        assertEquals(0x8, lonBits[0]);
        assertEquals(4, lonBits[1]);

        long[] latBits = hash.getRightAlignedLatitudeBits();
        assertEquals(0x5, latBits[0]);
        assertEquals(3, latBits[1]);

        GeoHash north = hash.getNorthernNeighbour();
        assertEquals(0xd000000000000000l, north.bits);
        assertEquals(7, north.significantBits);

        GeoHash south = hash.getSouthernNeighbour();
        assertEquals(0xc000000000000000l, south.bits);
        assertEquals(7, south.significantBits());

        GeoHash east = hash.getEasternNeighbour();
        assertEquals(0xc600000000000000l, east.bits);

        // NOTE: this is actually a corner case!
        GeoHash west = hash.getWesternNeighbour();
        assertEquals(0x6e00000000000000l, west.bits);

        // NOTE: and now, for the most extreme corner case in 7-bit geohash-land
        hash.bits = 0xfe00000000000000l;

        east = hash.getEasternNeighbour();
        assertEquals(0x5400000000000000l, east.bits);
",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,testEqualsAndHashCode,"    public void testEqualsAndHashCode() {
        GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
        GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
        GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

        assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
        assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

        assertEquals(hash1.hashCode(), hash2.hashCode());
        assertFalse(hash1.hashCode() == hash3.hashCode());
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,testAdjacentHashes,"    public void testAdjacentHashes() {
        GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
        assertEquals(8, adjacent.length);
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,testMovingInCircle,"    public void testMovingInCircle() {
        // moving around hashes in a circle should be possible
        checkMovingInCircle(34.2, -45.123);
        // this should also work at the ""back"" of the earth
        checkMovingInCircle(45, 180);
        checkMovingInCircle(90, 180);
        checkMovingInCircle(0, -180);
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,checkMovingInCircle,"    private void checkMovingInCircle(double latitude, double longitude) {
        GeoHash start;
        GeoHash end;
        start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
        end = start.getEasternNeighbour();
        end = end.getSouthernNeighbour();
        end = end.getWesternNeighbour();
        end = end.getNorthernNeighbour();
        assertEquals(start, end);
        assertEquals(start.getBoundingBox(), end.getBoundingBox());
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"    public void testMovingAroundWorldOnHashStrips() throws Exception {
        String[] directions = {""Northern"", ""Eastern"", ""Southern"", ""Western""};
        for (String direction : directions) {
            checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,checkMoveAroundStrip,"    private void checkMoveAroundStrip(String direction) throws Exception {
        for (int bits = 2; bits < 16; bits++) {
            double randomLatitude = (rand.nextDouble() - 0.5) * 180;",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,testKnownNeighbouringHashes,"    public void testKnownNeighbouringHashes() {
        GeoHash h1 = GeoHash.fromGeohashString(""u1pb"");
        assertEquals(""u0zz"", h1.getSouthernNeighbour().toBase32());
        assertEquals(""u1pc"", h1.getNorthernNeighbour().toBase32());
        assertEquals(""u300"", h1.getEasternNeighbour().toBase32());
        assertEquals(""u302"", h1.getEasternNeighbour().getEasternNeighbour().toBase32());
        assertEquals(""u1p8"", h1.getWesternNeighbour().toBase32());

        assertEquals(""sp2j"", GeoHash.withCharacterPrecision(41.7, 0.08, 4).toBase32());
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,testKnownAdjacentNeighbours,"    public void testKnownAdjacentNeighbours() {
        String center = ""dqcjqc"";
        String[] adjacent = new String[]{""dqcjqf"", ""dqcjqb"", ""dqcjr1"", ""dqcjq9"", ""dqcjqd"", ""dqcjr4"", ""dqcjr0"",
                ""dqcjq8""};
        assertAdjacentHashesAre(center, adjacent);

        center = ""u1x0dfg"";
        adjacent = new String[]{""u1x0dg4"", ""u1x0dg5"", ""u1x0dgh"", ""u1x0dfu"", ""u1x0dfs"", ""u1x0dfe"", ""u1x0dfd"",
                ""u1x0dff""};
        assertAdjacentHashesAre(center, adjacent);

        center = ""sp2j"";
        adjacent = new String[]{""ezry"", ""sp2n"", ""sp2q"", ""sp2m"", ""sp2k"", ""sp2h"", ""ezru"", ""ezrv""};
        assertAdjacentHashesAre(center, adjacent);
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,assertAdjacentHashesAre,"    private void assertAdjacentHashesAre(String centerString, String[] adjacentStrings) {
        GeoHash center = GeoHash.fromGeohashString(centerString);
        GeoHash[] adjacent = center.getAdjacent();
        for (String check : adjacentStrings) {
            assertArrayContainsGeoHash(check, adjacent);",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,assertArrayContainsGeoHash,"    private void assertArrayContainsGeoHash(String check, GeoHash[] hashes) {
        boolean found = false;
        for (GeoHash hash : hashes) {
            if (hash.toBase32().equals(check)) {
                found = true;
                break;
            }
        }
        assertTrue(""Array should contain "" + check, found);
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,testNeibouringHashesNearMeridian,"    public void testNeibouringHashesNearMeridian() {
        GeoHash hash = GeoHash.fromGeohashString(""sp2j"");
        GeoHash west = hash.getWesternNeighbour();
        assertEquals(""ezrv"", west.toBase32());
        west = west.getWesternNeighbour();
        assertEquals(""ezrt"", west.toBase32());
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,testIssue1,"    public void testIssue1() {
        double lat = 40.390943;
        double lon = -75.9375;
        GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

        String base32 = ""dr4jb0bn2180"";
        GeoHash fromRef = GeoHash.fromGeohashString(base32);
        assertEquals(hash, fromRef);
        assertEquals(base32, hash.toBase32());
        assertEquals(base32, fromRef.toBase32());

        hash = GeoHash.withCharacterPrecision(lat, lon, 10);
        assertEquals(""dr4jb0bn21"", hash.toBase32());
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,testSimpleWithin,"    public void testSimpleWithin() {
        GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
        GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
        assertWithin(inside, hash);
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,printBoundingBox,"    private void printBoundingBox(GeoHash hash) {
        System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
        System.out.print(""corners="");
        System.out.println(hash.getBoundingBox());
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,testToLongAndBack,"    public void testToLongAndBack() {
        double lat = 40.390943;
        double lon = -75.9375;
        GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 10);
        long lv = hash.longValue();
        assertEquals(lv + (1 << (64 - hash.significantBits())), hash.next().longValue());
        GeoHash hashFromLong = GeoHash.fromLongValue(lv, hash.significantBits());
        assertEquals(""dr4jb0bn21"", hashFromLong.toBase32());
        assertEquals(hash, hashFromLong);
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,testNext,"    public void testNext() {
        double lat = 37.7;
        double lon = -122.52;
        GeoHash hash = GeoHash.withBitPrecision(lat, lon, 10);
        GeoHash next = hash.next();
        assertTrue(hash.compareTo(next) < 0);
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,testNextPrev,"    public void testNextPrev() {
        double lat = 37.7;
        double lon = -122.52;
        GeoHash hash = GeoHash.withBitPrecision(lat, lon, 35);
        GeoHash next = hash.next(2);
        assertTrue(hash.compareTo(next) < 0);
        GeoHash prev1 = next.prev();
        GeoHash prev2 = prev1.next(-1);
        assertTrue(prev1.compareTo(next) < 0);
        System.out.println(""hash: "" + hash.toBase32());
        System.out.println(""next: "" + next.toBase32());
        System.out.println(""prev1: "" + prev1.toBase32());
        System.out.println(""prev2: "" + prev2.toBase32());

        assertTrue(prev2.compareTo(prev1) < 0);
        assertTrue(prev2.compareTo(hash) == 0);
    }",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
c379e380a03992d7b8d4acbfed91204105a6c157,GeoHashTest.java,testStepsBetween,"    public void testStepsBetween() {
        GeoHash bl = GeoHash.withBitPrecision(37.7, -122.52, 35);
        GeoHash ur = GeoHash.withBitPrecision(37.84, -122.35, 35);

        long steps = GeoHash.stepsBetween(bl, bl);
        assertEquals(steps, 0);

        steps = GeoHash.stepsBetween(bl, bl.next(4));
        assertEquals(steps, 4);

        BoundingBoxGeoHashIterator iter = new BoundingBoxGeoHashIterator(bl, ur);
        int count = 0;
        while (iter.hasNext()) {
            iter.next();
            count++;
        }
        assertEquals(12875, count);

        int allHashes = 0;
        int inBbox = 1;
        int latMore = 0;
        int lonMore = 0;
        int bothMore = 0;
        int latLess = 0;
        int lonLess = 0;
        int bothLess = 0;
        int latLessLonMore = 0;
        int latMoreLonLess = 0;
        GeoHash idx = bl;
        while (idx.compareTo(ur) < 0) {
            idx = idx.next();
            allHashes++;
            if (iter.getBoundingBox().contains(idx.getPoint())) {
                inBbox++;
            }
            boolean latIsMore = false;
            boolean latIsLess = false;
            if (idx.getPoint().getLatitude() > iter.getBoundingBox().getMaxLat()) {
                latIsMore = true;
                latMore++;
            } else if (idx.getPoint().getLatitude() < iter.getBoundingBox().getMinLat()) {
                latIsLess = true;
                latLess++;
            }
            if (idx.getPoint().getLongitude() > iter.getBoundingBox().getMaxLon()) {
                lonMore++;
                if (latIsMore) bothMore++;
                if (latIsLess) latLessLonMore++;
            } else if (idx.getPoint().getLongitude() < iter.getBoundingBox().getMinLon()) {
                lonLess++;
                if (latIsLess) bothLess++;
                if (latIsMore) latMoreLonLess++;
            }
        }

        // Just trying to understand where these GeoHashes are with regard to their bounding box.
        steps = GeoHash.stepsBetween(bl, ur);
        assertEquals(48472, steps);
        assertEquals(steps, allHashes);
        assertEquals(count, inBbox);
        assertEquals(14938, latMore);
        assertEquals(640, lonMore);
        assertEquals(0, bothMore);
        assertEquals(7680, latLess);
        assertEquals(24391, lonLess);
        assertEquals(0, bothLess);
        assertEquals(240, latLessLonMore);
        assertEquals(11811, latMoreLonLess);
        assertEquals(steps, lonLess + latLess + latMore + lonMore + inBbox - latLessLonMore - latMoreLonLess - 1);
",https://www.github.com/kungfoo/geohash-java/commit/c379e380a03992d7b8d4acbfed91204105a6c157
097500d42132c81b9e80b5c5b724b36d05a50126,BoundingBoxGeoHashIterator.java,getBoundingBox,"    public TwoGeoHashBoundingBox getBoundingBox() {
        return boundingBox;
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,BoundingBoxGeoHashIterator.java,hasNext,"    public boolean hasNext() {
        return current.compareTo(boundingBox.getTopRight()) <= 0;
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,BoundingBoxGeoHashIterator.java,next,"    public GeoHash next() {
        GeoHash rv = current;
        if (!hasNext()) throw new NoSuchElementException();
        current = rv.next();
        while (hasNext() && !boundingBox.getBoundingBox().contains(current.getPoint())) {
            current = current.next();
        }
        return rv;
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,BoundingBoxGeoHashIterator.java,remove,"    public void remove() {
        throw new UnsupportedOperationException();
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,BoundingBoxSampler.java,getBoundingBox,"    public TwoGeoHashBoundingBox getBoundingBox() {
        return boundingBox;
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,BoundingBoxSampler.java,next,"    public GeoHash next() {
        if (alreadyUsed.size() == maxSamples) return null;
        int idx = rand.nextInt(maxSamples + 1);
        while (alreadyUsed.contains(idx)) {
            idx = rand.nextInt(maxSamples + 1);
        }
        alreadyUsed.add(idx);
        GeoHash gh = boundingBox.getBottomLeft().next(idx);
        if (!boundingBox.getBoundingBox().contains(gh.getPoint())) return next();
        return gh;
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,TwoGeoHashBoundingBox.java,withCharacterPrecision,"    public static TwoGeoHashBoundingBox withCharacterPrecision(BoundingBox bbox, int numberOfCharacters) {
        GeoHash bottomLeft = GeoHash.withCharacterPrecision(bbox.getMinLat(), bbox.getMinLon(), numberOfCharacters);
        GeoHash topRight = GeoHash.withCharacterPrecision(bbox.getMaxLat(), bbox.getMaxLon(), numberOfCharacters);
        return new TwoGeoHashBoundingBox(bottomLeft, topRight);
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,TwoGeoHashBoundingBox.java,withBitPrecision,"    public static TwoGeoHashBoundingBox withBitPrecision(BoundingBox bbox, int numberOfBits) {
        GeoHash bottomLeft = GeoHash.withBitPrecision(bbox.getMinLat(), bbox.getMinLon(), numberOfBits);
        GeoHash topRight = GeoHash.withBitPrecision(bbox.getMaxLat(), bbox.getMaxLon(), numberOfBits);
        return new TwoGeoHashBoundingBox(bottomLeft, topRight);
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,TwoGeoHashBoundingBox.java,getBoundingBox,"    public BoundingBox getBoundingBox() {
        return boundingBox;
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,TwoGeoHashBoundingBox.java,getBottomLeft,"    public GeoHash getBottomLeft() {
        return bottomLeft;
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,TwoGeoHashBoundingBox.java,getTopRight,"    public GeoHash getTopRight() {
        return topRight;
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,setUp,"    public void setUp() {
        hash = new GeoHash();
        rand = new Random();
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,testAddingOnes,"    public void testAddingOnes() {
        hash.addOnBitToEnd();
        assertEquals(0x1l, hash.bits);
        assertEquals(1, hash.significantBits());
        hash.addOnBitToEnd();
        hash.addOnBitToEnd();
        hash.addOnBitToEnd();
        assertEquals(0xfl, hash.bits);
        assertEquals(4, hash.significantBits());
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,testAddingZeroes,"    public void testAddingZeroes() {
        hash.addOnBitToEnd();
        assertEquals(0x1l, hash.bits);

        hash.addOffBitToEnd();
        hash.addOffBitToEnd();
        hash.addOffBitToEnd();
        hash.addOffBitToEnd();
        assertEquals(0x10l, hash.bits);
        assertEquals(5, hash.significantBits());
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,testToBase32,"    public void testToBase32() {
        hash.bits = 0x6ff0414000000000l;
        hash.significantBits = 25;

        String base32 = hash.toBase32();
        assertEquals(""ezs42"", base32);
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,testDecode,"    public void testDecode() {
        // for all lat/lon pairs check decoded point is in the same bbox as the
        // geohash formed by encoder
        // TODO could possibly be less brute-force here and be more scientific
        // about possible failure points
        for (double lat = -90; lat <= 90; lat += rand.nextDouble() + 1.45) {
            for (double lon = -180; lon <= 180; lon += rand.nextDouble() + 1.54) {",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,testWithin,"    public void testWithin() {
        hash.bits = 0x6ff0414000000000l;
        hash.significantBits = 25;
        System.out.println(hash.toBase32());
        assertEquals(""ezs42"", hash.toBase32());

        GeoHash bbox = new GeoHash();
        bbox.bits = 0x6ff0000000000000l;
        bbox.significantBits = 12;

        assertWithin(hash, bbox);
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,assertWithin,"    private void assertWithin(GeoHash hash, GeoHash bbox) {
        assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,testNotWithin,"    public void testNotWithin() {
        hash.bits = 0x6ff0414000000000l;
        hash.significantBits = 25;
        assertEquals(""ezs42"", hash.toBase32());

        GeoHash bbox = new GeoHash();
        bbox.bits = 0x6fc0000000000000l;
        bbox.significantBits = 12;

        assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,testConstructorWithBitPrecision,"    public void testConstructorWithBitPrecision() {
        GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
        assertEquals(hash1.significantBits, 20);
        System.out.println(hash1);
        System.out.println(hash1.toBase32());

        GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
        assertEquals(hash2.significantBits, 55);
        System.out.println(hash2);
        System.out.println(hash2.toBase32());

        assertTrue(hash2.within(hash1));

        // this should match Dave Troys Codebase. This is also his maximum
        // accuracy (12 5-nibbles).
        GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
        assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,testLatLonBoundingBoxes,"    public void testLatLonBoundingBoxes() {
        hash = GeoHash.withBitPrecision(40, 120, 10);
        System.out.println(hash.toBase32());
        printBoundingBox(hash);
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,testByCharacterPrecision,"    public void testByCharacterPrecision() {
        assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
        assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
        assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

        WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
        String fullStringValue = ""hf7u8p8gn747"";
        for (int characters = 12; characters > 1; characters--) {
            assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
        }

        assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,assertEncodingWithCharacterPrecision,"    private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
        GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
        assertEquals(stringValue, hash.toBase32());
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,testGetLatitudeBits,"    public void testGetLatitudeBits() {
        hash = GeoHash.withBitPrecision(30, 30, 16);
        long[] latitudeBits = hash.getRightAlignedLatitudeBits();
        assertEquals(0xaal, latitudeBits[0]);
        assertEquals(8, latitudeBits[1]);
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,testGetLongitudeBits,"    public void testGetLongitudeBits() {
        hash = GeoHash.withBitPrecision(30, 30, 16);
        long[] longitudeBits = hash.getRightAlignedLongitudeBits();
        assertEquals(0x95l, longitudeBits[0]);
        assertEquals(8, longitudeBits[1]);
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,testNeighbourLocationCode,"    public void testNeighbourLocationCode() {
        // set up corner case
        hash.bits = 0xc400000000000000l;
        hash.significantBits = 7;

        long[] lonBits = hash.getRightAlignedLongitudeBits();
        assertEquals(0x8, lonBits[0]);
        assertEquals(4, lonBits[1]);

        long[] latBits = hash.getRightAlignedLatitudeBits();
        assertEquals(0x5, latBits[0]);
        assertEquals(3, latBits[1]);

        GeoHash north = hash.getNorthernNeighbour();
        assertEquals(0xd000000000000000l, north.bits);
        assertEquals(7, north.significantBits);

        GeoHash south = hash.getSouthernNeighbour();
        assertEquals(0xc000000000000000l, south.bits);
        assertEquals(7, south.significantBits());

        GeoHash east = hash.getEasternNeighbour();
        assertEquals(0xc600000000000000l, east.bits);

        // NOTE: this is actually a corner case!
        GeoHash west = hash.getWesternNeighbour();
        assertEquals(0x6e00000000000000l, west.bits);

        // NOTE: and now, for the most extreme corner case in 7-bit geohash-land
        hash.bits = 0xfe00000000000000l;

        east = hash.getEasternNeighbour();
        assertEquals(0x5400000000000000l, east.bits);
",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,testEqualsAndHashCode,"    public void testEqualsAndHashCode() {
        GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
        GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
        GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

        assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
        assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

        assertEquals(hash1.hashCode(), hash2.hashCode());
        assertFalse(hash1.hashCode() == hash3.hashCode());
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,testAdjacentHashes,"    public void testAdjacentHashes() {
        GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
        assertEquals(8, adjacent.length);
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,testMovingInCircle,"    public void testMovingInCircle() {
        // moving around hashes in a circle should be possible
        checkMovingInCircle(34.2, -45.123);
        // this should also work at the ""back"" of the earth
        checkMovingInCircle(45, 180);
        checkMovingInCircle(90, 180);
        checkMovingInCircle(0, -180);
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,checkMovingInCircle,"    private void checkMovingInCircle(double latitude, double longitude) {
        GeoHash start;
        GeoHash end;
        start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
        end = start.getEasternNeighbour();
        end = end.getSouthernNeighbour();
        end = end.getWesternNeighbour();
        end = end.getNorthernNeighbour();
        assertEquals(start, end);
        assertEquals(start.getBoundingBox(), end.getBoundingBox());
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"    public void testMovingAroundWorldOnHashStrips() throws Exception {
        String[] directions = {""Northern"", ""Eastern"", ""Southern"", ""Western""};
        for (String direction : directions) {
            checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,checkMoveAroundStrip,"    private void checkMoveAroundStrip(String direction) throws Exception {
        for (int bits = 2; bits < 16; bits++) {
            double randomLatitude = (rand.nextDouble() - 0.5) * 180;",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,testKnownNeighbouringHashes,"    public void testKnownNeighbouringHashes() {
        GeoHash h1 = GeoHash.fromGeohashString(""u1pb"");
        assertEquals(""u0zz"", h1.getSouthernNeighbour().toBase32());
        assertEquals(""u1pc"", h1.getNorthernNeighbour().toBase32());
        assertEquals(""u300"", h1.getEasternNeighbour().toBase32());
        assertEquals(""u302"", h1.getEasternNeighbour().getEasternNeighbour().toBase32());
        assertEquals(""u1p8"", h1.getWesternNeighbour().toBase32());

        assertEquals(""sp2j"", GeoHash.withCharacterPrecision(41.7, 0.08, 4).toBase32());
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,testKnownAdjacentNeighbours,"    public void testKnownAdjacentNeighbours() {
        String center = ""dqcjqc"";
        String[] adjacent = new String[]{""dqcjqf"", ""dqcjqb"", ""dqcjr1"", ""dqcjq9"", ""dqcjqd"", ""dqcjr4"", ""dqcjr0"",
                ""dqcjq8""};
        assertAdjacentHashesAre(center, adjacent);

        center = ""u1x0dfg"";
        adjacent = new String[]{""u1x0dg4"", ""u1x0dg5"", ""u1x0dgh"", ""u1x0dfu"", ""u1x0dfs"", ""u1x0dfe"", ""u1x0dfd"",
                ""u1x0dff""};
        assertAdjacentHashesAre(center, adjacent);

        center = ""sp2j"";
        adjacent = new String[]{""ezry"", ""sp2n"", ""sp2q"", ""sp2m"", ""sp2k"", ""sp2h"", ""ezru"", ""ezrv""};
        assertAdjacentHashesAre(center, adjacent);
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,assertAdjacentHashesAre,"    private void assertAdjacentHashesAre(String centerString, String[] adjacentStrings) {
        GeoHash center = GeoHash.fromGeohashString(centerString);
        GeoHash[] adjacent = center.getAdjacent();
        for (String check : adjacentStrings) {
            assertArrayContainsGeoHash(check, adjacent);",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,assertArrayContainsGeoHash,"    private void assertArrayContainsGeoHash(String check, GeoHash[] hashes) {
        boolean found = false;
        for (GeoHash hash : hashes) {
            if (hash.toBase32().equals(check)) {
                found = true;
                break;
            }
        }
        assertTrue(""Array should contain "" + check, found);
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,testNeibouringHashesNearMeridian,"    public void testNeibouringHashesNearMeridian() {
        GeoHash hash = GeoHash.fromGeohashString(""sp2j"");
        GeoHash west = hash.getWesternNeighbour();
        assertEquals(""ezrv"", west.toBase32());
        west = west.getWesternNeighbour();
        assertEquals(""ezrt"", west.toBase32());
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,testIssue1,"    public void testIssue1() {
        double lat = 40.390943;
        double lon = -75.9375;
        GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

        String base32 = ""dr4jb0bn2180"";
        GeoHash fromRef = GeoHash.fromGeohashString(base32);
        assertEquals(hash, fromRef);
        assertEquals(base32, hash.toBase32());
        assertEquals(base32, fromRef.toBase32());

        hash = GeoHash.withCharacterPrecision(lat, lon, 10);
        assertEquals(""dr4jb0bn21"", hash.toBase32());
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,testSimpleWithin,"    public void testSimpleWithin() {
        GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
        GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
        assertWithin(inside, hash);
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,printBoundingBox,"    private void printBoundingBox(GeoHash hash) {
        System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
        System.out.print(""corners="");
        System.out.println(hash.getBoundingBox());
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,testToLongAndBack,"    public void testToLongAndBack() {
        double lat = 40.390943;
        double lon = -75.9375;
        GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 10);
        long lv = hash.longValue();
        assertEquals(lv + (1 << (64 - hash.significantBits())), hash.next().longValue());
        GeoHash hashFromLong = GeoHash.fromLongValue(lv, hash.significantBits());
        assertEquals(""dr4jb0bn21"", hashFromLong.toBase32());
        assertEquals(hash, hashFromLong);
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,testNext,"    public void testNext() {
        double lat = 37.7;
        double lon = -122.52;
        GeoHash hash = GeoHash.withBitPrecision(lat, lon, 10);
        GeoHash next = hash.next();
        assertTrue(hash.compareTo(next) < 0);
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,testNextPrev,"    public void testNextPrev() {
        double lat = 37.7;
        double lon = -122.52;
        GeoHash hash = GeoHash.withBitPrecision(lat, lon, 35);
        GeoHash next = hash.next(2);
        assertTrue(hash.compareTo(next) < 0);
        GeoHash prev1 = next.prev();
        GeoHash prev2 = prev1.next(-1);
        assertTrue(prev1.compareTo(next) < 0);
        System.out.println(""hash: "" + hash.toBase32());
        System.out.println(""next: "" + next.toBase32());
        System.out.println(""prev1: "" + prev1.toBase32());
        System.out.println(""prev2: "" + prev2.toBase32());

        assertTrue(prev2.compareTo(prev1) < 0);
        assertTrue(prev2.compareTo(hash) == 0);
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,GeoHashTest.java,testStepsBetween,"    public void testStepsBetween() {
        GeoHash bl = GeoHash.withBitPrecision(37.7, -122.52, 35);
        GeoHash ur = GeoHash.withBitPrecision(37.84, -122.35, 35);

        long steps = GeoHash.stepsBetween(bl, bl);
        assertEquals(steps, 0);

        steps = GeoHash.stepsBetween(bl, bl.next(4));
        assertEquals(steps, 4);

        BoundingBoxGeoHashIterator iter = new BoundingBoxGeoHashIterator(new TwoGeoHashBoundingBox(bl, ur));
        int count = 0;
        while (iter.hasNext()) {
            iter.next();
            count++;
        }
        assertEquals(12875, count);

        int allHashes = 0;
        int inBbox = 1;
        int latMore = 0;
        int lonMore = 0;
        int bothMore = 0;
        int latLess = 0;
        int lonLess = 0;
        int bothLess = 0;
        int latLessLonMore = 0;
        int latMoreLonLess = 0;
        GeoHash idx = bl;
        BoundingBox iterBbox = iter.getBoundingBox().getBoundingBox();
        while (idx.compareTo(ur) < 0) {
            idx = idx.next();
            allHashes++;
            if (iterBbox.contains(idx.getPoint())) {
                inBbox++;
            }
            boolean latIsMore = false;
            boolean latIsLess = false;
            if (idx.getPoint().getLatitude() > iterBbox.getMaxLat()) {
                latIsMore = true;
                latMore++;
            } else if (idx.getPoint().getLatitude() < iterBbox.getMinLat()) {
                latIsLess = true;
                latLess++;
            }
            if (idx.getPoint().getLongitude() > iterBbox.getMaxLon()) {
                lonMore++;
                if (latIsMore) bothMore++;
                if (latIsLess) latLessLonMore++;
            } else if (idx.getPoint().getLongitude() < iterBbox.getMinLon()) {
                lonLess++;
                if (latIsLess) bothLess++;
                if (latIsMore) latMoreLonLess++;
            }
        }

        // Just trying to understand where these GeoHashes are with regard to their bounding box.
        steps = GeoHash.stepsBetween(bl, ur);
        assertEquals(48472, steps);
        assertEquals(steps, allHashes);
        assertEquals(count, inBbox);
        assertEquals(14938, latMore);
        assertEquals(640, lonMore);
        assertEquals(0, bothMore);
        assertEquals(7680, latLess);
        assertEquals(24391, lonLess);
        assertEquals(0, bothLess);
        assertEquals(240, latLessLonMore);
        assertEquals(11811, latMoreLonLess);
        assertEquals(steps, lonLess + latLess + latMore + lonMore + inBbox - latLessLonMore - latMoreLonLess - 1);
",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,BoundingBoxGeoHashIteratorTest.java,testIter,"    public void testIter() {
        BoundingBox box = new BoundingBox(37.7, 37.84, -122.52, -122.35);
        BoundingBoxGeoHashIterator iter = new BoundingBoxGeoHashIterator(TwoGeoHashBoundingBox.withBitPrecision(box, 10));
        BoundingBox newBox = iter.getBoundingBox().getBoundingBox();
        List<GeoHash> hashes = new ArrayList<GeoHash>();
        while (iter.hasNext()) {
            hashes.add(iter.next());
        }
        GeoHash prev = null;
        for (GeoHash gh : hashes) {
            if (prev != null) Assert.assertTrue(prev.compareTo(gh) < 0);",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,BoundingBoxGeoHashIteratorTest.java,testIter2,"    public void testIter2() {
        BoundingBox box = new BoundingBox(37.7, 37.84, -122.52, -122.35);
        BoundingBoxGeoHashIterator iter = new BoundingBoxGeoHashIterator(TwoGeoHashBoundingBox.withBitPrecision(box, 35));
        BoundingBox newBox = iter.getBoundingBox().getBoundingBox();
        List<GeoHash> hashes = new ArrayList<GeoHash>();
        while (iter.hasNext()) {
            hashes.add(iter.next());
        }
        GeoHash prev = null;
        for (GeoHash gh : hashes) {
            if (prev != null) Assert.assertTrue(prev.compareTo(gh) < 0);",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
097500d42132c81b9e80b5c5b724b36d05a50126,BoundingBoxSamplerTest.java,testSampler,"    public void testSampler() {
        BoundingBox bbox = new BoundingBox(37.7, 37.84, -122.52, -122.35);
        BoundingBoxSampler sampler = new BoundingBoxSampler(TwoGeoHashBoundingBox.withBitPrecision(bbox, 35), 1179);
        bbox = sampler.getBoundingBox().getBoundingBox();
        GeoHash gh = sampler.next();
        Set<String> hashes = new HashSet<String>();
        int sumOfComp = 0;
        int crossingZero = 0;

        GeoHash prev = null;
        while (gh != null) {
            assertTrue(bbox.contains(gh.getPoint()));
            assertFalse(hashes.contains(gh.toBase32()));
            hashes.add(gh.toBase32());
            if (prev != null) sumOfComp += prev.compareTo(gh);
            prev = gh;
            if (sumOfComp == 0) crossingZero++;
            gh = sampler.next();
        }
        assertEquals(12875, hashes.size());
        // The expected value of the sum should be zero. This checks that it is
        // at least close. Worst case is 12875 or -12875 so -40 is sufficiently close
        assertEquals(-40, sumOfComp);
        // Check that the sum is zero a number of times, to make sure values are
        // increasing and decreasing.
        assertEquals(123, crossingZero);
    }",https://www.github.com/kungfoo/geohash-java/commit/097500d42132c81b9e80b5c5b724b36d05a50126
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,withCharacterPrecision,"    public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
        int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
        return new GeoHash(latitude, longitude, desiredPrecision);
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,withBitPrecision,"    public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
        if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
            throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
        return new GeoHash(latitude, longitude, numberOfBits);
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,fromBinaryString,"    public static GeoHash fromBinaryString(String binaryString) {
        GeoHash geohash = new GeoHash();
        geohash.significantBits = (byte) binaryString.length();
        if (binaryString.length() < 64) {
            StringBuffer b = new StringBuffer();
            b.append(binaryString);
            for (int i = binaryString.length(); i < 63; i++) {
                b.append(""0"");
            }
            binaryString = b.toString();
        }

        geohash.bits = Long.valueOf(binaryString, 2);
        long[] latitudeBits = geohash.getRightAlignedLatitudeBits();
        long[] longitudeBits = geohash.getRightAlignedLongitudeBits();
        return geohash.recombineLatLonBitsToHash(latitudeBits, longitudeBits);
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,fromGeohashString,"    public static GeoHash fromGeohashString(String geohash) {
        double[] latitudeRange = {-90.0, 90.0};
        double[] longitudeRange = {-180.0, 180.0};

        boolean isEvenBit = true;
        GeoHash hash = new GeoHash();

        for (int i = 0; i < geohash.length(); i++) {
            int cd = decodeMap.get(geohash.charAt(i));
            for (int j = 0; j < BASE32_BITS; j++) {
                int mask = BITS[j];
                if (isEvenBit) {
                    divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
                } else {
                    divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
                }
                isEvenBit = !isEvenBit;
            }
        }

        double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
        double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

        hash.point = new WGS84Point(latitude, longitude);
        setBoundingBox(hash, latitudeRange, longitudeRange);
        hash.bits <<= (64 - hash.significantBits);
        return hash;
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,fromLongValue,"    public static GeoHash fromLongValue(long hashVal, int significantBits) {
        double[] latitudeRange = {-90.0, 90.0};
        double[] longitudeRange = {-180.0, 180.0};

        boolean isEvenBit = true;
        GeoHash hash = new GeoHash();

        String binaryString = Long.toBinaryString(hashVal);
        while (binaryString.length() < 64) {
            binaryString = ""0"" + binaryString;
        }
        for (int j = 0; j < significantBits; j++) {
            if (isEvenBit) {
                divideRangeDecode(hash, longitudeRange, binaryString.charAt(j) != '0');
            } else {
                divideRangeDecode(hash, latitudeRange, binaryString.charAt(j) != '0');
            }
            isEvenBit = !isEvenBit;
        }

        double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
        double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

        hash.point = new WGS84Point(latitude, longitude);
        setBoundingBox(hash, latitudeRange, longitudeRange);
        hash.bits <<= (64 - hash.significantBits);
        return hash;
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,setBoundingBox,"    private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
        hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(latitudeRange[1],
                longitudeRange[1]));",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,next,"    public GeoHash next(int step) {
        int insignificantBits = 64 - significantBits;
        long unshiftedVal = bits >> insignificantBits;
        unshiftedVal += step;
        return fromLongValue(unshiftedVal << insignificantBits, significantBits);
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,next,"    public GeoHash next() {
        return next(1);
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,prev,"    public GeoHash prev() {
        return next(-1);
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,stepsBetween,"    public static long stepsBetween(GeoHash one, GeoHash two) {
        if (one.significantBits() != two.significantBits())
            throw new IllegalArgumentException(""It is only valid to compare the number of steps between two hashes if they have the same number of significant bits"");
        int insignificantBits = 64 - one.significantBits();
        long unshiftedVal1 = one.bits >> insignificantBits;
        long unshiftedVal2 = two.bits >> insignificantBits;
        return unshiftedVal2 - unshiftedVal1;
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,divideRangeEncode,"    private void divideRangeEncode(double value, double[] range) {
        double mid = (range[0] + range[1]) / 2;
        if (value >= mid) {
            addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,divideRangeDecode,"    private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
        double mid = (range[0] + range[1]) / 2;
        if (b) {
            hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,getAdjacent,"    public GeoHash[] getAdjacent() {
        GeoHash northern = getNorthernNeighbour();
        GeoHash eastern = getEasternNeighbour();
        GeoHash southern = getSouthernNeighbour();
        GeoHash western = getWesternNeighbour();
        return new GeoHash[]{northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(), southern,
                southern.getWesternNeighbour(), western, northern.getWesternNeighbour()};",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,significantBits,"    public int significantBits() {
        return (int) significantBits;
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,longValue,"    public long longValue() {
        return bits;
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,toBase32,"    public String toBase32() {
        if (significantBits % 5 != 0) {
            return """";
        }
        StringBuilder buf = new StringBuilder();

        long firstFiveBitsMask = 0xf800000000000000l;
        long bitsCopy = bits;
        int partialChunks = (int) Math.ceil(((double) significantBits / 5));

        for (int i = 0; i < partialChunks; i++) {
            int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
            buf.append(base32[pointer]);
            bitsCopy <<= 5;
        }
        return buf.toString();
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,within,"    public boolean within(GeoHash boundingBox) {
        return (bits & boundingBox.mask()) == boundingBox.bits;
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,contains,"    public boolean contains(WGS84Point point) {
        return boundingBox.contains(point);
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,getPoint,"    public WGS84Point getPoint() {
        return point;
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,getBoundingBoxCenterPoint,"    public WGS84Point getBoundingBoxCenterPoint() {
        return boundingBox.getCenterPoint();
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,getBoundingBox,"    public BoundingBox getBoundingBox() {
        return boundingBox;
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,enclosesCircleAroundPoint,"    public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
        return false;
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,recombineLatLonBitsToHash,"    protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
        GeoHash hash = new GeoHash();
        boolean isEvenBit = false;
        latBits[0] <<= (64 - latBits[1]);
        lonBits[0] <<= (64 - lonBits[1]);
        double[] latitudeRange = {-90.0, 90.0};
        double[] longitudeRange = {-180.0, 180.0};

        for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
            if (isEvenBit) {
                divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
                latBits[0] <<= 1;
            } else {
                divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
                lonBits[0] <<= 1;
            }
            isEvenBit = !isEvenBit;
        }
        hash.bits <<= (64 - hash.significantBits);
        setBoundingBox(hash, latitudeRange, longitudeRange);
        return hash;
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,getNorthernNeighbour,"    public GeoHash getNorthernNeighbour() {
        long[] latitudeBits = getRightAlignedLatitudeBits();
        long[] longitudeBits = getRightAlignedLongitudeBits();
        latitudeBits[0] += 1;
        latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
        return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,getSouthernNeighbour,"    public GeoHash getSouthernNeighbour() {
        long[] latitudeBits = getRightAlignedLatitudeBits();
        long[] longitudeBits = getRightAlignedLongitudeBits();
        latitudeBits[0] -= 1;
        latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
        return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,getEasternNeighbour,"    public GeoHash getEasternNeighbour() {
        long[] latitudeBits = getRightAlignedLatitudeBits();
        long[] longitudeBits = getRightAlignedLongitudeBits();
        longitudeBits[0] += 1;
        longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
        return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,getWesternNeighbour,"    public GeoHash getWesternNeighbour() {
        long[] latitudeBits = getRightAlignedLatitudeBits();
        long[] longitudeBits = getRightAlignedLongitudeBits();
        longitudeBits[0] -= 1;
        longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
        return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,getRightAlignedLatitudeBits,"    protected long[] getRightAlignedLatitudeBits() {
        long copyOfBits = bits << 1;
        long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
        return new long[]{value, getNumberOfLatLonBits()[0]};
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,getRightAlignedLongitudeBits,"    protected long[] getRightAlignedLongitudeBits() {
        long copyOfBits = bits;
        long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
        return new long[]{value, getNumberOfLatLonBits()[1]};
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,extractEverySecondBit,"    private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
        long value = 0;
        for (int i = 0; i < numberOfBits; i++) {
            if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
                value |= 0x1;
            }
            value <<= 1;
            copyOfBits <<= 2;
        }
        value >>>= 1;
        return value;
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,getNumberOfLatLonBits,"    protected int[] getNumberOfLatLonBits() {
        if (significantBits % 2 == 0) {
            return new int[]{significantBits / 2, significantBits / 2};",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,addOnBitToEnd,"    protected final void addOnBitToEnd() {
        significantBits++;
        bits <<= 1;
        bits = bits | 0x1;
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,addOffBitToEnd,"    protected final void addOffBitToEnd() {
        significantBits++;
        bits <<= 1;
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,toString,"    public String toString() {
        if (significantBits % 5 == 0) {
            return String.format(""%s -> %s -> %s"", Long.toBinaryString(bits), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,toStringWithSignificantPrecision,"    public String toStringWithSignificantPrecision() {
        return Long.toBinaryString(bits).substring(0, significantBits);
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,equals,"    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj instanceof GeoHash) {
            GeoHash other = (GeoHash) obj;
            if (other.significantBits == significantBits && other.bits == bits) {
                return true;
            }
        }
        return false;
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,hashCode,"    public int hashCode() {
        int f = 17;
        f = 31 * f + (int) (bits ^ (bits >>> 32));
        f = 31 * f + significantBits;
        return f;
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,mask,"    private long mask() {
        if (significantBits == 0) {
            return 0;",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,maskLastNBits,"    private long maskLastNBits(long value, long n) {
        long mask = 0xffffffffffffffffl;
        mask >>>= (64 - n);
        return value & mask;
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,GeoHash.java,compareTo,"    public int compareTo(GeoHash o) {
        return new Long(bits).compareTo(o.bits);
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,BoundingBoxGeoHashIterator.java,getBoundingBox,"    public TwoGeoHashBoundingBox getBoundingBox() {
        return boundingBox;
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,BoundingBoxGeoHashIterator.java,hasNext,"    public boolean hasNext() {
        return current.compareTo(boundingBox.getTopRight()) <= 0;
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,BoundingBoxGeoHashIterator.java,next,"    public GeoHash next() {
        GeoHash rv = current;
        if (!hasNext()) throw new NoSuchElementException();
        current = rv.next();
        while (hasNext() && !boundingBox.getBoundingBox().contains(current.getPoint())) {
            current = current.next();
        }
        return rv;
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,BoundingBoxGeoHashIterator.java,remove,"    public void remove() {
        throw new UnsupportedOperationException();
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,BoundingBoxSampler.java,getBoundingBox,"    public TwoGeoHashBoundingBox getBoundingBox() {
        return boundingBox;
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
282e749d637fa3a1d335dbe53a52e99d183d93f1,BoundingBoxSampler.java,next,"    public GeoHash next() {
        if (alreadyUsed.size() == maxSamples) return null;
        int idx = rand.nextInt(maxSamples + 1);
        while (alreadyUsed.contains(idx)) {
            idx = rand.nextInt(maxSamples + 1);
        }
        alreadyUsed.add(idx);
        GeoHash gh = boundingBox.getBottomLeft().next(idx);
        if (!boundingBox.getBoundingBox().contains(gh.getPoint())) return next();
        return gh;
    }",https://www.github.com/kungfoo/geohash-java/commit/282e749d637fa3a1d335dbe53a52e99d183d93f1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0)
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,fromBinaryString,"	public static GeoHash fromBinaryString(String binaryString) {
		GeoHash geohash = new GeoHash();
		for(int i = 0; i < binaryString.length(); i++){
			if(binaryString.charAt(i) == '1'){
				geohash.addOnBitToEnd();
			} else if(binaryString.charAt(i) == '0') {
				geohash.addOffBitToEnd();
			} else {
				throw new IllegalArgumentException(binaryString + "" is not a valid geohash as a binary string"");
			}
		}
		geohash.bits <<= (64 - geohash.significantBits);
		long[] latitudeBits = geohash.getRightAlignedLatitudeBits();
		long[] longitudeBits = geohash.getRightAlignedLongitudeBits();
		return geohash.recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,fromLongValue,"	public static GeoHash fromLongValue(long hashVal, int significantBits) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		String binaryString = Long.toBinaryString(hashVal);
		while (binaryString.length() < 64) {
			binaryString = ""0"" + binaryString;
		}
		for (int j = 0; j < significantBits; j++) {
			if (isEvenBit) {
				divideRangeDecode(hash, longitudeRange, binaryString.charAt(j) != '0');
			} else {
				divideRangeDecode(hash, latitudeRange, binaryString.charAt(j) != '0');
			}
			isEvenBit = !isEvenBit;
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(
				latitudeRange[1],",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,next,"	public GeoHash next(int step) {
        return fromOrd(ord() + step, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,next,"	public GeoHash next() {
		return next(1);
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,prev,"	public GeoHash prev() {
		return next(-1);
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,ord,"    public long ord() {
        int insignificantBits = 64 - significantBits;
        return bits >> insignificantBits;
    }",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,fromOrd,"    public static GeoHash fromOrd(long ord, int significantBits) {
        int insignificantBits = 64 - significantBits;
        return fromLongValue(ord << insignificantBits, significantBits);
    }",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,stepsBetween,"	public static long stepsBetween(GeoHash one, GeoHash two) {
		if (one.significantBits() != two.significantBits())
			throw new IllegalArgumentException(""It is only valid to compare the number of steps between two hashes if they have the same number of significant bits"");
		return two.ord() - one.ord();
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern,",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,significantBits,"	public int significantBits() {
		return (int) significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,longValue,"	public long longValue() {
		return bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,toBase32,"	public String toBase32() {
		if (significantBits % 5 != 0) {
			return """";
		}
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", Long.toBinaryString(bits), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,toBinaryString,"	public String toBinaryString() {
		StringBuilder bui = new StringBuilder();
		long bitsCopy = bits;
		for (int i = 0; i < significantBits; i++) {
			if ((bitsCopy & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				bui.append('1');
			} else {
				bui.append('0');
			}
			bitsCopy <<= 1;
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,mask,"	private long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
25b514380d87f0f6b6f2348aeb365670f5f955c1,GeoHash.java,compareTo,"	public int compareTo(GeoHash o) {
		return new Long(bits).compareTo(o.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/25b514380d87f0f6b6f2348aeb365670f5f955c1
3148f9f23aa70ebf014f113ee3541f3ccc987a97,TwoGeoHashBoundingBox.java,withCharacterPrecision,"    public static TwoGeoHashBoundingBox withCharacterPrecision(BoundingBox bbox, int numberOfCharacters) {
        GeoHash bottomLeft = GeoHash.withCharacterPrecision(bbox.getMinLat(), bbox.getMinLon(), numberOfCharacters);
        GeoHash topRight = GeoHash.withCharacterPrecision(bbox.getMaxLat(), bbox.getMaxLon(), numberOfCharacters);
        return new TwoGeoHashBoundingBox(bottomLeft, topRight);
    }",https://www.github.com/kungfoo/geohash-java/commit/3148f9f23aa70ebf014f113ee3541f3ccc987a97
3148f9f23aa70ebf014f113ee3541f3ccc987a97,TwoGeoHashBoundingBox.java,withBitPrecision,"    public static TwoGeoHashBoundingBox withBitPrecision(BoundingBox bbox, int numberOfBits) {
        GeoHash bottomLeft = GeoHash.withBitPrecision(bbox.getMinLat(), bbox.getMinLon(), numberOfBits);
        GeoHash topRight = GeoHash.withBitPrecision(bbox.getMaxLat(), bbox.getMaxLon(), numberOfBits);
        return new TwoGeoHashBoundingBox(bottomLeft, topRight);
    }",https://www.github.com/kungfoo/geohash-java/commit/3148f9f23aa70ebf014f113ee3541f3ccc987a97
3148f9f23aa70ebf014f113ee3541f3ccc987a97,TwoGeoHashBoundingBox.java,fromBase32,"    public static TwoGeoHashBoundingBox fromBase32(String base32) {
        String bottomLeft = base32.substring(0, 7);
        String topRight = base32.substring(7);
        return new TwoGeoHashBoundingBox(GeoHash.fromGeohashString(bottomLeft), GeoHash.fromGeohashString(topRight));
    }",https://www.github.com/kungfoo/geohash-java/commit/3148f9f23aa70ebf014f113ee3541f3ccc987a97
3148f9f23aa70ebf014f113ee3541f3ccc987a97,TwoGeoHashBoundingBox.java,getBoundingBox,"    public BoundingBox getBoundingBox() {
        return boundingBox;
    }",https://www.github.com/kungfoo/geohash-java/commit/3148f9f23aa70ebf014f113ee3541f3ccc987a97
3148f9f23aa70ebf014f113ee3541f3ccc987a97,TwoGeoHashBoundingBox.java,getBottomLeft,"    public GeoHash getBottomLeft() {
        return bottomLeft;
    }",https://www.github.com/kungfoo/geohash-java/commit/3148f9f23aa70ebf014f113ee3541f3ccc987a97
3148f9f23aa70ebf014f113ee3541f3ccc987a97,TwoGeoHashBoundingBox.java,getTopRight,"    public GeoHash getTopRight() {
        return topRight;
    }",https://www.github.com/kungfoo/geohash-java/commit/3148f9f23aa70ebf014f113ee3541f3ccc987a97
3148f9f23aa70ebf014f113ee3541f3ccc987a97,TwoGeoHashBoundingBox.java,toBase32,"    public String toBase32() {
        return bottomLeft.toBase32() + topRight.toBase32();
    }",https://www.github.com/kungfoo/geohash-java/commit/3148f9f23aa70ebf014f113ee3541f3ccc987a97
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBox.java,getUpperLeft,"	public WGS84Point getUpperLeft() {
		return new WGS84Point(maxLat, minLon);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBox.java,getLowerRight,"	public WGS84Point getLowerRight() {
		return new WGS84Point(minLat, maxLon);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBox.java,getLatitudeSize,"	public double getLatitudeSize() {
		return maxLat - minLat;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBox.java,getLongitudeSize,"	public double getLongitudeSize() {
		return maxLon - minLon;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBox.java,equals,"	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj instanceof BoundingBox) {
			BoundingBox that = (BoundingBox) obj;",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBox.java,hashCode,"	public int hashCode() {
		int result = 17;
		result = 37 * result + hashCode(minLat);
		result = 37 * result + hashCode(maxLat);
		result = 37 * result + hashCode(minLon);
		result = 37 * result + hashCode(maxLon);
		return result;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBox.java,hashCode,"	private static int hashCode(double x) {
		long f = Double.doubleToLongBits(x);
		return (int) (f ^ (f >>> 32));
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBox.java,contains,"	public boolean contains(WGS84Point point) {
		return (point.getLatitude() >= minLat) && (point.getLongitude() >= minLon) && (point.getLatitude() <= maxLat)
				&& (point.getLongitude() <= maxLon);",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBox.java,intersects,"	public boolean intersects(BoundingBox other) {
		return !(other.minLon > maxLon || other.maxLon < minLon || other.minLat > maxLat || other.maxLat < minLat);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBox.java,toString,"	public String toString() {
		return getUpperLeft() + "" -> "" + getLowerRight();
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBox.java,getCenterPoint,"	public WGS84Point getCenterPoint() {
		double centerLatitude = (minLat + maxLat) / 2;
		double centerLongitude = (minLon + maxLon) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBox.java,expandToInclude,"	public void expandToInclude(BoundingBox other) {
		if (other.minLon < minLon) {
			minLon = other.minLon;
		}
		if (other.maxLon > maxLon) {
			maxLon = other.maxLon;
		}
		if (other.minLat < minLat) {
			minLat = other.minLat;
		}
		if (other.maxLat > maxLat) {
			maxLat = other.maxLat;",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBox.java,getMinLon,"	public double getMinLon() {
		return minLon;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBox.java,getMinLat,"	public double getMinLat() {
		return minLat;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBox.java,getMaxLat,"	public double getMaxLat() {
		return maxLat;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBox.java,getMaxLon,"	public double getMaxLon() {
		return maxLon;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0) {
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		}
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,fromBinaryString,"	public static GeoHash fromBinaryString(String binaryString) {
		GeoHash geohash = new GeoHash();
		for (int i = 0; i < binaryString.length(); i++) {
			if (binaryString.charAt(i) == '1') {
				geohash.addOnBitToEnd();
			} else if (binaryString.charAt(i) == '0') {
				geohash.addOffBitToEnd();
			} else {
				throw new IllegalArgumentException(binaryString + "" is not a valid geohash as a binary string"");
			}
		}
		geohash.bits <<= (64 - geohash.significantBits);
		long[] latitudeBits = geohash.getRightAlignedLatitudeBits();
		long[] longitudeBits = geohash.getRightAlignedLongitudeBits();
		return geohash.recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,fromLongValue,"	public static GeoHash fromLongValue(long hashVal, int significantBits) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		String binaryString = Long.toBinaryString(hashVal);
		while (binaryString.length() < 64) {
			binaryString = ""0"" + binaryString;
		}
		for (int j = 0; j < significantBits; j++) {
			if (isEvenBit) {
				divideRangeDecode(hash, longitudeRange, binaryString.charAt(j) != '0');
			} else {
				divideRangeDecode(hash, latitudeRange, binaryString.charAt(j) != '0');
			}
			isEvenBit = !isEvenBit;
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(
				latitudeRange[1],",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,next,"	public GeoHash next(int step) {
		return fromOrd(ord() + step, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,next,"	public GeoHash next() {
		return next(1);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,prev,"	public GeoHash prev() {
		return next(-1);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,ord,"	public long ord() {
		int insignificantBits = 64 - significantBits;
		return bits >> insignificantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,fromOrd,"	public static GeoHash fromOrd(long ord, int significantBits) {
		int insignificantBits = 64 - significantBits;
		return fromLongValue(ord << insignificantBits, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,stepsBetween,"	public static long stepsBetween(GeoHash one, GeoHash two) {
		if (one.significantBits() != two.significantBits()) {
			throw new IllegalArgumentException(
					""It is only valid to compare the number of steps between two hashes if they have the same number of significant bits"");
		}
		return two.ord() - one.ord();
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern,",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,significantBits,"	public int significantBits() {
		return significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,longValue,"	public long longValue() {
		return bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,toBase32,"	public String toBase32() {
		if (significantBits % 5 != 0) {
			return """";
		}
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", Long.toBinaryString(bits), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,toBinaryString,"	public String toBinaryString() {
		StringBuilder bui = new StringBuilder();
		long bitsCopy = bits;
		for (int i = 0; i < significantBits; i++) {
			if ((bitsCopy & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				bui.append('1');
			} else {
				bui.append('0');
			}
			bitsCopy <<= 1;
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,mask,"	private long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHash.java,compareTo,"	public int compareTo(GeoHash o) {
		return new Long(bits).compareTo(o.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashBoundingBoxQuery.java,addSearchHash,"	private void addSearchHash(GeoHash hash) {
		if (boundingBox == null) {
			boundingBox = new BoundingBox(hash.getBoundingBox());
		} else {
			boundingBox.expandToInclude(hash.getBoundingBox());
		}
		searchHashes.add(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashBoundingBoxQuery.java,expandSearch,"	private void expandSearch(GeoHash centerHash, BoundingBox bbox) {
		addSearchHash(centerHash);

		for (GeoHash adjacent : centerHash.getAdjacent()) {
			BoundingBox adjacentBox = adjacent.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashBoundingBoxQuery.java,hashFits,"	private boolean hashFits(GeoHash hash, BoundingBox bbox) {
		return hash.contains(bbox.getUpperLeft()) && hash.contains(bbox.getLowerRight());
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashBoundingBoxQuery.java,contains,"	public boolean contains(GeoHash hash) {
		for (GeoHash searchHash : searchHashes) {
			if (hash.within(searchHash)) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashBoundingBoxQuery.java,contains,"	public boolean contains(WGS84Point point) {
		return contains(GeoHash.withBitPrecision(point.getLatitude(), point.getLongitude(), 64));
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashBoundingBoxQuery.java,getSearchHashes,"	public List<GeoHash> getSearchHashes() {
		return searchHashes;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashBoundingBoxQuery.java,toString,"	public String toString() {
		StringBuilder bui = new StringBuilder();
		for (GeoHash hash : searchHashes) {
			bui.append(hash).append(""\n"");
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashBoundingBoxQuery.java,getWktBox,"	public String getWktBox() {
		return ""BOX("" + boundingBox.getMinLon() + "" "" + boundingBox.getMinLat() + "","" + boundingBox.getMaxLon() + "" ""
				+ boundingBox.getMaxLat() + "")"";",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashCircleQuery.java,contains,"	public boolean contains(GeoHash hash) {
		return query.contains(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashCircleQuery.java,getWktBox,"	public String getWktBox() {
		return query.getWktBox();
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashCircleQuery.java,getSearchHashes,"	public List<GeoHash> getSearchHashes() {
		return query.getSearchHashes();
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashCircleQuery.java,toString,"	public String toString() {
		return ""Cicle Query [center="" + center + "", radius="" + getRadiusString() + ""]"";
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashCircleQuery.java,getRadiusString,"	private String getRadiusString() {
		if (radius > 1000) {
			return radius / 1000 + ""km"";",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashCircleQuery.java,contains,"	public boolean contains(WGS84Point point) {
		return query.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBoxGeoHashIterator.java,getBoundingBox,"	public TwoGeoHashBoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBoxGeoHashIterator.java,hasNext,"	public boolean hasNext() {
		return current.compareTo(boundingBox.getTopRight()) <= 0;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBoxGeoHashIterator.java,next,"	public GeoHash next() {
		GeoHash rv = current;
		if (!hasNext()) {
			throw new NoSuchElementException();
		}
		current = rv.next();
		while (hasNext() && !boundingBox.getBoundingBox().contains(current.getPoint())) {
			current = current.next();
		}
		return rv;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBoxGeoHashIterator.java,remove,"	public void remove() {
		throw new UnsupportedOperationException();
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBoxSampler.java,getBoundingBox,"	public TwoGeoHashBoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBoxSampler.java,next,"	public GeoHash next() {
		if (alreadyUsed.size() == maxSamples) {
			return null;
		}
		int idx = rand.nextInt(maxSamples + 1);
		while (alreadyUsed.contains(idx)) {
			idx = rand.nextInt(maxSamples + 1);
		}
		alreadyUsed.add(idx);
		GeoHash gh = boundingBox.getBottomLeft().next(idx);
		if (!boundingBox.getBoundingBox().contains(gh.getPoint())) {
			return next();
		}
		return gh;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,TwoGeoHashBoundingBox.java,withCharacterPrecision,"	public static TwoGeoHashBoundingBox withCharacterPrecision(BoundingBox bbox, int numberOfCharacters) {
		GeoHash bottomLeft = GeoHash.withCharacterPrecision(bbox.getMinLat(), bbox.getMinLon(), numberOfCharacters);
		GeoHash topRight = GeoHash.withCharacterPrecision(bbox.getMaxLat(), bbox.getMaxLon(), numberOfCharacters);
		return new TwoGeoHashBoundingBox(bottomLeft, topRight);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,TwoGeoHashBoundingBox.java,withBitPrecision,"	public static TwoGeoHashBoundingBox withBitPrecision(BoundingBox bbox, int numberOfBits) {
		GeoHash bottomLeft = GeoHash.withBitPrecision(bbox.getMinLat(), bbox.getMinLon(), numberOfBits);
		GeoHash topRight = GeoHash.withBitPrecision(bbox.getMaxLat(), bbox.getMaxLon(), numberOfBits);
		return new TwoGeoHashBoundingBox(bottomLeft, topRight);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,TwoGeoHashBoundingBox.java,fromBase32,"	public static TwoGeoHashBoundingBox fromBase32(String base32) {
		String bottomLeft = base32.substring(0, 7);
		String topRight = base32.substring(7);
		return new TwoGeoHashBoundingBox(GeoHash.fromGeohashString(bottomLeft), GeoHash.fromGeohashString(topRight));
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,TwoGeoHashBoundingBox.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,TwoGeoHashBoundingBox.java,getBottomLeft,"	public GeoHash getBottomLeft() {
		return bottomLeft;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,TwoGeoHashBoundingBox.java,getTopRight,"	public GeoHash getTopRight() {
		return topRight;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,TwoGeoHashBoundingBox.java,toBase32,"	public String toBase32() {
		return bottomLeft.toBase32() + topRight.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,VincentyGeodesy.java,moveInDirection,"	public static WGS84Point moveInDirection(WGS84Point point, double bearingInDegrees, double distanceInMeters) {

		if (bearingInDegrees < 0 || bearingInDegrees > 360) {
			throw new IllegalArgumentException(""direction must be in (0,360)"");
		}

		double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; // WGS-84
		// ellipsiod
		double alpha1 = bearingInDegrees * degToRad;
		double sinAlpha1 = Math.sin(alpha1), cosAlpha1 = Math.cos(alpha1);

		double tanU1 = (1 - f) * Math.tan(point.getLatitude() * degToRad);
		double cosU1 = 1 / Math.sqrt((1 + tanU1 * tanU1)), sinU1 = tanU1 * cosU1;
		double sigma1 = Math.atan2(tanU1, cosAlpha1);
		double sinAlpha = cosU1 * sinAlpha1;
		double cosSqAlpha = 1 - sinAlpha * sinAlpha;
		double uSq = cosSqAlpha * (a * a - b * b) / (b * b);
		double A = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));
		double B = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));

		double sinSigma = 0, cosSigma = 0, cos2SigmaM = 0;
		double sigma = distanceInMeters / (b * A), sigmaP = 2 * Math.PI;
		while (Math.abs(sigma - sigmaP) > 1e-12) {
			cos2SigmaM = Math.cos(2 * sigma1 + sigma);
			sinSigma = Math.sin(sigma);
			cosSigma = Math.cos(sigma);
			double deltaSigma = B
					* sinSigma
					* (cos2SigmaM + B
							/ 4
							* (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM
									* (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));
			sigmaP = sigma;
			sigma = distanceInMeters / (b * A) + deltaSigma;
		}

		double tmp = sinU1 * sinSigma - cosU1 * cosSigma * cosAlpha1;
		double lat2 = Math.atan2(sinU1 * cosSigma + cosU1 * sinSigma * cosAlpha1, (1 - f)
				* Math.sqrt(sinAlpha * sinAlpha + tmp * tmp));
		double lambda = Math.atan2(sinSigma * sinAlpha1, cosU1 * cosSigma - sinU1 * sinSigma * cosAlpha1);
		double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
		double L = lambda - (1 - C) * f * sinAlpha
				* (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));

		return new WGS84Point(lat2 / degToRad, point.getLongitude() + L / degToRad);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,VincentyGeodesy.java,distanceInMeters,"	public static double distanceInMeters(WGS84Point foo, WGS84Point bar) {
		double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; // WGS-84
		// ellipsiod
		double L = (bar.getLongitude() - foo.getLongitude()) * degToRad;
		double U1 = Math.atan((1 - f) * Math.tan(foo.getLatitude() * degToRad));
		double U2 = Math.atan((1 - f) * Math.tan(bar.getLatitude() * degToRad));
		double sinU1 = Math.sin(U1), cosU1 = Math.cos(U1);
		double sinU2 = Math.sin(U2), cosU2 = Math.cos(U2);

		double cosSqAlpha, sinSigma, cos2SigmaM, cosSigma, sigma;

		double lambda = L, lambdaP, iterLimit = 20;
		do {
			double sinLambda = Math.sin(lambda), cosLambda = Math.cos(lambda);
			sinSigma = Math.sqrt((cosU2 * sinLambda) * (cosU2 * sinLambda)
					+ (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda) * (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda));
			if (sinSigma == 0) {
				return 0; // co-incident points
			}
			cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda;
			sigma = Math.atan2(sinSigma, cosSigma);
			double sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma;
			cosSqAlpha = 1 - sinAlpha * sinAlpha;
			cos2SigmaM = cosSigma - 2 * sinU1 * sinU2 / cosSqAlpha;
			if (cos2SigmaM == Double.NaN) {
				cos2SigmaM = 0; // equatorial line: cosSqAlpha=0 (�6)
			}
			double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
			lambdaP = lambda;
			lambda = L + (1 - C) * f * sinAlpha
					* (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));
		} while (Math.abs(lambda - lambdaP) > EPSILON && --iterLimit > 0);

		if (iterLimit == 0) {
			return Double.NaN;
		}
		double uSquared = cosSqAlpha * (a * a - b * b) / (b * b);
		double A = 1 + uSquared / 16384 * (4096 + uSquared * (-768 + uSquared * (320 - 175 * uSquared)));
		double B = uSquared / 1024 * (256 + uSquared * (-128 + uSquared * (74 - 47 * uSquared)));
		double deltaSigma = B
				* sinSigma
				* (cos2SigmaM + B
						/ 4
						* (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM
								* (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));
		double s = b * A * (sigma - deltaSigma);

		return s;
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBoxTest.java,setUp,"	public void setUp() {
		a = new BoundingBox(new WGS84Point(30, 20), new WGS84Point(21, 31));
		b = new BoundingBox(a);
		c = new BoundingBox(new WGS84Point(45, -170), new WGS84Point(-45, 170));
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBoxTest.java,testHashCode,"	public void testHashCode() {
		assertEquals(a.hashCode(), b.hashCode());
		assertFalse(a.hashCode() == c.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBoxTest.java,testEqualsObject,"	public void testEqualsObject() {
		assertEquals(a, b);
		assertEquals(b, a);
		assertFalse(a.equals(c));
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBoxTest.java,testContains,"	public void testContains() {
		BoundingBox bbox = new BoundingBox(45, 46, 121, 120);
		assertContains(bbox, new WGS84Point(45.5, 120.5));
		assertNotContains(bbox, new WGS84Point(90, 90));
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBoxTest.java,testSize,"	public void testSize() {
		BoundingBox bbox = new BoundingBox(45, 90, 0, 30);
		assertHeightIs(bbox, 45);
		assertWidthIs(bbox, 30);
		bbox = new BoundingBox(-45, 45, -22.5, 30);
		assertHeightIs(bbox, 90);
		assertWidthIs(bbox, 52.5);
		bbox = new BoundingBox(-44, -46.1, -127.2, -128);
		assertHeightIs(bbox, 2.1);
		assertWidthIs(bbox, 0.8);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBoxTest.java,assertWidthIs,"	private void assertWidthIs(BoundingBox bbox, double width) {
		assertEquals(width, bbox.getLongitudeSize(), DELTA);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBoxTest.java,assertHeightIs,"	private void assertHeightIs(BoundingBox bbox, double height) {
		assertEquals(height, bbox.getLatitudeSize(), DELTA);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBoxTest.java,testIntersects,"	public void testIntersects() {
		BoundingBox bbox = new BoundingBox(10, -10, 41, 40);
		assertIntersects(bbox, new BoundingBox(5, -15, 40.5, 43));
		assertDoesNotIntersect(bbox, new BoundingBox(5, -15, 42, 43));
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBoxTest.java,assertDoesNotIntersect,"	private void assertDoesNotIntersect(BoundingBox bbox, BoundingBox boundingBox) {
		assertFalse(bbox + "" should NOT intersect "" + boundingBox, bbox.intersects(boundingBox));
		assertFalse(boundingBox + "" should NOT intersect "" + bbox, boundingBox.intersects(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBoxTest.java,assertIntersects,"	private void assertIntersects(BoundingBox bbox, BoundingBox boundingBox) {
		assertTrue(bbox + "" should intersect "" + boundingBox, bbox.intersects(boundingBox));
		assertTrue(boundingBox + "" should intersect "" + bbox, boundingBox.intersects(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBoxTest.java,assertContains,"	private void assertContains(BoundingBox box, WGS84Point p) {
		assertTrue(p + "" should be in "" + box, box.contains(p));
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBoxTest.java,assertNotContains,"	private void assertNotContains(BoundingBox box, WGS84Point p) {
		assertFalse(p + "" should NOT be in "" + box, box.contains(p));
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashBoundingBoxSearchTest.java,testSeveralBoundingBoxes,"	public void testSeveralBoundingBoxes() {
		checkSearchYieldsCorrectNumberOfHashes(40.2090980098, 40.21982983232432, -22.523432424324, -22.494234232442);
		checkSearchYieldsCorrectNumberOfHashes(41.23452234, 40.09872762, 31.23432, 30.0113312322);
		checkSearchYieldsCorrectHashes(47.447907, 47.300200, 8.760941, 8.471276, ""u0qj"");
		checkSearchYieldsCorrectHashes(47.157502, 47.329727, 8.562244, 8.859215, ""u0qj"", ""u0qm"", ""u0qh"", ""u0qk"");
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashBoundingBoxSearchTest.java,checkSearchYieldsCorrectNumberOfHashes,"	private void checkSearchYieldsCorrectNumberOfHashes(double minLat, double maxLat, double minLon, double maxLon) {
		GeoHashQuery search = new GeoHashBoundingBoxQuery(new BoundingBox(minLat, maxLat, minLon, maxLon));
		assertRightNumberOfSearchHashes(search);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashBoundingBoxSearchTest.java,checkSearchYieldsCorrectHashes,"	private void checkSearchYieldsCorrectHashes(double minLat, double maxLat, double minLon, double maxLon,
			String... hashes) {
		GeoHashQuery search = new GeoHashBoundingBoxQuery(new BoundingBox(minLat, maxLat, minLon, maxLon));
		assertEquals(hashes.length, search.getSearchHashes().size());
		for (String expectedHash : hashes) {
			assertTrue(""search hashes should contain "" + expectedHash + "" is: "" + search, search.getSearchHashes()",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashBoundingBoxSearchTest.java,assertRightNumberOfSearchHashes,"	private void assertRightNumberOfSearchHashes(GeoHashQuery search) {
		int size = search.getSearchHashes().size();
		assertTrue(size == 1 || size == 2 || size == 4);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
		rand = new Random();
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			BoundingBox bbox = gh.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,testToAndFromBinaryString,"	public void testToAndFromBinaryString() {
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			String binaryString = gh.toBinaryString();",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertWithin(hash, bbox);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,assertWithin,"	private void assertWithin(GeoHash hash, GeoHash bbox) {
		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xd000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xc000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);
",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertEquals(start.getBoundingBox(), end.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
			double randomLatitude = (rand.nextDouble() - 0.5) * 180;",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,testKnownNeighbouringHashes,"	public void testKnownNeighbouringHashes() {
		GeoHash h1 = GeoHash.fromGeohashString(""u1pb"");
		assertEquals(""u0zz"", h1.getSouthernNeighbour().toBase32());
		assertEquals(""u1pc"", h1.getNorthernNeighbour().toBase32());
		assertEquals(""u300"", h1.getEasternNeighbour().toBase32());
		assertEquals(""u302"", h1.getEasternNeighbour().getEasternNeighbour().toBase32());
		assertEquals(""u1p8"", h1.getWesternNeighbour().toBase32());

		assertEquals(""sp2j"", GeoHash.withCharacterPrecision(41.7, 0.08, 4).toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,testKnownAdjacentNeighbours,"	public void testKnownAdjacentNeighbours() {
		String center = ""dqcjqc"";
		String[] adjacent = new String[] { ""dqcjqf"", ""dqcjqb"", ""dqcjr1"", ""dqcjq9"", ""dqcjqd"", ""dqcjr4"", ""dqcjr0"",
				""dqcjq8"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""u1x0dfg"";
		adjacent = new String[] { ""u1x0dg4"", ""u1x0dg5"", ""u1x0dgh"", ""u1x0dfu"", ""u1x0dfs"", ""u1x0dfe"", ""u1x0dfd"",
				""u1x0dff"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""sp2j"";
		adjacent = new String[] { ""ezry"", ""sp2n"", ""sp2q"", ""sp2m"", ""sp2k"", ""sp2h"", ""ezru"", ""ezrv"" };
		assertAdjacentHashesAre(center, adjacent);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,assertAdjacentHashesAre,"	private void assertAdjacentHashesAre(String centerString, String[] adjacentStrings) {
		GeoHash center = GeoHash.fromGeohashString(centerString);
		GeoHash[] adjacent = center.getAdjacent();
		for (String check : adjacentStrings) {
			assertArrayContainsGeoHash(check, adjacent);",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,assertArrayContainsGeoHash,"	private void assertArrayContainsGeoHash(String check, GeoHash[] hashes) {
		boolean found = false;
		for (GeoHash hash : hashes) {
			if (hash.toBase32().equals(check)) {
				found = true;
				break;
			}
		}
		assertTrue(""Array should contain "" + check, found);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,testNeibouringHashesNearMeridian,"	public void testNeibouringHashesNearMeridian() {
		GeoHash hash = GeoHash.fromGeohashString(""sp2j"");
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(""ezrv"", west.toBase32());
		west = west.getWesternNeighbour();
		assertEquals(""ezrt"", west.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,testSimpleWithin,"	public void testSimpleWithin() {
		GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
		GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
		assertWithin(inside, hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(hash.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,testToLongAndBack,"	public void testToLongAndBack() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		long lv = hash.longValue();
		assertEquals(lv + (1 << (64 - hash.significantBits())), hash.next().longValue());
		GeoHash hashFromLong = GeoHash.fromLongValue(lv, hash.significantBits());
		assertEquals(""dr4jb0bn21"", hashFromLong.toBase32());
		assertEquals(hash, hashFromLong);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,testNext,"	public void testNext() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 10);
		GeoHash next = hash.next();
		assertTrue(hash.compareTo(next) < 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,testNextPrev,"	public void testNextPrev() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 35);
		GeoHash next = hash.next(2);
		assertTrue(hash.compareTo(next) < 0);
		GeoHash prev1 = next.prev();
		GeoHash prev2 = prev1.next(-1);
		assertTrue(prev1.compareTo(next) < 0);
		System.out.println(""hash: "" + hash.toBase32());
		System.out.println(""next: "" + next.toBase32());
		System.out.println(""prev1: "" + prev1.toBase32());
		System.out.println(""prev2: "" + prev2.toBase32());

		assertTrue(prev2.compareTo(prev1) < 0);
		assertTrue(prev2.compareTo(hash) == 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashTest.java,testStepsBetween,"	public void testStepsBetween() {
		GeoHash bl = GeoHash.withBitPrecision(37.7, -122.52, 35);
		GeoHash ur = GeoHash.withBitPrecision(37.84, -122.35, 35);

		long steps = GeoHash.stepsBetween(bl, bl);
		assertEquals(steps, 0);

		steps = GeoHash.stepsBetween(bl, bl.next(4));
		assertEquals(steps, 4);

		BoundingBoxGeoHashIterator iter = new BoundingBoxGeoHashIterator(new TwoGeoHashBoundingBox(bl, ur));
		int count = 0;
		while (iter.hasNext()) {
			iter.next();
			count++;
		}
		assertEquals(12875, count);

		int allHashes = 0;
		int inBbox = 1;
		int latMore = 0;
		int lonMore = 0;
		int bothMore = 0;
		int latLess = 0;
		int lonLess = 0;
		int bothLess = 0;
		int latLessLonMore = 0;
		int latMoreLonLess = 0;
		GeoHash idx = bl;
		BoundingBox iterBbox = iter.getBoundingBox().getBoundingBox();
		while (idx.compareTo(ur) < 0) {
			idx = idx.next();
			allHashes++;
			if (iterBbox.contains(idx.getPoint())) {
				inBbox++;
			}
			boolean latIsMore = false;
			boolean latIsLess = false;
			if (idx.getPoint().getLatitude() > iterBbox.getMaxLat()) {
				latIsMore = true;
				latMore++;
			} else if (idx.getPoint().getLatitude() < iterBbox.getMinLat()) {
				latIsLess = true;
				latLess++;
			}
			if (idx.getPoint().getLongitude() > iterBbox.getMaxLon()) {
				lonMore++;
				if (latIsMore) {
					bothMore++;
				}
				if (latIsLess) {
					latLessLonMore++;
				}
			} else if (idx.getPoint().getLongitude() < iterBbox.getMinLon()) {
				lonLess++;
				if (latIsLess) {
					bothLess++;
				}
				if (latIsMore) {
					latMoreLonLess++;
				}
			}
		}

		// Just trying to understand where these GeoHashes are with regard to
		// their bounding box.
		steps = GeoHash.stepsBetween(bl, ur);
		assertEquals(48472, steps);
		assertEquals(steps, allHashes);
		assertEquals(count, inBbox);
		assertEquals(14938, latMore);
		assertEquals(640, lonMore);
		assertEquals(0, bothMore);
		assertEquals(7680, latLess);
		assertEquals(24391, lonLess);
		assertEquals(0, bothLess);
		assertEquals(240, latLessLonMore);
		assertEquals(11811, latMoreLonLess);
		assertEquals(steps, lonLess + latLess + latMore + lonMore + inBbox - latLessLonMore - latMoreLonLess - 1);
",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,WGS84PointTest.java,setUp,"	public void setUp() {
		a = new WGS84Point(47.2342, 15.7465465);
		b = new WGS84Point(a);
		c = new WGS84Point(-47.234, b.getLongitude());
		d = new WGS84Point(-32.9687253, 12.42334242);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,WGS84PointTest.java,testVincenty,"	public void testVincenty() {
		WGS84Point startPoint = new WGS84Point(40, 40);

		int distanceInMeters = 10000;
		WGS84Point result = VincentyGeodesy.moveInDirection(startPoint, 120,
				distanceInMeters);
		Assert.assertEquals(40.10134882, result.getLongitude(), DELTA);
		Assert.assertEquals(39.9549245, result.getLatitude(), DELTA);

		Assert.assertEquals(distanceInMeters, VincentyGeodesy.distanceInMeters(
				startPoint, result), DELTA);

		WGS84Point p1 = new WGS84Point(1, 1);
		int tenThousandKilometers = 10000000;
		WGS84Point p2 = VincentyGeodesy.moveInDirection(p1, 270, tenThousandKilometers);
		System.out.println(p2);
		Assert.assertEquals(tenThousandKilometers, VincentyGeodesy.distanceInMeters(p1, p2), DELTA);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,WGS84PointTest.java,testEquals,"	public void testEquals() {
		assertEquals(a, a);
		assertEquals(a, b);
		assertEquals(b, a);
		assertNotSame(a, b);

		assertFalse(a.equals(c));
		assertFalse(c.equals(a));
		assertFalse(d.equals(c));
		assertFalse(d.equals(a));
		assertFalse(d.equals(new Integer(10)));
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,WGS84PointTest.java,testHashCode,"	public void testHashCode() {
		assertEquals(a.hashCode(), a.hashCode());
		assertEquals(a.hashCode(), b.hashCode());
		assertFalse(a.hashCode() == c.hashCode());
		assertFalse(d.hashCode() == c.hashCode());
		assertFalse(d.hashCode() == new Integer(10).hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,WGS84PointTest.java,testRangeCheck,"	public void testRangeCheck() {
		new WGS84Point(180, 240);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBoxGeoHashIteratorTest.java,testIter,"	public void testIter() {
		BoundingBox box = new BoundingBox(37.7, 37.84, -122.52, -122.35);
		BoundingBoxGeoHashIterator iter = new BoundingBoxGeoHashIterator(
				TwoGeoHashBoundingBox.withBitPrecision(box, 10));
		BoundingBox newBox = iter.getBoundingBox().getBoundingBox();
		List<GeoHash> hashes = new ArrayList<GeoHash>();
		while (iter.hasNext()) {
			hashes.add(iter.next());
		}
		GeoHash prev = null;
		for (GeoHash gh : hashes) {
			if (prev != null) {",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBoxGeoHashIteratorTest.java,testIter2,"	public void testIter2() {
		BoundingBox box = new BoundingBox(37.7, 37.84, -122.52, -122.35);
		BoundingBoxGeoHashIterator iter = new BoundingBoxGeoHashIterator(
				TwoGeoHashBoundingBox.withBitPrecision(box, 35));
		BoundingBox newBox = iter.getBoundingBox().getBoundingBox();
		List<GeoHash> hashes = new ArrayList<GeoHash>();
		while (iter.hasNext()) {
			hashes.add(iter.next());
		}
		GeoHash prev = null;
		for (GeoHash gh : hashes) {
			if (prev != null) {",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,BoundingBoxSamplerTest.java,testSampler,"	public void testSampler() {
		BoundingBox bbox = new BoundingBox(37.7, 37.84, -122.52, -122.35);
		BoundingBoxSampler sampler = new BoundingBoxSampler(TwoGeoHashBoundingBox.withBitPrecision(bbox, 35), 1179);
		bbox = sampler.getBoundingBox().getBoundingBox();
		GeoHash gh = sampler.next();
		Set<String> hashes = new HashSet<String>();
		int sumOfComp = 0;
		int crossingZero = 0;

		GeoHash prev = null;
		while (gh != null) {
			assertTrue(bbox.contains(gh.getPoint()));
			assertFalse(hashes.contains(gh.toBase32()));
			hashes.add(gh.toBase32());
			if (prev != null) {
				sumOfComp += prev.compareTo(gh);
			}
			prev = gh;
			if (sumOfComp == 0) {
				crossingZero++;
			}
			gh = sampler.next();
		}
		assertEquals(12875, hashes.size());
		// The expected value of the sum should be zero. This checks that it is
		// at least close. Worst case is 12875 or -12875 so -40 is sufficiently
		// close
		assertEquals(-40, sumOfComp);
		// Check that the sum is zero a number of times, to make sure values are
		// increasing and decreasing.
		assertEquals(123, crossingZero);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashSizeTableTest.java,testDLat,"	public void testDLat() {
		assertDLatIs(180d, 0);
		assertDLatIs(180d, 1);
		assertDLatIs(90d, 2);
		assertDLatIs(0.3515625, 18);
		assertDLatIs(0.3515625, 19);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashSizeTableTest.java,assertDLatIs,"	private void assertDLatIs(double d, int i) {
		assertEquals(d, GeoHashSizeTable.dLat(i), 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashSizeTableTest.java,testDLon,"	public void testDLon() {
		assertDLonIs(360, 0);
		assertDLonIs(180, 1);
		assertDLonIs(0.0439453125, 25);
		assertDLonIs(0.0439453125, 26);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashSizeTableTest.java,assertDLonIs,"	private void assertDLonIs(double d, int i) {
		assertEquals(d, GeoHashSizeTable.dLon(i), 1 - 128);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashSizeTableTest.java,generate,"		public BoundingBox generate(int bits);

		/**
		 * return the number of expected bits.
		 */
		public int getExpectedBits(int bits);
	}

	/**
	 * the entire box is a little too small, thus it must fit nicely into the
	 * hash.
	 */
	private static class ALittleTooSmallVerifier implements BoundingBoxSizeTableVerifier {
		public ALittleTooSmallVerifier() {
		}

		@Override
		public BoundingBox generate(int bits) {
			// make the bounding box a little smaller than dLat/dLon
			double dLat = GeoHashSizeTable.dLat(bits) - DELTA;
			double dLon = GeoHashSizeTable.dLon(bits) - DELTA;
			return new BoundingBox(45 - dLat, 45, 30, 30 - dLon);
		}

		@Override
		public int getExpectedBits(int bits) {
			return bits;
		}
	}

	/**
	 * if both lat and lon are a little too large, we must use a bigger hash,
	 * i.e. less bits.
	 */
	private static class BothALittleTooLargeVerifier implements BoundingBoxSizeTableVerifier {
		public BothALittleTooLargeVerifier() {
		}

		@Override
		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);
			return new BoundingBox(0, dLat + DELTA, 0, dLon + DELTA);
		}

		@Override
		public int getExpectedBits(int bits) {
			return bits - 2;
		}
	}

	/**
	 * depending on whether we're currently at an even or odd nuber of bits, one
	 * or two bits have to be removed.
	 */
	private static class OnlyOneALittleTooLargeVerifier implements BoundingBoxSizeTableVerifier {
		public OnlyOneALittleTooLargeVerifier() {
		}

		private Random rand = new Random();
		private boolean latitudeAffected;

		@Override
		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);

			if (latitudeAffected = rand.nextBoolean()) {
				dLat += DELTA;
			} else {
				dLon += DELTA;
			}
			return new BoundingBox(0, dLat, 0, dLon);
		}

		@Override
		public int getExpectedBits(int bits) {
			if (latitudeAffected) {
				if (bits % 2 != 0) {
					return bits - 2;
				} else {
					return bits - 1;
				}
			} else {
				if (bits % 2 != 0) {
					return bits - 1;
				} else {
					return bits - 2;
				}
			}
		}
	}

	@Test
	public void testKnownSmallerBoundingBoxSizes() {
		checkWithGenerator(new ALittleTooSmallVerifier());
	}

	@Test
	public void testKnownLargerBoundingBoxSizes() {
		checkWithGenerator(new BothALittleTooLargeVerifier());
	}

	@Test
	public void testKnownOneBitLargerBoxSizes() {
		checkWithGenerator(new OnlyOneALittleTooLargeVerifier());
	}

	private void checkWithGenerator(BoundingBoxSizeTableVerifier generator) {
		for (int bits = 4; bits < 64; bits++) {
			BoundingBox bbox = generator.generate(bits);
			assertEquals(generator.getExpectedBits(bits), GeoHashSizeTable.numberOfBitsForOverlappingGeoHash(bbox));
		}
	}
}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashSizeTableTest.java,getExpectedBits,"		public int getExpectedBits(int bits);
	}

	/**
	 * the entire box is a little too small, thus it must fit nicely into the
	 * hash.
	 */
	private static class ALittleTooSmallVerifier implements BoundingBoxSizeTableVerifier {
		public ALittleTooSmallVerifier() {
		}

		@Override
		public BoundingBox generate(int bits) {
			// make the bounding box a little smaller than dLat/dLon
			double dLat = GeoHashSizeTable.dLat(bits) - DELTA;
			double dLon = GeoHashSizeTable.dLon(bits) - DELTA;
			return new BoundingBox(45 - dLat, 45, 30, 30 - dLon);
		}

		@Override
		public int getExpectedBits(int bits) {
			return bits;
		}
	}

	/**
	 * if both lat and lon are a little too large, we must use a bigger hash,
	 * i.e. less bits.
	 */
	private static class BothALittleTooLargeVerifier implements BoundingBoxSizeTableVerifier {
		public BothALittleTooLargeVerifier() {
		}

		@Override
		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);
			return new BoundingBox(0, dLat + DELTA, 0, dLon + DELTA);
		}

		@Override
		public int getExpectedBits(int bits) {
			return bits - 2;
		}
	}

	/**
	 * depending on whether we're currently at an even or odd nuber of bits, one
	 * or two bits have to be removed.
	 */
	private static class OnlyOneALittleTooLargeVerifier implements BoundingBoxSizeTableVerifier {
		public OnlyOneALittleTooLargeVerifier() {
		}

		private Random rand = new Random();
		private boolean latitudeAffected;

		@Override
		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);

			if (latitudeAffected = rand.nextBoolean()) {
				dLat += DELTA;
			} else {
				dLon += DELTA;
			}
			return new BoundingBox(0, dLat, 0, dLon);
		}

		@Override
		public int getExpectedBits(int bits) {
			if (latitudeAffected) {
				if (bits % 2 != 0) {
					return bits - 2;
				} else {
					return bits - 1;
				}
			} else {
				if (bits % 2 != 0) {
					return bits - 1;
				} else {
					return bits - 2;
				}
			}
		}
	}

	@Test
	public void testKnownSmallerBoundingBoxSizes() {
		checkWithGenerator(new ALittleTooSmallVerifier());
	}

	@Test
	public void testKnownLargerBoundingBoxSizes() {
		checkWithGenerator(new BothALittleTooLargeVerifier());
	}

	@Test
	public void testKnownOneBitLargerBoxSizes() {
		checkWithGenerator(new OnlyOneALittleTooLargeVerifier());
	}

	private void checkWithGenerator(BoundingBoxSizeTableVerifier generator) {
		for (int bits = 4; bits < 64; bits++) {
			BoundingBox bbox = generator.generate(bits);
			assertEquals(generator.getExpectedBits(bits), GeoHashSizeTable.numberOfBitsForOverlappingGeoHash(bbox));
		}
	}
}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashSizeTableTest.java,generate,"		public BoundingBox generate(int bits) {
			// make the bounding box a little smaller than dLat/dLon
			double dLat = GeoHashSizeTable.dLat(bits) - DELTA;
			double dLon = GeoHashSizeTable.dLon(bits) - DELTA;
			return new BoundingBox(45 - dLat, 45, 30, 30 - dLon);
		}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashSizeTableTest.java,getExpectedBits,"		public int getExpectedBits(int bits) {
			return bits;
		}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashSizeTableTest.java,generate,"		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);
			return new BoundingBox(0, dLat + DELTA, 0, dLon + DELTA);
		}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashSizeTableTest.java,getExpectedBits,"		public int getExpectedBits(int bits) {
			return bits - 2;
		}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashSizeTableTest.java,generate,"		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);

			if (latitudeAffected = rand.nextBoolean()) {
				dLat += DELTA;
			} else {
				dLon += DELTA;
			}
			return new BoundingBox(0, dLat, 0, dLon);
		}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashSizeTableTest.java,getExpectedBits,"		public int getExpectedBits(int bits) {
			if (latitudeAffected) {
				if (bits % 2 != 0) {",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashSizeTableTest.java,testKnownSmallerBoundingBoxSizes,"	public void testKnownSmallerBoundingBoxSizes() {
		checkWithGenerator(new ALittleTooSmallVerifier());
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashSizeTableTest.java,testKnownLargerBoundingBoxSizes,"	public void testKnownLargerBoundingBoxSizes() {
		checkWithGenerator(new BothALittleTooLargeVerifier());
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashSizeTableTest.java,testKnownOneBitLargerBoxSizes,"	public void testKnownOneBitLargerBoxSizes() {
		checkWithGenerator(new OnlyOneALittleTooLargeVerifier());
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,GeoHashSizeTableTest.java,checkWithGenerator,"	private void checkWithGenerator(BoundingBoxSizeTableVerifier generator) {
		for (int bits = 4; bits < 64; bits++) {
			BoundingBox bbox = generator.generate(bits);",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,LongUtilTest.java,testSameNumbersHave64BitsPrefix,"	public void testSameNumbersHave64BitsPrefix() {
		for (long a = 0; a < 120000000; a += 101) {
			long b = a;",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,LongUtilTest.java,testKnownPrefixLenghts,"	public void testKnownPrefixLenghts() {
		long a = 0x8f00000000000000l;
		long b = 0x8000000000000000l;
		long c = 0x8800000000000000l;
		assertPrefixLength(4, a, b);
		assertPrefixLength(4, b, c);
		assertPrefixLength(5, a, c);
		assertPrefixLength(0, 0x0, a);
		assertPrefixLength(16, 0x8888300000000000l, 0x8888c00000000000l);
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,LongUtilTest.java,assertPrefixLength,"	private void assertPrefixLength(int length, long a, long b) {
		assertEquals(length, LongUtil.commonPrefixLength(a, b));
	}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,RandomGeohashes.java,fullRange,"	public static Iterable<GeoHash> fullRange() {
		return new Iterable<GeoHash>() {
			@Override",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
5eb7303c1dceec6f3245e64d16a184abcff914b5,RandomGeohashes.java,iterator,"			public Iterator<GeoHash> iterator() {
				Random rand = new Random();
				List<GeoHash> hashes = new ArrayList<GeoHash>();
				for (double lat = -90; lat <= 90; lat += rand.nextDouble() + 1.45) {
					for (double lon = -180; lon <= 180; lon += rand.nextDouble() + 1.54) {
						for (int precisionChars = 6; precisionChars <= 12; precisionChars++) {
							GeoHash gh = GeoHash.withCharacterPrecision(lat, lon, precisionChars);
							hashes.add(gh);
						}
					}
				}
				return hashes.iterator();
			}",https://www.github.com/kungfoo/geohash-java/commit/5eb7303c1dceec6f3245e64d16a184abcff914b5
e72e34c21040376bd8b2b5683da612ac536b90a8,VincentyGeodesy.java,moveInDirection,"	public static WGS84Point moveInDirection(WGS84Point point, double bearingInDegrees, double distanceInMeters) {

		if (bearingInDegrees < 0 || bearingInDegrees > 360) {
			throw new IllegalArgumentException(""direction must be in (0,360)"");
		}

		double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; // WGS-84
		// ellipsiod
		double alpha1 = bearingInDegrees * degToRad;
		double sinAlpha1 = Math.sin(alpha1), cosAlpha1 = Math.cos(alpha1);

		double tanU1 = (1 - f) * Math.tan(point.getLatitude() * degToRad);
		double cosU1 = 1 / Math.sqrt((1 + tanU1 * tanU1)), sinU1 = tanU1 * cosU1;
		double sigma1 = Math.atan2(tanU1, cosAlpha1);
		double sinAlpha = cosU1 * sinAlpha1;
		double cosSqAlpha = 1 - sinAlpha * sinAlpha;
		double uSq = cosSqAlpha * (a * a - b * b) / (b * b);
		double A = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));
		double B = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));

		double sinSigma = 0, cosSigma = 0, cos2SigmaM = 0;
		double sigma = distanceInMeters / (b * A), sigmaP = 2 * Math.PI;
		while (Math.abs(sigma - sigmaP) > 1e-12) {
			cos2SigmaM = Math.cos(2 * sigma1 + sigma);
			sinSigma = Math.sin(sigma);
			cosSigma = Math.cos(sigma);
			double deltaSigma = B
					* sinSigma
					* (cos2SigmaM + B
							/ 4
							* (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM
									* (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));
			sigmaP = sigma;
			sigma = distanceInMeters / (b * A) + deltaSigma;
		}

		double tmp = sinU1 * sinSigma - cosU1 * cosSigma * cosAlpha1;
		double lat2 = Math.atan2(sinU1 * cosSigma + cosU1 * sinSigma * cosAlpha1, (1 - f)
				* Math.sqrt(sinAlpha * sinAlpha + tmp * tmp));
		double lambda = Math.atan2(sinSigma * sinAlpha1, cosU1 * cosSigma - sinU1 * sinSigma * cosAlpha1);
		double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
		double L = lambda - (1 - C) * f * sinAlpha
				* (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));

		double newLat = lat2 / degToRad;
		double newLon = point.getLongitude() + L / degToRad;
		
		newLon = (newLon >  180.0 ? 360.0 - newLon : newLon);
		newLon = (newLon < -180.0 ? 360.0 + newLon : newLon);
		
		return new WGS84Point(newLat, newLon);
	}",https://www.github.com/kungfoo/geohash-java/commit/e72e34c21040376bd8b2b5683da612ac536b90a8
e72e34c21040376bd8b2b5683da612ac536b90a8,VincentyGeodesy.java,distanceInMeters,"	public static double distanceInMeters(WGS84Point foo, WGS84Point bar) {
		double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; // WGS-84
		// ellipsiod
		double L = (bar.getLongitude() - foo.getLongitude()) * degToRad;
		double U1 = Math.atan((1 - f) * Math.tan(foo.getLatitude() * degToRad));
		double U2 = Math.atan((1 - f) * Math.tan(bar.getLatitude() * degToRad));
		double sinU1 = Math.sin(U1), cosU1 = Math.cos(U1);
		double sinU2 = Math.sin(U2), cosU2 = Math.cos(U2);

		double cosSqAlpha, sinSigma, cos2SigmaM, cosSigma, sigma;

		double lambda = L, lambdaP, iterLimit = 20;
		do {
			double sinLambda = Math.sin(lambda), cosLambda = Math.cos(lambda);
			sinSigma = Math.sqrt((cosU2 * sinLambda) * (cosU2 * sinLambda)
					+ (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda) * (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda));
			if (sinSigma == 0) {
				return 0; // co-incident points
			}
			cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda;
			sigma = Math.atan2(sinSigma, cosSigma);
			double sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma;
			cosSqAlpha = 1 - sinAlpha * sinAlpha;
			cos2SigmaM = cosSigma - 2 * sinU1 * sinU2 / cosSqAlpha;
			if (cos2SigmaM == Double.NaN) {
				cos2SigmaM = 0; // equatorial line: cosSqAlpha=0 (�6)
			}
			double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
			lambdaP = lambda;
			lambda = L + (1 - C) * f * sinAlpha
					* (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));
		} while (Math.abs(lambda - lambdaP) > EPSILON && --iterLimit > 0);

		if (iterLimit == 0) {
			return Double.NaN;
		}
		double uSquared = cosSqAlpha * (a * a - b * b) / (b * b);
		double A = 1 + uSquared / 16384 * (4096 + uSquared * (-768 + uSquared * (320 - 175 * uSquared)));
		double B = uSquared / 1024 * (256 + uSquared * (-128 + uSquared * (74 - 47 * uSquared)));
		double deltaSigma = B
				* sinSigma
				* (cos2SigmaM + B
						/ 4
						* (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM
								* (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));
		double s = b * A * (sigma - deltaSigma);

		return s;
	}",https://www.github.com/kungfoo/geohash-java/commit/e72e34c21040376bd8b2b5683da612ac536b90a8
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0) {
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		}
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,fromBinaryString,"	public static GeoHash fromBinaryString(String binaryString) {
		GeoHash geohash = new GeoHash();
		for (int i = 0; i < binaryString.length(); i++) {
			if (binaryString.charAt(i) == '1') {
				geohash.addOnBitToEnd();
			} else if (binaryString.charAt(i) == '0') {
				geohash.addOffBitToEnd();
			} else {
				throw new IllegalArgumentException(binaryString + "" is not a valid geohash as a binary string"");
			}
		}
		geohash.bits <<= (64 - geohash.significantBits);
		long[] latitudeBits = geohash.getRightAlignedLatitudeBits();
		long[] longitudeBits = geohash.getRightAlignedLongitudeBits();
		return geohash.recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,fromLongValue,"	public static GeoHash fromLongValue(long hashVal, int significantBits) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		String binaryString = Long.toBinaryString(hashVal);
		while (binaryString.length() < 64) {
			binaryString = ""0"" + binaryString;
		}
		for (int j = 0; j < significantBits; j++) {
			if (isEvenBit) {
				divideRangeDecode(hash, longitudeRange, binaryString.charAt(j) != '0');
			} else {
				divideRangeDecode(hash, latitudeRange, binaryString.charAt(j) != '0');
			}
			isEvenBit = !isEvenBit;
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(
				latitudeRange[1],",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,next,"	public GeoHash next(int step) {
		return fromOrd(ord() + step, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,next,"	public GeoHash next() {
		return next(1);
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,prev,"	public GeoHash prev() {
		return next(-1);
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,ord,"	public long ord() {
		int insignificantBits = 64 - significantBits;
		return bits >> insignificantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,fromOrd,"	public static GeoHash fromOrd(long ord, int significantBits) {
		int insignificantBits = 64 - significantBits;
		return fromLongValue(ord << insignificantBits, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,stepsBetween,"	public static long stepsBetween(GeoHash one, GeoHash two) {
		if (one.significantBits() != two.significantBits()) {
			throw new IllegalArgumentException(
					""It is only valid to compare the number of steps between two hashes if they have the same number of significant bits"");
		}
		return two.ord() - one.ord();
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern,",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,significantBits,"	public int significantBits() {
		return significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,longValue,"	public long longValue() {
		return bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,toBase32,"	public String toBase32() {
		if (significantBits % 5 != 0) {
			return """";
		}
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.point = hash.boundingBox.getCenterPoint();
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", Long.toBinaryString(bits), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,toBinaryString,"	public String toBinaryString() {
		StringBuilder bui = new StringBuilder();
		long bitsCopy = bits;
		for (int i = 0; i < significantBits; i++) {
			if ((bitsCopy & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				bui.append('1');
			} else {
				bui.append('0');
			}
			bitsCopy <<= 1;
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,mask,"	private long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHash.java,compareTo,"	public int compareTo(GeoHash o) {
		return new Long(bits).compareTo(o.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
		rand = new Random();
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			BoundingBox bbox = gh.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,testToAndFromBinaryString,"	public void testToAndFromBinaryString() {
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			String binaryString = gh.toBinaryString();",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertWithin(hash, bbox);
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,assertWithin,"	private void assertWithin(GeoHash hash, GeoHash bbox) {
		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xd000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xc000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);
",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertEquals(start.getBoundingBox(), end.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
			double randomLatitude = (rand.nextDouble() - 0.5) * 180;",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,testKnownNeighbouringHashes,"	public void testKnownNeighbouringHashes() {
		GeoHash h1 = GeoHash.fromGeohashString(""u1pb"");
		assertEquals(""u0zz"", h1.getSouthernNeighbour().toBase32());
		assertEquals(""u1pc"", h1.getNorthernNeighbour().toBase32());
		assertEquals(""u300"", h1.getEasternNeighbour().toBase32());
		assertEquals(""u302"", h1.getEasternNeighbour().getEasternNeighbour().toBase32());
		assertEquals(""u1p8"", h1.getWesternNeighbour().toBase32());

		assertEquals(""sp2j"", GeoHash.withCharacterPrecision(41.7, 0.08, 4).toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,testKnownAdjacentNeighbours,"	public void testKnownAdjacentNeighbours() {
		String center = ""dqcjqc"";
		String[] adjacent = new String[] { ""dqcjqf"", ""dqcjqb"", ""dqcjr1"", ""dqcjq9"", ""dqcjqd"", ""dqcjr4"", ""dqcjr0"",
				""dqcjq8"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""u1x0dfg"";
		adjacent = new String[] { ""u1x0dg4"", ""u1x0dg5"", ""u1x0dgh"", ""u1x0dfu"", ""u1x0dfs"", ""u1x0dfe"", ""u1x0dfd"",
				""u1x0dff"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""sp2j"";
		adjacent = new String[] { ""ezry"", ""sp2n"", ""sp2q"", ""sp2m"", ""sp2k"", ""sp2h"", ""ezru"", ""ezrv"" };
		assertAdjacentHashesAre(center, adjacent);
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,testThatAdjacentHashesHavePointInitialized,"	public void testThatAdjacentHashesHavePointInitialized(){
		String center = ""dqcjqc"";
		GeoHash geohash = GeoHash.fromGeohashString(center);
		GeoHash[] adjacentHashes = geohash.getAdjacent();
		for (GeoHash adjacentHash : adjacentHashes) {
			assertNotNull(adjacentHash.getBoundingBox());",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,assertAdjacentHashesAre,"	private void assertAdjacentHashesAre(String centerString, String[] adjacentStrings) {
		GeoHash center = GeoHash.fromGeohashString(centerString);
		GeoHash[] adjacent = center.getAdjacent();
		for (String check : adjacentStrings) {
			assertArrayContainsGeoHash(check, adjacent);",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,assertArrayContainsGeoHash,"	private void assertArrayContainsGeoHash(String check, GeoHash[] hashes) {
		boolean found = false;
		for (GeoHash hash : hashes) {
			if (hash.toBase32().equals(check)) {
				found = true;
				break;
			}
		}
		assertTrue(""Array should contain "" + check, found);
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,testNeibouringHashesNearMeridian,"	public void testNeibouringHashesNearMeridian() {
		GeoHash hash = GeoHash.fromGeohashString(""sp2j"");
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(""ezrv"", west.toBase32());
		west = west.getWesternNeighbour();
		assertEquals(""ezrt"", west.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,testSimpleWithin,"	public void testSimpleWithin() {
		GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
		GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
		assertWithin(inside, hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(hash.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,testToLongAndBack,"	public void testToLongAndBack() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		long lv = hash.longValue();
		assertEquals(lv + (1 << (64 - hash.significantBits())), hash.next().longValue());
		GeoHash hashFromLong = GeoHash.fromLongValue(lv, hash.significantBits());
		assertEquals(""dr4jb0bn21"", hashFromLong.toBase32());
		assertEquals(hash, hashFromLong);
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,testNext,"	public void testNext() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 10);
		GeoHash next = hash.next();
		assertTrue(hash.compareTo(next) < 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,testNextPrev,"	public void testNextPrev() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 35);
		GeoHash next = hash.next(2);
		assertTrue(hash.compareTo(next) < 0);
		GeoHash prev1 = next.prev();
		GeoHash prev2 = prev1.next(-1);
		assertTrue(prev1.compareTo(next) < 0);
		System.out.println(""hash: "" + hash.toBase32());
		System.out.println(""next: "" + next.toBase32());
		System.out.println(""prev1: "" + prev1.toBase32());
		System.out.println(""prev2: "" + prev2.toBase32());

		assertTrue(prev2.compareTo(prev1) < 0);
		assertTrue(prev2.compareTo(hash) == 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
27793c086cd2065efc6e0d4570107e387d634fe6,GeoHashTest.java,testStepsBetween,"	public void testStepsBetween() {
		GeoHash bl = GeoHash.withBitPrecision(37.7, -122.52, 35);
		GeoHash ur = GeoHash.withBitPrecision(37.84, -122.35, 35);

		long steps = GeoHash.stepsBetween(bl, bl);
		assertEquals(steps, 0);

		steps = GeoHash.stepsBetween(bl, bl.next(4));
		assertEquals(steps, 4);

		BoundingBoxGeoHashIterator iter = new BoundingBoxGeoHashIterator(new TwoGeoHashBoundingBox(bl, ur));
		int count = 0;
		while (iter.hasNext()) {
			iter.next();
			count++;
		}
		assertEquals(12875, count);

		int allHashes = 0;
		int inBbox = 1;
		int latMore = 0;
		int lonMore = 0;
		int bothMore = 0;
		int latLess = 0;
		int lonLess = 0;
		int bothLess = 0;
		int latLessLonMore = 0;
		int latMoreLonLess = 0;
		GeoHash idx = bl;
		BoundingBox iterBbox = iter.getBoundingBox().getBoundingBox();
		while (idx.compareTo(ur) < 0) {
			idx = idx.next();
			allHashes++;
			if (iterBbox.contains(idx.getPoint())) {
				inBbox++;
			}
			boolean latIsMore = false;
			boolean latIsLess = false;
			if (idx.getPoint().getLatitude() > iterBbox.getMaxLat()) {
				latIsMore = true;
				latMore++;
			} else if (idx.getPoint().getLatitude() < iterBbox.getMinLat()) {
				latIsLess = true;
				latLess++;
			}
			if (idx.getPoint().getLongitude() > iterBbox.getMaxLon()) {
				lonMore++;
				if (latIsMore) {
					bothMore++;
				}
				if (latIsLess) {
					latLessLonMore++;
				}
			} else if (idx.getPoint().getLongitude() < iterBbox.getMinLon()) {
				lonLess++;
				if (latIsLess) {
					bothLess++;
				}
				if (latIsMore) {
					latMoreLonLess++;
				}
			}
		}

		// Just trying to understand where these GeoHashes are with regard to
		// their bounding box.
		steps = GeoHash.stepsBetween(bl, ur);
		assertEquals(48472, steps);
		assertEquals(steps, allHashes);
		assertEquals(count, inBbox);
		assertEquals(14938, latMore);
		assertEquals(640, lonMore);
		assertEquals(0, bothMore);
		assertEquals(7680, latLess);
		assertEquals(24391, lonLess);
		assertEquals(0, bothLess);
		assertEquals(240, latLessLonMore);
		assertEquals(11811, latMoreLonLess);
		assertEquals(steps, lonLess + latLess + latMore + lonMore + inBbox - latLessLonMore - latMoreLonLess - 1);
",https://www.github.com/kungfoo/geohash-java/commit/27793c086cd2065efc6e0d4570107e387d634fe6
19a035ed842b81ef93611945c410df8c2896688b,VincentyGeodesy.java,moveInDirection,"	public static WGS84Point moveInDirection(WGS84Point point, double bearingInDegrees, double distanceInMeters) {

		if (bearingInDegrees < 0 || bearingInDegrees > 360) {
			throw new IllegalArgumentException(""direction must be in (0,360)"");
		}

		double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; // WGS-84
		// ellipsiod
		double alpha1 = bearingInDegrees * degToRad;
		double sinAlpha1 = Math.sin(alpha1), cosAlpha1 = Math.cos(alpha1);

		double tanU1 = (1 - f) * Math.tan(point.getLatitude() * degToRad);
		double cosU1 = 1 / Math.sqrt((1 + tanU1 * tanU1)), sinU1 = tanU1 * cosU1;
		double sigma1 = Math.atan2(tanU1, cosAlpha1);
		double sinAlpha = cosU1 * sinAlpha1;
		double cosSqAlpha = 1 - sinAlpha * sinAlpha;
		double uSq = cosSqAlpha * (a * a - b * b) / (b * b);
		double A = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));
		double B = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));

		double sinSigma = 0, cosSigma = 0, cos2SigmaM = 0;
		double sigma = distanceInMeters / (b * A), sigmaP = 2 * Math.PI;
		while (Math.abs(sigma - sigmaP) > 1e-12) {
			cos2SigmaM = Math.cos(2 * sigma1 + sigma);
			sinSigma = Math.sin(sigma);
			cosSigma = Math.cos(sigma);
			double deltaSigma = B
					* sinSigma
					* (cos2SigmaM + B
							/ 4
							* (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM
									* (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));
			sigmaP = sigma;
			sigma = distanceInMeters / (b * A) + deltaSigma;
		}

		double tmp = sinU1 * sinSigma - cosU1 * cosSigma * cosAlpha1;
		double lat2 = Math.atan2(sinU1 * cosSigma + cosU1 * sinSigma * cosAlpha1, (1 - f)
				* Math.sqrt(sinAlpha * sinAlpha + tmp * tmp));
		double lambda = Math.atan2(sinSigma * sinAlpha1, cosU1 * cosSigma - sinU1 * sinSigma * cosAlpha1);
		double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
		double L = lambda - (1 - C) * f * sinAlpha
				* (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));

		double newLat = lat2 / degToRad;
		double newLon = point.getLongitude() + L / degToRad;
		
		newLon = (newLon >  180.0 ? 360.0 - newLon : newLon);
		newLon = (newLon < -180.0 ? 360.0 + newLon : newLon);
		
		return new WGS84Point(newLat, newLon);
	}",https://www.github.com/kungfoo/geohash-java/commit/19a035ed842b81ef93611945c410df8c2896688b
19a035ed842b81ef93611945c410df8c2896688b,VincentyGeodesy.java,distanceInMeters,"	public static double distanceInMeters(WGS84Point foo, WGS84Point bar) {
		double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; // WGS-84
		// ellipsiod
		double L = (bar.getLongitude() - foo.getLongitude()) * degToRad;
		double U1 = Math.atan((1 - f) * Math.tan(foo.getLatitude() * degToRad));
		double U2 = Math.atan((1 - f) * Math.tan(bar.getLatitude() * degToRad));
		double sinU1 = Math.sin(U1), cosU1 = Math.cos(U1);
		double sinU2 = Math.sin(U2), cosU2 = Math.cos(U2);

		double cosSqAlpha, sinSigma, cos2SigmaM, cosSigma, sigma;

		double lambda = L, lambdaP, iterLimit = 20;
		do {
			double sinLambda = Math.sin(lambda), cosLambda = Math.cos(lambda);
			sinSigma = Math.sqrt((cosU2 * sinLambda) * (cosU2 * sinLambda)
					+ (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda) * (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda));
			if (sinSigma == 0) {
				return 0; // co-incident points
			}
			cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda;
			sigma = Math.atan2(sinSigma, cosSigma);
			double sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma;
			cosSqAlpha = 1 - sinAlpha * sinAlpha;
			cos2SigmaM = cosSigma - 2 * sinU1 * sinU2 / cosSqAlpha;
			if (Double.isNaN(cos2SigmaM)) {
				cos2SigmaM = 0; // equatorial line: cosSqAlpha=0 (�6)
			}
			double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
			lambdaP = lambda;
			lambda = L + (1 - C) * f * sinAlpha
					* (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));
		} while (Math.abs(lambda - lambdaP) > EPSILON && --iterLimit > 0);

		if (iterLimit == 0) {
			return Double.NaN;
		}
		double uSquared = cosSqAlpha * (a * a - b * b) / (b * b);
		double A = 1 + uSquared / 16384 * (4096 + uSquared * (-768 + uSquared * (320 - 175 * uSquared)));
		double B = uSquared / 1024 * (256 + uSquared * (-128 + uSquared * (74 - 47 * uSquared)));
		double deltaSigma = B
				* sinSigma
				* (cos2SigmaM + B
						/ 4
						* (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM
								* (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));
		double s = b * A * (sigma - deltaSigma);

		return s;
	}",https://www.github.com/kungfoo/geohash-java/commit/19a035ed842b81ef93611945c410df8c2896688b
5e4e9770117eaf2ea5d8c6243c346809cd10d23b,VincentyGeodesy.java,moveInDirection,"	public static WGS84Point moveInDirection(WGS84Point point, double bearingInDegrees, double distanceInMeters) {

		if (bearingInDegrees < 0 || bearingInDegrees > 360) {
			throw new IllegalArgumentException(""direction must be in (0,360)"");
		}

		double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; // WGS-84
		// ellipsiod
		double alpha1 = bearingInDegrees * degToRad;
		double sinAlpha1 = Math.sin(alpha1), cosAlpha1 = Math.cos(alpha1);

		double tanU1 = (1 - f) * Math.tan(point.getLatitude() * degToRad);
		double cosU1 = 1 / Math.sqrt((1 + tanU1 * tanU1)), sinU1 = tanU1 * cosU1;
		double sigma1 = Math.atan2(tanU1, cosAlpha1);
		double sinAlpha = cosU1 * sinAlpha1;
		double cosSqAlpha = 1 - sinAlpha * sinAlpha;
		double uSq = cosSqAlpha * (a * a - b * b) / (b * b);
		double A = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));
		double B = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));

		double sinSigma = 0, cosSigma = 0, cos2SigmaM = 0;
		double sigma = distanceInMeters / (b * A), sigmaP = 2 * Math.PI;
		while (Math.abs(sigma - sigmaP) > 1e-12) {
			cos2SigmaM = Math.cos(2 * sigma1 + sigma);
			sinSigma = Math.sin(sigma);
			cosSigma = Math.cos(sigma);
			double deltaSigma = B
					* sinSigma
					* (cos2SigmaM + B
							/ 4
							* (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM
									* (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));
			sigmaP = sigma;
			sigma = distanceInMeters / (b * A) + deltaSigma;
		}

		double tmp = sinU1 * sinSigma - cosU1 * cosSigma * cosAlpha1;
		double lat2 = Math.atan2(sinU1 * cosSigma + cosU1 * sinSigma * cosAlpha1, (1 - f)
				* Math.sqrt(sinAlpha * sinAlpha + tmp * tmp));
		double lambda = Math.atan2(sinSigma * sinAlpha1, cosU1 * cosSigma - sinU1 * sinSigma * cosAlpha1);
		double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
		double L = lambda - (1 - C) * f * sinAlpha
				* (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));

		double newLat = lat2 / degToRad;
		double newLon = point.getLongitude() + L / degToRad;
		
		newLon = (newLon >  180.0 ? 360.0 - newLon : newLon);
		newLon = (newLon < -180.0 ? 360.0 + newLon : newLon);
		
		return new WGS84Point(newLat, newLon);
	}",https://www.github.com/kungfoo/geohash-java/commit/5e4e9770117eaf2ea5d8c6243c346809cd10d23b
5e4e9770117eaf2ea5d8c6243c346809cd10d23b,VincentyGeodesy.java,distanceInMeters,"	public static double distanceInMeters(WGS84Point foo, WGS84Point bar) {
		double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; // WGS-84
		// ellipsiod
		double L = (bar.getLongitude() - foo.getLongitude()) * degToRad;
		double U1 = Math.atan((1 - f) * Math.tan(foo.getLatitude() * degToRad));
		double U2 = Math.atan((1 - f) * Math.tan(bar.getLatitude() * degToRad));
		double sinU1 = Math.sin(U1), cosU1 = Math.cos(U1);
		double sinU2 = Math.sin(U2), cosU2 = Math.cos(U2);

		double cosSqAlpha, sinSigma, cos2SigmaM, cosSigma, sigma;

		double lambda = L, lambdaP, iterLimit = 20;
		do {
			double sinLambda = Math.sin(lambda), cosLambda = Math.cos(lambda);
			sinSigma = Math.sqrt((cosU2 * sinLambda) * (cosU2 * sinLambda)
					+ (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda) * (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda));
			if (sinSigma == 0) {
				return 0; // co-incident points
			}
			cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda;
			sigma = Math.atan2(sinSigma, cosSigma);
			double sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma;
			cosSqAlpha = 1 - sinAlpha * sinAlpha;
			cos2SigmaM = cosSigma - 2 * sinU1 * sinU2 / cosSqAlpha;
			if (Double.isNaN(cos2SigmaM)) {
				cos2SigmaM = 0; // equatorial line: cosSqAlpha=0
			}
			double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
			lambdaP = lambda;
			lambda = L + (1 - C) * f * sinAlpha
					* (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));
		} while (Math.abs(lambda - lambdaP) > EPSILON && --iterLimit > 0);

		if (iterLimit == 0) {
			return Double.NaN;
		}
		double uSquared = cosSqAlpha * (a * a - b * b) / (b * b);
		double A = 1 + uSquared / 16384 * (4096 + uSquared * (-768 + uSquared * (320 - 175 * uSquared)));
		double B = uSquared / 1024 * (256 + uSquared * (-128 + uSquared * (74 - 47 * uSquared)));
		double deltaSigma = B
				* sinSigma
				* (cos2SigmaM + B
						/ 4
						* (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM
								* (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));
		double s = b * A * (sigma - deltaSigma);

		return s;
	}",https://www.github.com/kungfoo/geohash-java/commit/5e4e9770117eaf2ea5d8c6243c346809cd10d23b
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0) {
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		}
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,fromBinaryString,"	public static GeoHash fromBinaryString(String binaryString) {
		GeoHash geohash = new GeoHash();
		for (int i = 0; i < binaryString.length(); i++) {
			if (binaryString.charAt(i) == '1') {
				geohash.addOnBitToEnd();
			} else if (binaryString.charAt(i) == '0') {
				geohash.addOffBitToEnd();
			} else {
				throw new IllegalArgumentException(binaryString + "" is not a valid geohash as a binary string"");
			}
		}
		geohash.bits <<= (64 - geohash.significantBits);
		long[] latitudeBits = geohash.getRightAlignedLatitudeBits();
		long[] longitudeBits = geohash.getRightAlignedLongitudeBits();
		return geohash.recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,fromLongValue,"	public static GeoHash fromLongValue(long hashVal, int significantBits) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		String binaryString = Long.toBinaryString(hashVal);
		while (binaryString.length() < 64) {
			binaryString = ""0"" + binaryString;
		}
		for (int j = 0; j < significantBits; j++) {
			if (isEvenBit) {
				divideRangeDecode(hash, longitudeRange, binaryString.charAt(j) != '0');
			} else {
				divideRangeDecode(hash, latitudeRange, binaryString.charAt(j) != '0');
			}
			isEvenBit = !isEvenBit;
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(
				latitudeRange[1],",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,next,"	public GeoHash next(int step) {
		return fromOrd(ord() + step, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,next,"	public GeoHash next() {
		return next(1);
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,prev,"	public GeoHash prev() {
		return next(-1);
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,ord,"	public long ord() {
		int insignificantBits = 64 - significantBits;
		return bits >> insignificantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,getCharacterPrecision,"	public int getCharacterPrecision() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(
					""precision of GeoHash is not divisble by 5: "" + this);
		}
		return significantBits / 5;
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,fromOrd,"	public static GeoHash fromOrd(long ord, int significantBits) {
		int insignificantBits = 64 - significantBits;
		return fromLongValue(ord << insignificantBits, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,stepsBetween,"	public static long stepsBetween(GeoHash one, GeoHash two) {
		if (one.significantBits() != two.significantBits()) {
			throw new IllegalArgumentException(
					""It is only valid to compare the number of steps between two hashes if they have the same number of significant bits"");
		}
		return two.ord() - one.ord();
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern,",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,significantBits,"	public int significantBits() {
		return significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,longValue,"	public long longValue() {
		return bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,toBase32,"	public String toBase32() {
		if (significantBits % 5 != 0) {
			return """";
		}
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.point = hash.boundingBox.getCenterPoint();
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", Long.toBinaryString(bits), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,toBinaryString,"	public String toBinaryString() {
		StringBuilder bui = new StringBuilder();
		long bitsCopy = bits;
		for (int i = 0; i < significantBits; i++) {
			if ((bitsCopy & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				bui.append('1');
			} else {
				bui.append('0');
			}
			bitsCopy <<= 1;
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,mask,"	private long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHash.java,compareTo,"	public int compareTo(GeoHash o) {
		return new Long(bits).compareTo(o.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
		rand = new Random();
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			BoundingBox bbox = gh.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,testToAndFromBinaryString,"	public void testToAndFromBinaryString() {
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			String binaryString = gh.toBinaryString();",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertWithin(hash, bbox);
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,assertWithin,"	private void assertWithin(GeoHash hash, GeoHash bbox) {
		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xd000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xc000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);
",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertEquals(start.getBoundingBox(), end.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
			double randomLatitude = (rand.nextDouble() - 0.5) * 180;",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,testKnownNeighbouringHashes,"	public void testKnownNeighbouringHashes() {
		GeoHash h1 = GeoHash.fromGeohashString(""u1pb"");
		assertEquals(""u0zz"", h1.getSouthernNeighbour().toBase32());
		assertEquals(""u1pc"", h1.getNorthernNeighbour().toBase32());
		assertEquals(""u300"", h1.getEasternNeighbour().toBase32());
		assertEquals(""u302"", h1.getEasternNeighbour().getEasternNeighbour().toBase32());
		assertEquals(""u1p8"", h1.getWesternNeighbour().toBase32());

		assertEquals(""sp2j"", GeoHash.withCharacterPrecision(41.7, 0.08, 4).toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,testKnownAdjacentNeighbours,"	public void testKnownAdjacentNeighbours() {
		String center = ""dqcjqc"";
		String[] adjacent = new String[] { ""dqcjqf"", ""dqcjqb"", ""dqcjr1"", ""dqcjq9"", ""dqcjqd"", ""dqcjr4"", ""dqcjr0"",
				""dqcjq8"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""u1x0dfg"";
		adjacent = new String[] { ""u1x0dg4"", ""u1x0dg5"", ""u1x0dgh"", ""u1x0dfu"", ""u1x0dfs"", ""u1x0dfe"", ""u1x0dfd"",
				""u1x0dff"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""sp2j"";
		adjacent = new String[] { ""ezry"", ""sp2n"", ""sp2q"", ""sp2m"", ""sp2k"", ""sp2h"", ""ezru"", ""ezrv"" };
		assertAdjacentHashesAre(center, adjacent);
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,testThatAdjacentHashesHavePointInitialized,"	public void testThatAdjacentHashesHavePointInitialized(){
		String center = ""dqcjqc"";
		GeoHash geohash = GeoHash.fromGeohashString(center);
		GeoHash[] adjacentHashes = geohash.getAdjacent();
		for (GeoHash adjacentHash : adjacentHashes) {
			assertNotNull(adjacentHash.getBoundingBox());",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,assertAdjacentHashesAre,"	private void assertAdjacentHashesAre(String centerString, String[] adjacentStrings) {
		GeoHash center = GeoHash.fromGeohashString(centerString);
		GeoHash[] adjacent = center.getAdjacent();
		for (String check : adjacentStrings) {
			assertArrayContainsGeoHash(check, adjacent);",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,assertArrayContainsGeoHash,"	private void assertArrayContainsGeoHash(String check, GeoHash[] hashes) {
		boolean found = false;
		for (GeoHash hash : hashes) {
			if (hash.toBase32().equals(check)) {
				found = true;
				break;
			}
		}
		assertTrue(""Array should contain "" + check, found);
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,testNeibouringHashesNearMeridian,"	public void testNeibouringHashesNearMeridian() {
		GeoHash hash = GeoHash.fromGeohashString(""sp2j"");
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(""ezrv"", west.toBase32());
		west = west.getWesternNeighbour();
		assertEquals(""ezrt"", west.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,testSimpleWithin,"	public void testSimpleWithin() {
		GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
		GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
		assertWithin(inside, hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(hash.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,testToLongAndBack,"	public void testToLongAndBack() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		long lv = hash.longValue();
		assertEquals(lv + (1 << (64 - hash.significantBits())), hash.next().longValue());
		GeoHash hashFromLong = GeoHash.fromLongValue(lv, hash.significantBits());
		assertEquals(""dr4jb0bn21"", hashFromLong.toBase32());
		assertEquals(hash, hashFromLong);
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,testNext,"	public void testNext() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 10);
		GeoHash next = hash.next();
		assertTrue(hash.compareTo(next) < 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,testNextPrev,"	public void testNextPrev() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 35);
		GeoHash next = hash.next(2);
		assertTrue(hash.compareTo(next) < 0);
		GeoHash prev1 = next.prev();
		GeoHash prev2 = prev1.next(-1);
		assertTrue(prev1.compareTo(next) < 0);
		System.out.println(""hash: "" + hash.toBase32());
		System.out.println(""next: "" + next.toBase32());
		System.out.println(""prev1: "" + prev1.toBase32());
		System.out.println(""prev2: "" + prev2.toBase32());

		assertTrue(prev2.compareTo(prev1) < 0);
		assertTrue(prev2.compareTo(hash) == 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,testGetCharacterPrecisionThrows,"	public void testGetCharacterPrecisionThrows() throws Exception {
		GeoHash hash = GeoHash.withBitPrecision(37.7, -122.52, 32);
		hash.getCharacterPrecision();
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,testGetCharacterPrecisionWorksWhenPrecisionIsMultipleOfFive,"	public void testGetCharacterPrecisionWorksWhenPrecisionIsMultipleOfFive() throws Exception {
		GeoHash hash = GeoHash.withBitPrecision(37.7, -122.52, 60);
		int precision = hash.getCharacterPrecision();
		assertEquals(precision, 12);
	}",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
9a20c9f98d79186b8ee757aa2151676f78fb8aea,GeoHashTest.java,testStepsBetween,"	public void testStepsBetween() {
		GeoHash bl = GeoHash.withBitPrecision(37.7, -122.52, 35);
		GeoHash ur = GeoHash.withBitPrecision(37.84, -122.35, 35);

		long steps = GeoHash.stepsBetween(bl, bl);
		assertEquals(steps, 0);

		steps = GeoHash.stepsBetween(bl, bl.next(4));
		assertEquals(steps, 4);

		BoundingBoxGeoHashIterator iter = new BoundingBoxGeoHashIterator(new TwoGeoHashBoundingBox(bl, ur));
		int count = 0;
		while (iter.hasNext()) {
			iter.next();
			count++;
		}
		assertEquals(12875, count);

		int allHashes = 0;
		int inBbox = 1;
		int latMore = 0;
		int lonMore = 0;
		int bothMore = 0;
		int latLess = 0;
		int lonLess = 0;
		int bothLess = 0;
		int latLessLonMore = 0;
		int latMoreLonLess = 0;
		GeoHash idx = bl;
		BoundingBox iterBbox = iter.getBoundingBox().getBoundingBox();
		while (idx.compareTo(ur) < 0) {
			idx = idx.next();
			allHashes++;
			if (iterBbox.contains(idx.getPoint())) {
				inBbox++;
			}
			boolean latIsMore = false;
			boolean latIsLess = false;
			if (idx.getPoint().getLatitude() > iterBbox.getMaxLat()) {
				latIsMore = true;
				latMore++;
			} else if (idx.getPoint().getLatitude() < iterBbox.getMinLat()) {
				latIsLess = true;
				latLess++;
			}
			if (idx.getPoint().getLongitude() > iterBbox.getMaxLon()) {
				lonMore++;
				if (latIsMore) {
					bothMore++;
				}
				if (latIsLess) {
					latLessLonMore++;
				}
			} else if (idx.getPoint().getLongitude() < iterBbox.getMinLon()) {
				lonLess++;
				if (latIsLess) {
					bothLess++;
				}
				if (latIsMore) {
					latMoreLonLess++;
				}
			}
		}

		// Just trying to understand where these GeoHashes are with regard to
		// their bounding box.
		steps = GeoHash.stepsBetween(bl, ur);
		assertEquals(48472, steps);
		assertEquals(steps, allHashes);
		assertEquals(count, inBbox);
		assertEquals(14938, latMore);
		assertEquals(640, lonMore);
		assertEquals(0, bothMore);
		assertEquals(7680, latLess);
		assertEquals(24391, lonLess);
		assertEquals(0, bothLess);
		assertEquals(240, latLessLonMore);
		assertEquals(11811, latMoreLonLess);
		assertEquals(steps, lonLess + latLess + latMore + lonMore + inBbox - latLessLonMore - latMoreLonLess - 1);
",https://www.github.com/kungfoo/geohash-java/commit/9a20c9f98d79186b8ee757aa2151676f78fb8aea
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0) {
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		}
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,fromBinaryString,"	public static GeoHash fromBinaryString(String binaryString) {
		GeoHash geohash = new GeoHash();
		for (int i = 0; i < binaryString.length(); i++) {
			if (binaryString.charAt(i) == '1') {
				geohash.addOnBitToEnd();
			} else if (binaryString.charAt(i) == '0') {
				geohash.addOffBitToEnd();
			} else {
				throw new IllegalArgumentException(binaryString + "" is not a valid geohash as a binary string"");
			}
		}
		geohash.bits <<= (64 - geohash.significantBits);
		long[] latitudeBits = geohash.getRightAlignedLatitudeBits();
		long[] longitudeBits = geohash.getRightAlignedLongitudeBits();
		return geohash.recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,fromLongValue,"	public static GeoHash fromLongValue(long hashVal, int significantBits) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		String binaryString = Long.toBinaryString(hashVal);
		while (binaryString.length() < 64) {
			binaryString = ""0"" + binaryString;
		}
		for (int j = 0; j < significantBits; j++) {
			if (isEvenBit) {
				divideRangeDecode(hash, longitudeRange, binaryString.charAt(j) != '0');
			} else {
				divideRangeDecode(hash, latitudeRange, binaryString.charAt(j) != '0');
			}
			isEvenBit = !isEvenBit;
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,geoHashStringWithCharacterPrecision,"        public static String geoHashStringWithCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
                GeoHash hash = withCharacterPrecision(latitude, longitude, numberOfCharacters);
                return hash.toBase32();
        }",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(
				latitudeRange[1],",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,next,"	public GeoHash next(int step) {
		return fromOrd(ord() + step, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,next,"	public GeoHash next() {
		return next(1);
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,prev,"	public GeoHash prev() {
		return next(-1);
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,ord,"	public long ord() {
		int insignificantBits = 64 - significantBits;
		return bits >> insignificantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,getCharacterPrecision,"	public int getCharacterPrecision() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(
					""precision of GeoHash is not divisble by 5: "" + this);
		}
		return significantBits / 5;
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,fromOrd,"	public static GeoHash fromOrd(long ord, int significantBits) {
		int insignificantBits = 64 - significantBits;
		return fromLongValue(ord << insignificantBits, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,stepsBetween,"	public static long stepsBetween(GeoHash one, GeoHash two) {
		if (one.significantBits() != two.significantBits()) {
			throw new IllegalArgumentException(
					""It is only valid to compare the number of steps between two hashes if they have the same number of significant bits"");
		}
		return two.ord() - one.ord();
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern,",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,significantBits,"	public int significantBits() {
		return significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,longValue,"	public long longValue() {
		return bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,toBase32,"	public String toBase32() {
		if (significantBits % 5 != 0) {
			return """";
		}
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.point = hash.boundingBox.getCenterPoint();
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", Long.toBinaryString(bits), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,toBinaryString,"	public String toBinaryString() {
		StringBuilder bui = new StringBuilder();
		long bitsCopy = bits;
		for (int i = 0; i < significantBits; i++) {
			if ((bitsCopy & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				bui.append('1');
			} else {
				bui.append('0');
			}
			bitsCopy <<= 1;
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,mask,"	private long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHash.java,compareTo,"	public int compareTo(GeoHash o) {
		return new Long(bits).compareTo(o.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
		rand = new Random();
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			BoundingBox bbox = gh.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,testToAndFromBinaryString,"	public void testToAndFromBinaryString() {
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			String binaryString = gh.toBinaryString();",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertWithin(hash, bbox);
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,assertWithin,"	private void assertWithin(GeoHash hash, GeoHash bbox) {
		assertTrue(hash.toBase32() + "" should be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash.toBase32() + "" should NOT be within "" + bbox.toBase32(), hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");

                String geoHashString = GeoHash.geoHashStringWithCharacterPrecision(point.getLatitude(), point.getLongitude(), 12);
                assertEquals(fullStringValue, geoHashString);
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xd000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xc000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);
",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertEquals(start.getBoundingBox(), end.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
			double randomLatitude = (rand.nextDouble() - 0.5) * 180;",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,testKnownNeighbouringHashes,"	public void testKnownNeighbouringHashes() {
		GeoHash h1 = GeoHash.fromGeohashString(""u1pb"");
		assertEquals(""u0zz"", h1.getSouthernNeighbour().toBase32());
		assertEquals(""u1pc"", h1.getNorthernNeighbour().toBase32());
		assertEquals(""u300"", h1.getEasternNeighbour().toBase32());
		assertEquals(""u302"", h1.getEasternNeighbour().getEasternNeighbour().toBase32());
		assertEquals(""u1p8"", h1.getWesternNeighbour().toBase32());

		assertEquals(""sp2j"", GeoHash.withCharacterPrecision(41.7, 0.08, 4).toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,testKnownAdjacentNeighbours,"	public void testKnownAdjacentNeighbours() {
		String center = ""dqcjqc"";
		String[] adjacent = new String[] { ""dqcjqf"", ""dqcjqb"", ""dqcjr1"", ""dqcjq9"", ""dqcjqd"", ""dqcjr4"", ""dqcjr0"",
				""dqcjq8"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""u1x0dfg"";
		adjacent = new String[] { ""u1x0dg4"", ""u1x0dg5"", ""u1x0dgh"", ""u1x0dfu"", ""u1x0dfs"", ""u1x0dfe"", ""u1x0dfd"",
				""u1x0dff"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""sp2j"";
		adjacent = new String[] { ""ezry"", ""sp2n"", ""sp2q"", ""sp2m"", ""sp2k"", ""sp2h"", ""ezru"", ""ezrv"" };
		assertAdjacentHashesAre(center, adjacent);
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,testThatAdjacentHashesHavePointInitialized,"	public void testThatAdjacentHashesHavePointInitialized(){
		String center = ""dqcjqc"";
		GeoHash geohash = GeoHash.fromGeohashString(center);
		GeoHash[] adjacentHashes = geohash.getAdjacent();
		for (GeoHash adjacentHash : adjacentHashes) {
			assertNotNull(adjacentHash.getBoundingBox());",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,assertAdjacentHashesAre,"	private void assertAdjacentHashesAre(String centerString, String[] adjacentStrings) {
		GeoHash center = GeoHash.fromGeohashString(centerString);
		GeoHash[] adjacent = center.getAdjacent();
		for (String check : adjacentStrings) {
			assertArrayContainsGeoHash(check, adjacent);",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,assertArrayContainsGeoHash,"	private void assertArrayContainsGeoHash(String check, GeoHash[] hashes) {
		boolean found = false;
		for (GeoHash hash : hashes) {
			if (hash.toBase32().equals(check)) {
				found = true;
				break;
			}
		}
		assertTrue(""Array should contain "" + check, found);
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,testNeibouringHashesNearMeridian,"	public void testNeibouringHashesNearMeridian() {
		GeoHash hash = GeoHash.fromGeohashString(""sp2j"");
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(""ezrv"", west.toBase32());
		west = west.getWesternNeighbour();
		assertEquals(""ezrt"", west.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,testSimpleWithin,"	public void testSimpleWithin() {
		GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
		GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
		assertWithin(inside, hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(hash.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,testToLongAndBack,"	public void testToLongAndBack() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		long lv = hash.longValue();
		assertEquals(lv + (1 << (64 - hash.significantBits())), hash.next().longValue());
		GeoHash hashFromLong = GeoHash.fromLongValue(lv, hash.significantBits());
		assertEquals(""dr4jb0bn21"", hashFromLong.toBase32());
		assertEquals(hash, hashFromLong);
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,testNext,"	public void testNext() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 10);
		GeoHash next = hash.next();
		assertTrue(hash.compareTo(next) < 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,testNextPrev,"	public void testNextPrev() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 35);
		GeoHash next = hash.next(2);
		assertTrue(hash.compareTo(next) < 0);
		GeoHash prev1 = next.prev();
		GeoHash prev2 = prev1.next(-1);
		assertTrue(prev1.compareTo(next) < 0);
		System.out.println(""hash: "" + hash.toBase32());
		System.out.println(""next: "" + next.toBase32());
		System.out.println(""prev1: "" + prev1.toBase32());
		System.out.println(""prev2: "" + prev2.toBase32());

		assertTrue(prev2.compareTo(prev1) < 0);
		assertTrue(prev2.compareTo(hash) == 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,testGetCharacterPrecisionThrows,"	public void testGetCharacterPrecisionThrows() throws Exception {
		GeoHash hash = GeoHash.withBitPrecision(37.7, -122.52, 32);
		hash.getCharacterPrecision();
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,testGetCharacterPrecisionWorksWhenPrecisionIsMultipleOfFive,"	public void testGetCharacterPrecisionWorksWhenPrecisionIsMultipleOfFive() throws Exception {
		GeoHash hash = GeoHash.withBitPrecision(37.7, -122.52, 60);
		int precision = hash.getCharacterPrecision();
		assertEquals(precision, 12);
	}",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
4a8c8bf2baecd56605305e4c5879e22346df3243,GeoHashTest.java,testStepsBetween,"	public void testStepsBetween() {
		GeoHash bl = GeoHash.withBitPrecision(37.7, -122.52, 35);
		GeoHash ur = GeoHash.withBitPrecision(37.84, -122.35, 35);

		long steps = GeoHash.stepsBetween(bl, bl);
		assertEquals(steps, 0);

		steps = GeoHash.stepsBetween(bl, bl.next(4));
		assertEquals(steps, 4);

		BoundingBoxGeoHashIterator iter = new BoundingBoxGeoHashIterator(new TwoGeoHashBoundingBox(bl, ur));
		int count = 0;
		while (iter.hasNext()) {
			iter.next();
			count++;
		}
		assertEquals(12875, count);

		int allHashes = 0;
		int inBbox = 1;
		int latMore = 0;
		int lonMore = 0;
		int bothMore = 0;
		int latLess = 0;
		int lonLess = 0;
		int bothLess = 0;
		int latLessLonMore = 0;
		int latMoreLonLess = 0;
		GeoHash idx = bl;
		BoundingBox iterBbox = iter.getBoundingBox().getBoundingBox();
		while (idx.compareTo(ur) < 0) {
			idx = idx.next();
			allHashes++;
			if (iterBbox.contains(idx.getPoint())) {
				inBbox++;
			}
			boolean latIsMore = false;
			boolean latIsLess = false;
			if (idx.getPoint().getLatitude() > iterBbox.getMaxLat()) {
				latIsMore = true;
				latMore++;
			} else if (idx.getPoint().getLatitude() < iterBbox.getMinLat()) {
				latIsLess = true;
				latLess++;
			}
			if (idx.getPoint().getLongitude() > iterBbox.getMaxLon()) {
				lonMore++;
				if (latIsMore) {
					bothMore++;
				}
				if (latIsLess) {
					latLessLonMore++;
				}
			} else if (idx.getPoint().getLongitude() < iterBbox.getMinLon()) {
				lonLess++;
				if (latIsLess) {
					bothLess++;
				}
				if (latIsMore) {
					latMoreLonLess++;
				}
			}
		}

		// Just trying to understand where these GeoHashes are with regard to
		// their bounding box.
		steps = GeoHash.stepsBetween(bl, ur);
		assertEquals(48472, steps);
		assertEquals(steps, allHashes);
		assertEquals(count, inBbox);
		assertEquals(14938, latMore);
		assertEquals(640, lonMore);
		assertEquals(0, bothMore);
		assertEquals(7680, latLess);
		assertEquals(24391, lonLess);
		assertEquals(0, bothLess);
		assertEquals(240, latLessLonMore);
		assertEquals(11811, latMoreLonLess);
		assertEquals(steps, lonLess + latLess + latMore + lonMore + inBbox - latLessLonMore - latMoreLonLess - 1);
",https://www.github.com/kungfoo/geohash-java/commit/4a8c8bf2baecd56605305e4c5879e22346df3243
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0) {
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		}
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,fromBinaryString,"	public static GeoHash fromBinaryString(String binaryString) {
		GeoHash geohash = new GeoHash();
		for (int i = 0; i < binaryString.length(); i++) {
			if (binaryString.charAt(i) == '1') {
				geohash.addOnBitToEnd();
			} else if (binaryString.charAt(i) == '0') {
				geohash.addOffBitToEnd();
			} else {
				throw new IllegalArgumentException(binaryString + "" is not a valid geohash as a binary string"");
			}
		}
		geohash.bits <<= (64 - geohash.significantBits);
		long[] latitudeBits = geohash.getRightAlignedLatitudeBits();
		long[] longitudeBits = geohash.getRightAlignedLongitudeBits();
		return geohash.recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,fromLongValue,"	public static GeoHash fromLongValue(long hashVal, int significantBits) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		String binaryString = Long.toBinaryString(hashVal);
		while (binaryString.length() < 64) {
			binaryString = ""0"" + binaryString;
		}
		for (int j = 0; j < significantBits; j++) {
			if (isEvenBit) {
				divideRangeDecode(hash, longitudeRange, binaryString.charAt(j) != '0');
			} else {
				divideRangeDecode(hash, latitudeRange, binaryString.charAt(j) != '0');
			}
			isEvenBit = !isEvenBit;
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,geoHashStringWithCharacterPrecision,"	public static String geoHashStringWithCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		GeoHash hash = withCharacterPrecision(latitude, longitude, numberOfCharacters);
		return hash.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(
				latitudeRange[1],",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,next,"	public GeoHash next(int step) {
		return fromOrd(ord() + step, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,next,"	public GeoHash next() {
		return next(1);
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,prev,"	public GeoHash prev() {
		return next(-1);
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,ord,"	public long ord() {
		int insignificantBits = 64 - significantBits;
		return bits >> insignificantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,getCharacterPrecision,"	public int getCharacterPrecision() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(
					""precision of GeoHash is not divisble by 5: "" + this);
		}
		return significantBits / 5;
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,fromOrd,"	public static GeoHash fromOrd(long ord, int significantBits) {
		int insignificantBits = 64 - significantBits;
		return fromLongValue(ord << insignificantBits, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,stepsBetween,"	public static long stepsBetween(GeoHash one, GeoHash two) {
		if (one.significantBits() != two.significantBits()) {
			throw new IllegalArgumentException(
					""It is only valid to compare the number of steps between two hashes if they have the same number of significant bits"");
		}
		return two.ord() - one.ord();
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern,",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,significantBits,"	public int significantBits() {
		return significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,longValue,"	public long longValue() {
		return bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,toBase32,"	public String toBase32() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(""Cannot convert a geohash to base32 if the precision is not a multiple of 5."");
		}
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.point = hash.boundingBox.getCenterPoint();
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", Long.toBinaryString(bits), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,toBinaryString,"	public String toBinaryString() {
		StringBuilder bui = new StringBuilder();
		long bitsCopy = bits;
		for (int i = 0; i < significantBits; i++) {
			if ((bitsCopy & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				bui.append('1');
			} else {
				bui.append('0');
			}
			bitsCopy <<= 1;
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,mask,"	private long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHash.java,compareTo,"	public int compareTo(GeoHash o) {
		return new Long(bits).compareTo(o.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
		rand = new Random();
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,toBase32ShouldThrowWhenPrecisionIsNotAMultipleOf5,"	public void toBase32ShouldThrowWhenPrecisionIsNotAMultipleOf5() {
		hash.bits = 0x6ff0413000000000l;
		hash.significantBits = 24;
		hash.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			BoundingBox bbox = gh.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,testToAndFromBinaryString,"	public void testToAndFromBinaryString() {
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			String binaryString = gh.toBinaryString();",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertWithin(hash, bbox);
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,assertWithin,"	private void assertWithin(GeoHash hash, GeoHash bbox) {
		assertTrue(hash + "" should be within "" + bbox, hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash + "" should NOT be within "" + bbox, hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");

		String geoHashString = GeoHash.geoHashStringWithCharacterPrecision(point.getLatitude(), point.getLongitude(), 12);
		assertEquals(fullStringValue, geoHashString);
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xd000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xc000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);
",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertEquals(start.getBoundingBox(), end.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
			double randomLatitude = (rand.nextDouble() - 0.5) * 180;",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,testKnownNeighbouringHashes,"	public void testKnownNeighbouringHashes() {
		GeoHash h1 = GeoHash.fromGeohashString(""u1pb"");
		assertEquals(""u0zz"", h1.getSouthernNeighbour().toBase32());
		assertEquals(""u1pc"", h1.getNorthernNeighbour().toBase32());
		assertEquals(""u300"", h1.getEasternNeighbour().toBase32());
		assertEquals(""u302"", h1.getEasternNeighbour().getEasternNeighbour().toBase32());
		assertEquals(""u1p8"", h1.getWesternNeighbour().toBase32());

		assertEquals(""sp2j"", GeoHash.withCharacterPrecision(41.7, 0.08, 4).toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,testKnownAdjacentNeighbours,"	public void testKnownAdjacentNeighbours() {
		String center = ""dqcjqc"";
		String[] adjacent = new String[] { ""dqcjqf"", ""dqcjqb"", ""dqcjr1"", ""dqcjq9"", ""dqcjqd"", ""dqcjr4"", ""dqcjr0"",
				""dqcjq8"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""u1x0dfg"";
		adjacent = new String[] { ""u1x0dg4"", ""u1x0dg5"", ""u1x0dgh"", ""u1x0dfu"", ""u1x0dfs"", ""u1x0dfe"", ""u1x0dfd"",
				""u1x0dff"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""sp2j"";
		adjacent = new String[] { ""ezry"", ""sp2n"", ""sp2q"", ""sp2m"", ""sp2k"", ""sp2h"", ""ezru"", ""ezrv"" };
		assertAdjacentHashesAre(center, adjacent);
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,testThatAdjacentHashesHavePointInitialized,"	public void testThatAdjacentHashesHavePointInitialized() {
		String center = ""dqcjqc"";
		GeoHash geohash = GeoHash.fromGeohashString(center);
		GeoHash[] adjacentHashes = geohash.getAdjacent();
		for (GeoHash adjacentHash : adjacentHashes) {
			assertNotNull(adjacentHash.getBoundingBox());",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,assertAdjacentHashesAre,"	private void assertAdjacentHashesAre(String centerString, String[] adjacentStrings) {
		GeoHash center = GeoHash.fromGeohashString(centerString);
		GeoHash[] adjacent = center.getAdjacent();
		for (String check : adjacentStrings) {
			assertArrayContainsGeoHash(check, adjacent);",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,assertArrayContainsGeoHash,"	private void assertArrayContainsGeoHash(String check, GeoHash[] hashes) {
		boolean found = false;
		for (GeoHash hash : hashes) {
			if (hash.toBase32().equals(check)) {
				found = true;
				break;
			}
		}
		assertTrue(""Array should contain "" + check, found);
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,testNeibouringHashesNearMeridian,"	public void testNeibouringHashesNearMeridian() {
		GeoHash hash = GeoHash.fromGeohashString(""sp2j"");
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(""ezrv"", west.toBase32());
		west = west.getWesternNeighbour();
		assertEquals(""ezrt"", west.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,testSimpleWithin,"	public void testSimpleWithin() {
		GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
		GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
		assertWithin(inside, hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(hash.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,testToLongAndBack,"	public void testToLongAndBack() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		long lv = hash.longValue();
		assertEquals(lv + (1 << (64 - hash.significantBits())), hash.next().longValue());
		GeoHash hashFromLong = GeoHash.fromLongValue(lv, hash.significantBits());
		assertEquals(""dr4jb0bn21"", hashFromLong.toBase32());
		assertEquals(hash, hashFromLong);
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,testNext,"	public void testNext() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 10);
		GeoHash next = hash.next();
		assertTrue(hash.compareTo(next) < 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,testNextPrev,"	public void testNextPrev() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 35);
		GeoHash next = hash.next(2);
		assertTrue(hash.compareTo(next) < 0);
		GeoHash prev1 = next.prev();
		GeoHash prev2 = prev1.next(-1);
		assertTrue(prev1.compareTo(next) < 0);
		System.out.println(""hash: "" + hash.toBase32());
		System.out.println(""next: "" + next.toBase32());
		System.out.println(""prev1: "" + prev1.toBase32());
		System.out.println(""prev2: "" + prev2.toBase32());

		assertTrue(prev2.compareTo(prev1) < 0);
		assertTrue(prev2.compareTo(hash) == 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,testGetCharacterPrecisionThrows,"	public void testGetCharacterPrecisionThrows() throws Exception {
		GeoHash hash = GeoHash.withBitPrecision(37.7, -122.52, 32);
		hash.getCharacterPrecision();
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,testGetCharacterPrecisionWorksWhenPrecisionIsMultipleOfFive,"	public void testGetCharacterPrecisionWorksWhenPrecisionIsMultipleOfFive() throws Exception {
		GeoHash hash = GeoHash.withBitPrecision(37.7, -122.52, 60);
		int precision = hash.getCharacterPrecision();
		assertEquals(precision, 12);
	}",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
9ba2106919471d74ff5647dc6c2fb3ea051e5434,GeoHashTest.java,testStepsBetween,"	public void testStepsBetween() {
		GeoHash bl = GeoHash.withBitPrecision(37.7, -122.52, 35);
		GeoHash ur = GeoHash.withBitPrecision(37.84, -122.35, 35);

		long steps = GeoHash.stepsBetween(bl, bl);
		assertEquals(steps, 0);

		steps = GeoHash.stepsBetween(bl, bl.next(4));
		assertEquals(steps, 4);

		BoundingBoxGeoHashIterator iter = new BoundingBoxGeoHashIterator(new TwoGeoHashBoundingBox(bl, ur));
		int count = 0;
		while (iter.hasNext()) {
			iter.next();
			count++;
		}
		assertEquals(12875, count);

		int allHashes = 0;
		int inBbox = 1;
		int latMore = 0;
		int lonMore = 0;
		int bothMore = 0;
		int latLess = 0;
		int lonLess = 0;
		int bothLess = 0;
		int latLessLonMore = 0;
		int latMoreLonLess = 0;
		GeoHash idx = bl;
		BoundingBox iterBbox = iter.getBoundingBox().getBoundingBox();
		while (idx.compareTo(ur) < 0) {
			idx = idx.next();
			allHashes++;
			if (iterBbox.contains(idx.getPoint())) {
				inBbox++;
			}
			boolean latIsMore = false;
			boolean latIsLess = false;
			if (idx.getPoint().getLatitude() > iterBbox.getMaxLat()) {
				latIsMore = true;
				latMore++;
			} else if (idx.getPoint().getLatitude() < iterBbox.getMinLat()) {
				latIsLess = true;
				latLess++;
			}
			if (idx.getPoint().getLongitude() > iterBbox.getMaxLon()) {
				lonMore++;
				if (latIsMore) {
					bothMore++;
				}
				if (latIsLess) {
					latLessLonMore++;
				}
			} else if (idx.getPoint().getLongitude() < iterBbox.getMinLon()) {
				lonLess++;
				if (latIsLess) {
					bothLess++;
				}
				if (latIsMore) {
					latMoreLonLess++;
				}
			}
		}

		// Just trying to understand where these GeoHashes are with regard to
		// their bounding box.
		steps = GeoHash.stepsBetween(bl, ur);
		assertEquals(48472, steps);
		assertEquals(steps, allHashes);
		assertEquals(count, inBbox);
		assertEquals(14938, latMore);
		assertEquals(640, lonMore);
		assertEquals(0, bothMore);
		assertEquals(7680, latLess);
		assertEquals(24391, lonLess);
		assertEquals(0, bothLess);
		assertEquals(240, latLessLonMore);
		assertEquals(11811, latMoreLonLess);
		assertEquals(steps, lonLess + latLess + latMore + lonMore + inBbox - latLessLonMore - latMoreLonLess - 1);
",https://www.github.com/kungfoo/geohash-java/commit/9ba2106919471d74ff5647dc6c2fb3ea051e5434
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0) {
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		}
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,fromBinaryString,"	public static GeoHash fromBinaryString(String binaryString) {
		GeoHash geohash = new GeoHash();
		for (int i = 0; i < binaryString.length(); i++) {
			if (binaryString.charAt(i) == '1') {
				geohash.addOnBitToEnd();
			} else if (binaryString.charAt(i) == '0') {
				geohash.addOffBitToEnd();
			} else {
				throw new IllegalArgumentException(binaryString + "" is not a valid geohash as a binary string"");
			}
		}
		geohash.bits <<= (64 - geohash.significantBits);
		long[] latitudeBits = geohash.getRightAlignedLatitudeBits();
		long[] longitudeBits = geohash.getRightAlignedLongitudeBits();
		return geohash.recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,fromLongValue,"	public static GeoHash fromLongValue(long hashVal, int significantBits) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		String binaryString = Long.toBinaryString(hashVal);
		while (binaryString.length() < 64) {
			binaryString = ""0"" + binaryString;
		}
		for (int j = 0; j < significantBits; j++) {
			if (isEvenBit) {
				divideRangeDecode(hash, longitudeRange, binaryString.charAt(j) != '0');
			} else {
				divideRangeDecode(hash, latitudeRange, binaryString.charAt(j) != '0');
			}
			isEvenBit = !isEvenBit;
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,geoHashStringWithCharacterPrecision,"	public static String geoHashStringWithCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		GeoHash hash = withCharacterPrecision(latitude, longitude, numberOfCharacters);
		return hash.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(
				latitudeRange[1],",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,next,"	public GeoHash next(int step) {
		return fromOrd(ord() + step, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,next,"	public GeoHash next() {
		return next(1);
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,prev,"	public GeoHash prev() {
		return next(-1);
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,ord,"	public long ord() {
		int insignificantBits = 64 - significantBits;
		return bits >> insignificantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,getCharacterPrecision,"	public int getCharacterPrecision() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(
					""precision of GeoHash is not divisble by 5: "" + this);
		}
		return significantBits / 5;
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,fromOrd,"	public static GeoHash fromOrd(long ord, int significantBits) {
		int insignificantBits = 64 - significantBits;
		return fromLongValue(ord << insignificantBits, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,stepsBetween,"	public static long stepsBetween(GeoHash one, GeoHash two) {
		if (one.significantBits() != two.significantBits()) {
			throw new IllegalArgumentException(
					""It is only valid to compare the number of steps between two hashes if they have the same number of significant bits"");
		}
		return two.ord() - one.ord();
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern,",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,significantBits,"	public int significantBits() {
		return significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,longValue,"	public long longValue() {
		return bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,toBase32,"	public String toBase32() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(""Cannot convert a geohash to base32 if the precision is not a multiple of 5."");
		}
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.point = hash.boundingBox.getCenterPoint();
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", Long.toBinaryString(bits), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,toBinaryString,"	public String toBinaryString() {
		StringBuilder bui = new StringBuilder();
		long bitsCopy = bits;
		for (int i = 0; i < significantBits; i++) {
			if ((bitsCopy & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				bui.append('1');
			} else {
				bui.append('0');
			}
			bitsCopy <<= 1;
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,mask,"	private long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,GeoHash.java,compareTo,"	public int compareTo(GeoHash o) {
		return new Long(bits).compareTo(o.bits);
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,VincentyGeodesy.java,moveInDirection,"	public static WGS84Point moveInDirection(WGS84Point point, double bearingInDegrees, double distanceInMeters) {

		if (bearingInDegrees < 0 || bearingInDegrees > 360) {
			throw new IllegalArgumentException(""direction must be in (0,360)"");
		}

		double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; // WGS-84
		// ellipsiod
		double alpha1 = bearingInDegrees * degToRad;
		double sinAlpha1 = Math.sin(alpha1), cosAlpha1 = Math.cos(alpha1);

		double tanU1 = (1 - f) * Math.tan(point.getLatitude() * degToRad);
		double cosU1 = 1 / Math.sqrt((1 + tanU1 * tanU1)), sinU1 = tanU1 * cosU1;
		double sigma1 = Math.atan2(tanU1, cosAlpha1);
		double sinAlpha = cosU1 * sinAlpha1;
		double cosSqAlpha = 1 - sinAlpha * sinAlpha;
		double uSq = cosSqAlpha * (a * a - b * b) / (b * b);
		double A = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));
		double B = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));

		double sinSigma = 0, cosSigma = 0, cos2SigmaM = 0;
		double sigma = distanceInMeters / (b * A), sigmaP = 2 * Math.PI;
		while (Math.abs(sigma - sigmaP) > 1e-12) {
			cos2SigmaM = Math.cos(2 * sigma1 + sigma);
			sinSigma = Math.sin(sigma);
			cosSigma = Math.cos(sigma);
			double deltaSigma = B
					* sinSigma
					* (cos2SigmaM + B
							/ 4
							* (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM
									* (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));
			sigmaP = sigma;
			sigma = distanceInMeters / (b * A) + deltaSigma;
		}

		double tmp = sinU1 * sinSigma - cosU1 * cosSigma * cosAlpha1;
		double lat2 = Math.atan2(sinU1 * cosSigma + cosU1 * sinSigma * cosAlpha1, (1 - f)
				* Math.sqrt(sinAlpha * sinAlpha + tmp * tmp));
		double lambda = Math.atan2(sinSigma * sinAlpha1, cosU1 * cosSigma - sinU1 * sinSigma * cosAlpha1);
		double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
		double L = lambda - (1 - C) * f * sinAlpha
				* (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));

		double newLat = lat2 / degToRad;
		double newLon = point.getLongitude() + L / degToRad;

		newLon = (newLon > 180.0 ? 360.0 - newLon : newLon);
		newLon = (newLon < -180.0 ? 360.0 + newLon : newLon);

		return new WGS84Point(newLat, newLon);
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
01593445b894bf3238f88eedbd943ac4195a2a4c,VincentyGeodesy.java,distanceInMeters,"	public static double distanceInMeters(WGS84Point foo, WGS84Point bar) {
		double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; // WGS-84
		// ellipsiod
		double L = (bar.getLongitude() - foo.getLongitude()) * degToRad;
		double U1 = Math.atan((1 - f) * Math.tan(foo.getLatitude() * degToRad));
		double U2 = Math.atan((1 - f) * Math.tan(bar.getLatitude() * degToRad));
		double sinU1 = Math.sin(U1), cosU1 = Math.cos(U1);
		double sinU2 = Math.sin(U2), cosU2 = Math.cos(U2);

		double cosSqAlpha, sinSigma, cos2SigmaM, cosSigma, sigma;

		double lambda = L, lambdaP, iterLimit = 20;
		do {
			double sinLambda = Math.sin(lambda), cosLambda = Math.cos(lambda);
			sinSigma = Math.sqrt((cosU2 * sinLambda) * (cosU2 * sinLambda)
					+ (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda) * (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda));
			if (sinSigma == 0) {
				return 0; // co-incident points
			}
			cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda;
			sigma = Math.atan2(sinSigma, cosSigma);
			double sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma;
			cosSqAlpha = 1 - sinAlpha * sinAlpha;
			cos2SigmaM = cosSigma - 2 * sinU1 * sinU2 / cosSqAlpha;
			if (Double.isNaN(cos2SigmaM)) {
				cos2SigmaM = 0; // equatorial line: cosSqAlpha=0
			}
			double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
			lambdaP = lambda;
			lambda = L + (1 - C) * f * sinAlpha
					* (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));
		} while (Math.abs(lambda - lambdaP) > EPSILON && --iterLimit > 0);

		if (iterLimit == 0) {
			return Double.NaN;
		}
		double uSquared = cosSqAlpha * (a * a - b * b) / (b * b);
		double A = 1 + uSquared / 16384 * (4096 + uSquared * (-768 + uSquared * (320 - 175 * uSquared)));
		double B = uSquared / 1024 * (256 + uSquared * (-128 + uSquared * (74 - 47 * uSquared)));
		double deltaSigma = B
				* sinSigma
				* (cos2SigmaM + B
						/ 4
						* (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM
								* (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));
		double s = b * A * (sigma - deltaSigma);

		return s;
	}",https://www.github.com/kungfoo/geohash-java/commit/01593445b894bf3238f88eedbd943ac4195a2a4c
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0) {
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		}
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,fromBinaryString,"	public static GeoHash fromBinaryString(String binaryString) {
		GeoHash geohash = new GeoHash();
		for (int i = 0; i < binaryString.length(); i++) {
			if (binaryString.charAt(i) == '1') {
				geohash.addOnBitToEnd();
			} else if (binaryString.charAt(i) == '0') {
				geohash.addOffBitToEnd();
			} else {
				throw new IllegalArgumentException(binaryString + "" is not a valid geohash as a binary string"");
			}
		}
		geohash.bits <<= (64 - geohash.significantBits);
		long[] latitudeBits = geohash.getRightAlignedLatitudeBits();
		long[] longitudeBits = geohash.getRightAlignedLongitudeBits();
		return geohash.recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,fromLongValue,"	public static GeoHash fromLongValue(long hashVal, int significantBits) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		String binaryString = Long.toBinaryString(hashVal);
		while (binaryString.length() < 64) {
			binaryString = ""0"" + binaryString;
		}
		for (int j = 0; j < significantBits; j++) {
			if (isEvenBit) {
				divideRangeDecode(hash, longitudeRange, binaryString.charAt(j) != '0');
			} else {
				divideRangeDecode(hash, latitudeRange, binaryString.charAt(j) != '0');
			}
			isEvenBit = !isEvenBit;
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,geoHashStringWithCharacterPrecision,"	public static String geoHashStringWithCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		GeoHash hash = withCharacterPrecision(latitude, longitude, numberOfCharacters);
		return hash.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(
				latitudeRange[1],",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,next,"	public GeoHash next(int step) {
		return fromOrd(ord() + step, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,next,"	public GeoHash next() {
		return next(1);
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,prev,"	public GeoHash prev() {
		return next(-1);
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,ord,"	public long ord() {
		int insignificantBits = 64 - significantBits;
		return bits >> insignificantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,getCharacterPrecision,"	public int getCharacterPrecision() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(
					""precision of GeoHash is not divisble by 5: "" + this);
		}
		return significantBits / 5;
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,fromOrd,"	public static GeoHash fromOrd(long ord, int significantBits) {
		int insignificantBits = 64 - significantBits;
		return fromLongValue(ord << insignificantBits, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,stepsBetween,"	public static long stepsBetween(GeoHash one, GeoHash two) {
		if (one.significantBits() != two.significantBits()) {
			throw new IllegalArgumentException(
					""It is only valid to compare the number of steps between two hashes if they have the same number of significant bits"");
		}
		return two.ord() - one.ord();
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern,",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,significantBits,"	public int significantBits() {
		return significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,longValue,"	public long longValue() {
		return bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,toBase32,"	public String toBase32() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(""Cannot convert a geohash to base32 if the precision is not a multiple of 5."");
		}
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.point = hash.boundingBox.getCenterPoint();
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", Long.toBinaryString(bits), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,toBinaryString,"	public String toBinaryString() {
		StringBuilder bui = new StringBuilder();
		long bitsCopy = bits;
		for (int i = 0; i < significantBits; i++) {
			if ((bitsCopy & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				bui.append('1');
			} else {
				bui.append('0');
			}
			bitsCopy <<= 1;
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,mask,"	private long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHash.java,compareTo,"	public int compareTo(GeoHash o) {
		int bitsCmp = Long.compare(bits ^ FIRST_BIT_FLAGGED, o.bits ^ FIRST_BIT_FLAGGED);
		if (bitsCmp != 0){
			return bitsCmp;",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
		rand = new Random();
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,toBase32ShouldThrowWhenPrecisionIsNotAMultipleOf5,"	public void toBase32ShouldThrowWhenPrecisionIsNotAMultipleOf5() {
		hash.bits = 0x6ff0413000000000l;
		hash.significantBits = 24;
		hash.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			BoundingBox bbox = gh.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,testToAndFromBinaryString,"	public void testToAndFromBinaryString() {
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			String binaryString = gh.toBinaryString();",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertWithin(hash, bbox);
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,assertWithin,"	private void assertWithin(GeoHash hash, GeoHash bbox) {
		assertTrue(hash + "" should be within "" + bbox, hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash + "" should NOT be within "" + bbox, hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");

		String geoHashString = GeoHash.geoHashStringWithCharacterPrecision(point.getLatitude(), point.getLongitude(), 12);
		assertEquals(fullStringValue, geoHashString);
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xd000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xc000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);
",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertEquals(start.getBoundingBox(), end.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
			double randomLatitude = (rand.nextDouble() - 0.5) * 180;",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,testKnownNeighbouringHashes,"	public void testKnownNeighbouringHashes() {
		GeoHash h1 = GeoHash.fromGeohashString(""u1pb"");
		assertEquals(""u0zz"", h1.getSouthernNeighbour().toBase32());
		assertEquals(""u1pc"", h1.getNorthernNeighbour().toBase32());
		assertEquals(""u300"", h1.getEasternNeighbour().toBase32());
		assertEquals(""u302"", h1.getEasternNeighbour().getEasternNeighbour().toBase32());
		assertEquals(""u1p8"", h1.getWesternNeighbour().toBase32());

		assertEquals(""sp2j"", GeoHash.withCharacterPrecision(41.7, 0.08, 4).toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,testKnownAdjacentNeighbours,"	public void testKnownAdjacentNeighbours() {
		String center = ""dqcjqc"";
		String[] adjacent = new String[] { ""dqcjqf"", ""dqcjqb"", ""dqcjr1"", ""dqcjq9"", ""dqcjqd"", ""dqcjr4"", ""dqcjr0"",
				""dqcjq8"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""u1x0dfg"";
		adjacent = new String[] { ""u1x0dg4"", ""u1x0dg5"", ""u1x0dgh"", ""u1x0dfu"", ""u1x0dfs"", ""u1x0dfe"", ""u1x0dfd"",
				""u1x0dff"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""sp2j"";
		adjacent = new String[] { ""ezry"", ""sp2n"", ""sp2q"", ""sp2m"", ""sp2k"", ""sp2h"", ""ezru"", ""ezrv"" };
		assertAdjacentHashesAre(center, adjacent);
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,testThatAdjacentHashesHavePointInitialized,"	public void testThatAdjacentHashesHavePointInitialized() {
		String center = ""dqcjqc"";
		GeoHash geohash = GeoHash.fromGeohashString(center);
		GeoHash[] adjacentHashes = geohash.getAdjacent();
		for (GeoHash adjacentHash : adjacentHashes) {
			assertNotNull(adjacentHash.getBoundingBox());",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,assertAdjacentHashesAre,"	private void assertAdjacentHashesAre(String centerString, String[] adjacentStrings) {
		GeoHash center = GeoHash.fromGeohashString(centerString);
		GeoHash[] adjacent = center.getAdjacent();
		for (String check : adjacentStrings) {
			assertArrayContainsGeoHash(check, adjacent);",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,assertArrayContainsGeoHash,"	private void assertArrayContainsGeoHash(String check, GeoHash[] hashes) {
		boolean found = false;
		for (GeoHash hash : hashes) {
			if (hash.toBase32().equals(check)) {
				found = true;
				break;
			}
		}
		assertTrue(""Array should contain "" + check, found);
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,testNeibouringHashesNearMeridian,"	public void testNeibouringHashesNearMeridian() {
		GeoHash hash = GeoHash.fromGeohashString(""sp2j"");
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(""ezrv"", west.toBase32());
		west = west.getWesternNeighbour();
		assertEquals(""ezrt"", west.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,testSimpleWithin,"	public void testSimpleWithin() {
		GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
		GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
		assertWithin(inside, hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(hash.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,testToLongAndBack,"	public void testToLongAndBack() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		long lv = hash.longValue();
		assertEquals(lv + (1 << (64 - hash.significantBits())), hash.next().longValue());
		GeoHash hashFromLong = GeoHash.fromLongValue(lv, hash.significantBits());
		assertEquals(""dr4jb0bn21"", hashFromLong.toBase32());
		assertEquals(hash, hashFromLong);
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,testNext,"	public void testNext() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 10);
		GeoHash next = hash.next();
		assertTrue(hash.compareTo(next) < 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,testNextPrev,"	public void testNextPrev() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 35);
		GeoHash next = hash.next(2);
		assertTrue(hash.compareTo(next) < 0);
		GeoHash prev1 = next.prev();
		GeoHash prev2 = prev1.next(-1);
		assertTrue(prev1.compareTo(next) < 0);
		System.out.println(""hash: "" + hash.toBase32());
		System.out.println(""next: "" + next.toBase32());
		System.out.println(""prev1: "" + prev1.toBase32());
		System.out.println(""prev2: "" + prev2.toBase32());

		assertTrue(prev2.compareTo(prev1) < 0);
		assertTrue(prev2.compareTo(hash) == 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,testGetCharacterPrecisionThrows,"	public void testGetCharacterPrecisionThrows() throws Exception {
		GeoHash hash = GeoHash.withBitPrecision(37.7, -122.52, 32);
		hash.getCharacterPrecision();
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,testGetCharacterPrecisionWorksWhenPrecisionIsMultipleOfFive,"	public void testGetCharacterPrecisionWorksWhenPrecisionIsMultipleOfFive() throws Exception {
		GeoHash hash = GeoHash.withBitPrecision(37.7, -122.52, 60);
		int precision = hash.getCharacterPrecision();
		assertEquals(precision, 12);
	}",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,testStepsBetween,"	public void testStepsBetween() {
		GeoHash bl = GeoHash.withBitPrecision(37.7, -122.52, 35);
		GeoHash ur = GeoHash.withBitPrecision(37.84, -122.35, 35);

		long steps = GeoHash.stepsBetween(bl, bl);
		assertEquals(steps, 0);

		steps = GeoHash.stepsBetween(bl, bl.next(4));
		assertEquals(steps, 4);

		BoundingBoxGeoHashIterator iter = new BoundingBoxGeoHashIterator(new TwoGeoHashBoundingBox(bl, ur));
		int count = 0;
		while (iter.hasNext()) {
			iter.next();
			count++;
		}
		assertEquals(12875, count);

		int allHashes = 0;
		int inBbox = 1;
		int latMore = 0;
		int lonMore = 0;
		int bothMore = 0;
		int latLess = 0;
		int lonLess = 0;
		int bothLess = 0;
		int latLessLonMore = 0;
		int latMoreLonLess = 0;
		GeoHash idx = bl;
		BoundingBox iterBbox = iter.getBoundingBox().getBoundingBox();
		while (idx.compareTo(ur) < 0) {
			idx = idx.next();
			allHashes++;
			if (iterBbox.contains(idx.getPoint())) {
				inBbox++;
			}
			boolean latIsMore = false;
			boolean latIsLess = false;
			if (idx.getPoint().getLatitude() > iterBbox.getMaxLat()) {
				latIsMore = true;
				latMore++;
			} else if (idx.getPoint().getLatitude() < iterBbox.getMinLat()) {
				latIsLess = true;
				latLess++;
			}
			if (idx.getPoint().getLongitude() > iterBbox.getMaxLon()) {
				lonMore++;
				if (latIsMore) {
					bothMore++;
				}
				if (latIsLess) {
					latLessLonMore++;
				}
			} else if (idx.getPoint().getLongitude() < iterBbox.getMinLon()) {
				lonLess++;
				if (latIsLess) {
					bothLess++;
				}
				if (latIsMore) {
					latMoreLonLess++;
				}
			}
		}

		// Just trying to understand where these GeoHashes are with regard to
		// their bounding box.
		steps = GeoHash.stepsBetween(bl, ur);
		assertEquals(48472, steps);
		assertEquals(steps, allHashes);
		assertEquals(count, inBbox);
		assertEquals(14938, latMore);
		assertEquals(640, lonMore);
		assertEquals(0, bothMore);
		assertEquals(7680, latLess);
		assertEquals(24391, lonLess);
		assertEquals(0, bothLess);
		assertEquals(240, latLessLonMore);
		assertEquals(11811, latMoreLonLess);
		assertEquals(steps, lonLess + latLess + latMore + lonMore + inBbox - latLessLonMore - latMoreLonLess - 1);
",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
12550a392ea974cf75c81fce2bd21fe1535715a1,GeoHashTest.java,testCompareTo,"	public void testCompareTo() {
		GeoHash prevHash = null;
		for (int i = 0; i < 1000000; i++) {
			double latitude = rand.nextDouble() * 180 - 90;",https://www.github.com/kungfoo/geohash-java/commit/12550a392ea974cf75c81fce2bd21fe1535715a1
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashEncodingBenchmark.java,setupBenchmark,"	public void setupBenchmark() {
		hashes = new GeoHash[NUMBER_OF_HASHES];
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashEncodingBenchmark.java,benchmarkGeoHashEncoding,"	public void benchmarkGeoHashEncoding() {
		for (int i = 0; i < NUMBER_OF_HASHES; i++) {
			hashes[i] = RandomGeohashes.createWithPrecision(60);",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,toBase32ShouldThrowWhenPrecisionIsNotAMultipleOf5,"	public void toBase32ShouldThrowWhenPrecisionIsNotAMultipleOf5() {
		hash.bits = 0x6ff0413000000000l;
		hash.significantBits = 24;
		hash.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			BoundingBox bbox = gh.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,testToAndFromBinaryString,"	public void testToAndFromBinaryString() {
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			String binaryString = gh.toBinaryString();",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertWithin(hash, bbox);
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,assertWithin,"	private void assertWithin(GeoHash hash, GeoHash bbox) {
		assertTrue(hash + "" should be within "" + bbox, hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash + "" should NOT be within "" + bbox, hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");

		String geoHashString = GeoHash.geoHashStringWithCharacterPrecision(point.getLatitude(), point.getLongitude(), 12);
		assertEquals(fullStringValue, geoHashString);
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xd000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xc000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);
",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertEquals(start.getBoundingBox(), end.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,testKnownNeighbouringHashes,"	public void testKnownNeighbouringHashes() {
		GeoHash h1 = GeoHash.fromGeohashString(""u1pb"");
		assertEquals(""u0zz"", h1.getSouthernNeighbour().toBase32());
		assertEquals(""u1pc"", h1.getNorthernNeighbour().toBase32());
		assertEquals(""u300"", h1.getEasternNeighbour().toBase32());
		assertEquals(""u302"", h1.getEasternNeighbour().getEasternNeighbour().toBase32());
		assertEquals(""u1p8"", h1.getWesternNeighbour().toBase32());

		assertEquals(""sp2j"", GeoHash.withCharacterPrecision(41.7, 0.08, 4).toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,testKnownAdjacentNeighbours,"	public void testKnownAdjacentNeighbours() {
		String center = ""dqcjqc"";
		String[] adjacent = new String[] { ""dqcjqf"", ""dqcjqb"", ""dqcjr1"", ""dqcjq9"", ""dqcjqd"", ""dqcjr4"", ""dqcjr0"",
				""dqcjq8"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""u1x0dfg"";
		adjacent = new String[] { ""u1x0dg4"", ""u1x0dg5"", ""u1x0dgh"", ""u1x0dfu"", ""u1x0dfs"", ""u1x0dfe"", ""u1x0dfd"",
				""u1x0dff"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""sp2j"";
		adjacent = new String[] { ""ezry"", ""sp2n"", ""sp2q"", ""sp2m"", ""sp2k"", ""sp2h"", ""ezru"", ""ezrv"" };
		assertAdjacentHashesAre(center, adjacent);
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,testThatAdjacentHashesHavePointInitialized,"	public void testThatAdjacentHashesHavePointInitialized() {
		String center = ""dqcjqc"";
		GeoHash geohash = GeoHash.fromGeohashString(center);
		GeoHash[] adjacentHashes = geohash.getAdjacent();
		for (GeoHash adjacentHash : adjacentHashes) {
			assertNotNull(adjacentHash.getBoundingBox());",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,assertAdjacentHashesAre,"	private void assertAdjacentHashesAre(String centerString, String[] adjacentStrings) {
		GeoHash center = GeoHash.fromGeohashString(centerString);
		GeoHash[] adjacent = center.getAdjacent();
		for (String check : adjacentStrings) {
			assertArrayContainsGeoHash(check, adjacent);",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,assertArrayContainsGeoHash,"	private void assertArrayContainsGeoHash(String check, GeoHash[] hashes) {
		boolean found = false;
		for (GeoHash hash : hashes) {
			if (hash.toBase32().equals(check)) {
				found = true;
				break;
			}
		}
		assertTrue(""Array should contain "" + check, found);
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,testNeibouringHashesNearMeridian,"	public void testNeibouringHashesNearMeridian() {
		GeoHash hash = GeoHash.fromGeohashString(""sp2j"");
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(""ezrv"", west.toBase32());
		west = west.getWesternNeighbour();
		assertEquals(""ezrt"", west.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,testSimpleWithin,"	public void testSimpleWithin() {
		GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
		GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
		assertWithin(inside, hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(hash.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,testToLongAndBack,"	public void testToLongAndBack() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		long lv = hash.longValue();
		assertEquals(lv + (1 << (64 - hash.significantBits())), hash.next().longValue());
		GeoHash hashFromLong = GeoHash.fromLongValue(lv, hash.significantBits());
		assertEquals(""dr4jb0bn21"", hashFromLong.toBase32());
		assertEquals(hash, hashFromLong);
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,testNext,"	public void testNext() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 10);
		GeoHash next = hash.next();
		assertTrue(hash.compareTo(next) < 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,testNextPrev,"	public void testNextPrev() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 35);
		GeoHash next = hash.next(2);
		assertTrue(hash.compareTo(next) < 0);
		GeoHash prev1 = next.prev();
		GeoHash prev2 = prev1.next(-1);
		assertTrue(prev1.compareTo(next) < 0);
		System.out.println(""hash: "" + hash.toBase32());
		System.out.println(""next: "" + next.toBase32());
		System.out.println(""prev1: "" + prev1.toBase32());
		System.out.println(""prev2: "" + prev2.toBase32());

		assertTrue(prev2.compareTo(prev1) < 0);
		assertTrue(prev2.compareTo(hash) == 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,testGetCharacterPrecisionThrows,"	public void testGetCharacterPrecisionThrows() throws Exception {
		GeoHash hash = GeoHash.withBitPrecision(37.7, -122.52, 32);
		hash.getCharacterPrecision();
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,testGetCharacterPrecisionWorksWhenPrecisionIsMultipleOfFive,"	public void testGetCharacterPrecisionWorksWhenPrecisionIsMultipleOfFive() throws Exception {
		GeoHash hash = GeoHash.withBitPrecision(37.7, -122.52, 60);
		int precision = hash.getCharacterPrecision();
		assertEquals(precision, 12);
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,testStepsBetween,"	public void testStepsBetween() {
		GeoHash bl = GeoHash.withBitPrecision(37.7, -122.52, 35);
		GeoHash ur = GeoHash.withBitPrecision(37.84, -122.35, 35);

		long steps = GeoHash.stepsBetween(bl, bl);
		assertEquals(steps, 0);

		steps = GeoHash.stepsBetween(bl, bl.next(4));
		assertEquals(steps, 4);

		BoundingBoxGeoHashIterator iter = new BoundingBoxGeoHashIterator(new TwoGeoHashBoundingBox(bl, ur));
		int count = 0;
		while (iter.hasNext()) {
			iter.next();
			count++;
		}
		assertEquals(12875, count);

		int allHashes = 0;
		int inBbox = 1;
		int latMore = 0;
		int lonMore = 0;
		int bothMore = 0;
		int latLess = 0;
		int lonLess = 0;
		int bothLess = 0;
		int latLessLonMore = 0;
		int latMoreLonLess = 0;
		GeoHash idx = bl;
		BoundingBox iterBbox = iter.getBoundingBox().getBoundingBox();
		while (idx.compareTo(ur) < 0) {
			idx = idx.next();
			allHashes++;
			if (iterBbox.contains(idx.getPoint())) {
				inBbox++;
			}
			boolean latIsMore = false;
			boolean latIsLess = false;
			if (idx.getPoint().getLatitude() > iterBbox.getMaxLat()) {
				latIsMore = true;
				latMore++;
			} else if (idx.getPoint().getLatitude() < iterBbox.getMinLat()) {
				latIsLess = true;
				latLess++;
			}
			if (idx.getPoint().getLongitude() > iterBbox.getMaxLon()) {
				lonMore++;
				if (latIsMore) {
					bothMore++;
				}
				if (latIsLess) {
					latLessLonMore++;
				}
			} else if (idx.getPoint().getLongitude() < iterBbox.getMinLon()) {
				lonLess++;
				if (latIsLess) {
					bothLess++;
				}
				if (latIsMore) {
					latMoreLonLess++;
				}
			}
		}

		// Just trying to understand where these GeoHashes are with regard to
		// their bounding box.
		steps = GeoHash.stepsBetween(bl, ur);
		assertEquals(48472, steps);
		assertEquals(steps, allHashes);
		assertEquals(count, inBbox);
		assertEquals(14938, latMore);
		assertEquals(640, lonMore);
		assertEquals(0, bothMore);
		assertEquals(7680, latLess);
		assertEquals(24391, lonLess);
		assertEquals(0, bothLess);
		assertEquals(240, latLessLonMore);
		assertEquals(11811, latMoreLonLess);
		assertEquals(steps, lonLess + latLess + latMore + lonMore + inBbox - latLessLonMore - latMoreLonLess - 1);
",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,GeoHashTest.java,testCompareTo,"	public void testCompareTo() {
		GeoHash prevHash = null;
		for (int i = 0; i < 10000; i++) {
			GeoHash hash = RandomGeohashes.createWith5BitsPrecision();",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,RandomGeohashes.java,fullRange,"	public static Iterable<GeoHash> fullRange() {
		return new Iterable<GeoHash>() {
			@Override",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,RandomGeohashes.java,iterator,"			public Iterator<GeoHash> iterator() {
				Random rand = new Random();
				List<GeoHash> hashes = new ArrayList<GeoHash>();
				for (double lat = -90; lat <= 90; lat += rand.nextDouble() + 1.45) {
					for (double lon = -180; lon <= 180; lon += rand.nextDouble() + 1.54) {
						for (int precisionChars = 6; precisionChars <= 12; precisionChars++) {
							GeoHash gh = GeoHash.withCharacterPrecision(lat, lon, precisionChars);
							hashes.add(gh);
						}
					}
				}
				return hashes.iterator();
			}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,RandomGeohashes.java,create,"	public static GeoHash create() {
		return GeoHash.withBitPrecision(randomLatitude(), randomLongitude(), randomPrecision());
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,RandomGeohashes.java,createWith5BitsPrecision,"	public static GeoHash createWith5BitsPrecision() {
		return GeoHash.withCharacterPrecision(randomLatitude(), randomLongitude(), randomCharacterPrecision());
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,RandomGeohashes.java,createWithPrecision,"	public static GeoHash createWithPrecision(int precision) {
		return GeoHash.withBitPrecision(randomLatitude(), randomLongitude(), precision);
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,RandomGeohashes.java,randomLatitude,"	private static double randomLatitude() {
		return (rand.nextDouble() - 0.5) * 180;
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,RandomGeohashes.java,randomLongitude,"	private static double randomLongitude() {
		return (rand.nextDouble() - 0.5) * 360;
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,RandomGeohashes.java,randomPrecision,"	private static int randomPrecision() {
		return rand.nextInt(60) + 5;
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
284aa85a9498c74d5cc2f3495e184ead1e7c6ed3,RandomGeohashes.java,randomCharacterPrecision,"	private static int randomCharacterPrecision() {
		return rand.nextInt(12) + 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/284aa85a9498c74d5cc2f3495e184ead1e7c6ed3
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0) {
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		}
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,fromBinaryString,"	public static GeoHash fromBinaryString(String binaryString) {
		GeoHash geohash = new GeoHash();
		for (int i = 0; i < binaryString.length(); i++) {
			if (binaryString.charAt(i) == '1') {
				geohash.addOnBitToEnd();
			} else if (binaryString.charAt(i) == '0') {
				geohash.addOffBitToEnd();
			} else {
				throw new IllegalArgumentException(binaryString + "" is not a valid geohash as a binary string"");
			}
		}
		geohash.bits <<= (64 - geohash.significantBits);
		long[] latitudeBits = geohash.getRightAlignedLatitudeBits();
		long[] longitudeBits = geohash.getRightAlignedLongitudeBits();
		return geohash.recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,fromLongValue,"	public static GeoHash fromLongValue(long hashVal, int significantBits) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		String binaryString = Long.toBinaryString(hashVal);
		while (binaryString.length() < 64) {
			binaryString = ""0"" + binaryString;
		}
		for (int j = 0; j < significantBits; j++) {
			if (isEvenBit) {
				divideRangeDecode(hash, longitudeRange, binaryString.charAt(j) != '0');
			} else {
				divideRangeDecode(hash, latitudeRange, binaryString.charAt(j) != '0');
			}
			isEvenBit = !isEvenBit;
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,geoHashStringWithCharacterPrecision,"	public static String geoHashStringWithCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		GeoHash hash = withCharacterPrecision(latitude, longitude, numberOfCharacters);
		return hash.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(
				latitudeRange[1],",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,next,"	public GeoHash next(int step) {
		return fromOrd(ord() + step, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,next,"	public GeoHash next() {
		return next(1);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,prev,"	public GeoHash prev() {
		return next(-1);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,ord,"	public long ord() {
		int insignificantBits = 64 - significantBits;
		return bits >> insignificantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,getCharacterPrecision,"	public int getCharacterPrecision() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(
					""precision of GeoHash is not divisble by 5: "" + this);
		}
		return significantBits / 5;
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,fromOrd,"	public static GeoHash fromOrd(long ord, int significantBits) {
		int insignificantBits = 64 - significantBits;
		return fromLongValue(ord << insignificantBits, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,stepsBetween,"	public static long stepsBetween(GeoHash one, GeoHash two) {
		if (one.significantBits() != two.significantBits()) {
			throw new IllegalArgumentException(
					""It is only valid to compare the number of steps between two hashes if they have the same number of significant bits"");
		}
		return two.ord() - one.ord();
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern,",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,significantBits,"	public int significantBits() {
		return significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,longValue,"	public long longValue() {
		return bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,toBase32,"	public String toBase32() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(""Cannot convert a geohash to base32 if the precision is not a multiple of 5."");
		}
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.point = hash.boundingBox.getCenterPoint();
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", Long.toBinaryString(bits), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,toBinaryString,"	public String toBinaryString() {
		StringBuilder bui = new StringBuilder();
		long bitsCopy = bits;
		for (int i = 0; i < significantBits; i++) {
			if ((bitsCopy & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				bui.append('1');
			} else {
				bui.append('0');
			}
			bitsCopy <<= 1;
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,mask,"	private long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHash.java,compareTo,"	public int compareTo(GeoHash o) {
		int bitsCmp = Long.compare(bits ^ FIRST_BIT_FLAGGED, o.bits ^ FIRST_BIT_FLAGGED);
		if (bitsCmp != 0) {
			return bitsCmp;",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,toBase32ShouldThrowWhenPrecisionIsNotAMultipleOf5,"	public void toBase32ShouldThrowWhenPrecisionIsNotAMultipleOf5() {
		hash.bits = 0x6ff0413000000000l;
		hash.significantBits = 24;
		hash.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			BoundingBox bbox = gh.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,testToAndFromBinaryString,"	public void testToAndFromBinaryString() {
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			String binaryString = gh.toBinaryString();",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertWithin(hash, bbox);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,assertWithin,"	private void assertWithin(GeoHash hash, GeoHash bbox) {
		assertTrue(hash + "" should be within "" + bbox, hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash + "" should NOT be within "" + bbox, hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");

		String geoHashString = GeoHash.geoHashStringWithCharacterPrecision(point.getLatitude(), point.getLongitude(), 12);
		assertEquals(fullStringValue, geoHashString);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xd000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xc000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);
",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertEquals(start.getBoundingBox(), end.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,testKnownNeighbouringHashes,"	public void testKnownNeighbouringHashes() {
		GeoHash h1 = GeoHash.fromGeohashString(""u1pb"");
		assertEquals(""u0zz"", h1.getSouthernNeighbour().toBase32());
		assertEquals(""u1pc"", h1.getNorthernNeighbour().toBase32());
		assertEquals(""u300"", h1.getEasternNeighbour().toBase32());
		assertEquals(""u302"", h1.getEasternNeighbour().getEasternNeighbour().toBase32());
		assertEquals(""u1p8"", h1.getWesternNeighbour().toBase32());

		assertEquals(""sp2j"", GeoHash.withCharacterPrecision(41.7, 0.08, 4).toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,testKnownAdjacentNeighbours,"	public void testKnownAdjacentNeighbours() {
		String center = ""dqcjqc"";
		String[] adjacent = new String[] { ""dqcjqf"", ""dqcjqb"", ""dqcjr1"", ""dqcjq9"", ""dqcjqd"", ""dqcjr4"", ""dqcjr0"",
				""dqcjq8"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""u1x0dfg"";
		adjacent = new String[] { ""u1x0dg4"", ""u1x0dg5"", ""u1x0dgh"", ""u1x0dfu"", ""u1x0dfs"", ""u1x0dfe"", ""u1x0dfd"",
				""u1x0dff"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""sp2j"";
		adjacent = new String[] { ""ezry"", ""sp2n"", ""sp2q"", ""sp2m"", ""sp2k"", ""sp2h"", ""ezru"", ""ezrv"" };
		assertAdjacentHashesAre(center, adjacent);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,testThatAdjacentHashesHavePointInitialized,"	public void testThatAdjacentHashesHavePointInitialized() {
		String center = ""dqcjqc"";
		GeoHash geohash = GeoHash.fromGeohashString(center);
		GeoHash[] adjacentHashes = geohash.getAdjacent();
		for (GeoHash adjacentHash : adjacentHashes) {
			assertNotNull(adjacentHash.getBoundingBox());",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,assertAdjacentHashesAre,"	private void assertAdjacentHashesAre(String centerString, String[] adjacentStrings) {
		GeoHash center = GeoHash.fromGeohashString(centerString);
		GeoHash[] adjacent = center.getAdjacent();
		for (String check : adjacentStrings) {
			assertArrayContainsGeoHash(check, adjacent);",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,assertArrayContainsGeoHash,"	private void assertArrayContainsGeoHash(String check, GeoHash[] hashes) {
		boolean found = false;
		for (GeoHash hash : hashes) {
			if (hash.toBase32().equals(check)) {
				found = true;
				break;
			}
		}
		assertTrue(""Array should contain "" + check, found);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,testNeibouringHashesNearMeridian,"	public void testNeibouringHashesNearMeridian() {
		GeoHash hash = GeoHash.fromGeohashString(""sp2j"");
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(""ezrv"", west.toBase32());
		west = west.getWesternNeighbour();
		assertEquals(""ezrt"", west.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,testSimpleWithin,"	public void testSimpleWithin() {
		GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
		GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
		assertWithin(inside, hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(hash.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,testToLongAndBack,"	public void testToLongAndBack() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		long lv = hash.longValue();
		assertEquals(lv + (1 << (64 - hash.significantBits())), hash.next().longValue());
		GeoHash hashFromLong = GeoHash.fromLongValue(lv, hash.significantBits());
		assertEquals(""dr4jb0bn21"", hashFromLong.toBase32());
		assertEquals(hash, hashFromLong);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,testNext,"	public void testNext() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 10);
		GeoHash next = hash.next();
		assertTrue(hash.compareTo(next) < 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,testNextPrev,"	public void testNextPrev() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 35);
		GeoHash next = hash.next(2);
		assertTrue(hash.compareTo(next) < 0);
		GeoHash prev1 = next.prev();
		GeoHash prev2 = prev1.next(-1);
		assertTrue(prev1.compareTo(next) < 0);
		System.out.println(""hash: "" + hash.toBase32());
		System.out.println(""next: "" + next.toBase32());
		System.out.println(""prev1: "" + prev1.toBase32());
		System.out.println(""prev2: "" + prev2.toBase32());

		assertTrue(prev2.compareTo(prev1) < 0);
		assertTrue(prev2.compareTo(hash) == 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,testGetCharacterPrecisionThrows,"	public void testGetCharacterPrecisionThrows() throws Exception {
		GeoHash hash = GeoHash.withBitPrecision(37.7, -122.52, 32);
		hash.getCharacterPrecision();
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,testGetCharacterPrecisionWorksWhenPrecisionIsMultipleOfFive,"	public void testGetCharacterPrecisionWorksWhenPrecisionIsMultipleOfFive() throws Exception {
		GeoHash hash = GeoHash.withBitPrecision(37.7, -122.52, 60);
		int precision = hash.getCharacterPrecision();
		assertEquals(precision, 12);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,testStepsBetween,"	public void testStepsBetween() {
		GeoHash bl = GeoHash.withBitPrecision(37.7, -122.52, 35);
		GeoHash ur = GeoHash.withBitPrecision(37.84, -122.35, 35);

		long steps = GeoHash.stepsBetween(bl, bl);
		assertEquals(steps, 0);

		steps = GeoHash.stepsBetween(bl, bl.next(4));
		assertEquals(steps, 4);

		BoundingBoxGeoHashIterator iter = new BoundingBoxGeoHashIterator(new TwoGeoHashBoundingBox(bl, ur));
		int count = 0;
		while (iter.hasNext()) {
			iter.next();
			count++;
		}
		assertEquals(12875, count);

		int allHashes = 0;
		int inBbox = 1;
		int latMore = 0;
		int lonMore = 0;
		int bothMore = 0;
		int latLess = 0;
		int lonLess = 0;
		int bothLess = 0;
		int latLessLonMore = 0;
		int latMoreLonLess = 0;
		GeoHash idx = bl;
		BoundingBox iterBbox = iter.getBoundingBox().getBoundingBox();
		while (idx.compareTo(ur) < 0) {
			idx = idx.next();
			allHashes++;
			if (iterBbox.contains(idx.getPoint())) {
				inBbox++;
			}
			boolean latIsMore = false;
			boolean latIsLess = false;
			if (idx.getPoint().getLatitude() > iterBbox.getMaxLat()) {
				latIsMore = true;
				latMore++;
			} else if (idx.getPoint().getLatitude() < iterBbox.getMinLat()) {
				latIsLess = true;
				latLess++;
			}
			if (idx.getPoint().getLongitude() > iterBbox.getMaxLon()) {
				lonMore++;
				if (latIsMore) {
					bothMore++;
				}
				if (latIsLess) {
					latLessLonMore++;
				}
			} else if (idx.getPoint().getLongitude() < iterBbox.getMinLon()) {
				lonLess++;
				if (latIsLess) {
					bothLess++;
				}
				if (latIsMore) {
					latMoreLonLess++;
				}
			}
		}

		// Just trying to understand where these GeoHashes are with regard to
		// their bounding box.
		steps = GeoHash.stepsBetween(bl, ur);
		assertEquals(48472, steps);
		assertEquals(steps, allHashes);
		assertEquals(count, inBbox);
		assertEquals(14938, latMore);
		assertEquals(640, lonMore);
		assertEquals(0, bothMore);
		assertEquals(7680, latLess);
		assertEquals(24391, lonLess);
		assertEquals(0, bothLess);
		assertEquals(240, latLessLonMore);
		assertEquals(11811, latMoreLonLess);
		assertEquals(steps, lonLess + latLess + latMore + lonMore + inBbox - latLessLonMore - latMoreLonLess - 1);
",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,GeoHashTest.java,testCompareTo,"	public void testCompareTo() {
		GeoHash prevHash = null;
		for (int i = 0; i < 10000; i++) {
			GeoHash hash = RandomGeohashes.createWith5BitsPrecision();",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,WGS84PointTest.java,setUp,"	public void setUp() {
		a = new WGS84Point(47.2342, 15.7465465);
		b = new WGS84Point(a);
		c = new WGS84Point(-47.234, b.getLongitude());
		d = new WGS84Point(-32.9687253, 12.42334242);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,WGS84PointTest.java,testVincenty,"	public void testVincenty() {
		WGS84Point startPoint = new WGS84Point(40, 40);

		int distanceInMeters = 10000;
		WGS84Point result = VincentyGeodesy.moveInDirection(startPoint, 120,
				distanceInMeters);
		assertEquals(40.10134882, result.getLongitude(), DELTA);
		assertEquals(39.9549245, result.getLatitude(), DELTA);

		assertEquals(distanceInMeters, VincentyGeodesy.distanceInMeters(
				startPoint, result), DELTA);

		WGS84Point p1 = new WGS84Point(1, 1);
		int tenThousandKilometers = 10000000;
		WGS84Point p2 = VincentyGeodesy.moveInDirection(p1, 270, tenThousandKilometers);
		System.out.println(p2);
		assertEquals(tenThousandKilometers, VincentyGeodesy.distanceInMeters(p1, p2), DELTA);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,WGS84PointTest.java,testEquals,"	public void testEquals() {
		assertEquals(a, a);
		assertEquals(a, b);
		assertEquals(b, a);
		assertNotSame(a, b);

		assertFalse(a.equals(c));
		assertFalse(c.equals(a));
		assertFalse(d.equals(c));
		assertFalse(d.equals(a));
		assertFalse(d.equals(new Integer(10)));
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,WGS84PointTest.java,testHashCode,"	public void testHashCode() {
		assertEquals(a.hashCode(), a.hashCode());
		assertEquals(a.hashCode(), b.hashCode());
		assertFalse(a.hashCode() == c.hashCode());
		assertFalse(d.hashCode() == c.hashCode());
		assertFalse(d.hashCode() == new Integer(10).hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,WGS84PointTest.java,testRangeCheck,"	public void testRangeCheck() {
		new WGS84Point(180, 240);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,RandomGeohashes.java,fullRange,"	public static Iterable<GeoHash> fullRange() {
		return new Iterable<GeoHash>() {
			@Override",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,RandomGeohashes.java,iterator,"			public Iterator<GeoHash> iterator() {
				Random rand = new Random();
				List<GeoHash> hashes = new ArrayList<GeoHash>();
				for (double lat = -90; lat <= 90; lat += rand.nextDouble() + 1.45) {
					for (double lon = -180; lon <= 180; lon += rand.nextDouble() + 1.54) {
						for (int precisionChars = 6; precisionChars <= 12; precisionChars++) {
							GeoHash gh = GeoHash.withCharacterPrecision(lat, lon, precisionChars);
							hashes.add(gh);
						}
					}
				}
				return hashes.iterator();
			}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,RandomGeohashes.java,create,"	public static GeoHash create() {
		return GeoHash.withBitPrecision(randomLatitude(), randomLongitude(), randomPrecision());
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,RandomGeohashes.java,createWith5BitsPrecision,"	public static GeoHash createWith5BitsPrecision() {
		return GeoHash.withCharacterPrecision(randomLatitude(), randomLongitude(), randomCharacterPrecision());
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,RandomGeohashes.java,createWithPrecision,"	public static GeoHash createWithPrecision(int precision) {
		return GeoHash.withBitPrecision(randomLatitude(), randomLongitude(), precision);
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,RandomGeohashes.java,randomLatitude,"	private static double randomLatitude() {
		return (rand.nextDouble() - 0.5) * 180;
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,RandomGeohashes.java,randomLongitude,"	private static double randomLongitude() {
		return (rand.nextDouble() - 0.5) * 360;
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,RandomGeohashes.java,randomPrecision,"	private static int randomPrecision() {
		return rand.nextInt(60) + 5;
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
98cd890c79e5df52ecec12b33cf17a8b5d398e76,RandomGeohashes.java,randomCharacterPrecision,"	private static int randomCharacterPrecision() {
		return rand.nextInt(12) + 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/98cd890c79e5df52ecec12b33cf17a8b5d398e76
d3937bf1cd57a85dd2f5938470cadd232a304ae8,WGS84Point.java,getLatitude,"	public double getLatitude() {
		return latitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/d3937bf1cd57a85dd2f5938470cadd232a304ae8
d3937bf1cd57a85dd2f5938470cadd232a304ae8,WGS84Point.java,getLongitude,"	public double getLongitude() {
		return longitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/d3937bf1cd57a85dd2f5938470cadd232a304ae8
d3937bf1cd57a85dd2f5938470cadd232a304ae8,WGS84Point.java,toString,"	public String toString() {
		return String.format(""("" + latitude + "","" + longitude + "")"");
	}",https://www.github.com/kungfoo/geohash-java/commit/d3937bf1cd57a85dd2f5938470cadd232a304ae8
d3937bf1cd57a85dd2f5938470cadd232a304ae8,WGS84Point.java,equals,"	public boolean equals(Object obj) {
		if (obj instanceof WGS84Point) {
			WGS84Point other = (WGS84Point) obj;
			return latitude == other.latitude && longitude == other.longitude;
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/d3937bf1cd57a85dd2f5938470cadd232a304ae8
d3937bf1cd57a85dd2f5938470cadd232a304ae8,WGS84Point.java,hashCode,"	public int hashCode() {
		int result = 42;
		long latBits = Double.doubleToLongBits(latitude);
		long lonBits = Double.doubleToLongBits(longitude);
		result = 31 * result + (int) (latBits ^ (latBits >>> 32));
		result = 31 * result + (int) (lonBits ^ (lonBits >>> 32));
		return result;
	}",https://www.github.com/kungfoo/geohash-java/commit/d3937bf1cd57a85dd2f5938470cadd232a304ae8
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0) {
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		}
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,fromBinaryString,"	public static GeoHash fromBinaryString(String binaryString) {
		GeoHash geohash = new GeoHash();
		for (int i = 0; i < binaryString.length(); i++) {
			if (binaryString.charAt(i) == '1') {
				geohash.addOnBitToEnd();
			} else if (binaryString.charAt(i) == '0') {
				geohash.addOffBitToEnd();
			} else {
				throw new IllegalArgumentException(binaryString + "" is not a valid geohash as a binary string"");
			}
		}
		geohash.bits <<= (64 - geohash.significantBits);
		long[] latitudeBits = geohash.getRightAlignedLatitudeBits();
		long[] longitudeBits = geohash.getRightAlignedLongitudeBits();
		return geohash.recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,fromLongValue,"	public static GeoHash fromLongValue(long hashVal, int significantBits) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		String binaryString = Long.toBinaryString(hashVal);
		while (binaryString.length() < 64) {
			binaryString = ""0"" + binaryString;
		}
		for (int j = 0; j < significantBits; j++) {
			if (isEvenBit) {
				divideRangeDecode(hash, longitudeRange, binaryString.charAt(j) != '0');
			} else {
				divideRangeDecode(hash, latitudeRange, binaryString.charAt(j) != '0');
			}
			isEvenBit = !isEvenBit;
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,geoHashStringWithCharacterPrecision,"	public static String geoHashStringWithCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		GeoHash hash = withCharacterPrecision(latitude, longitude, numberOfCharacters);
		return hash.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(
				latitudeRange[1],",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,next,"	public GeoHash next(int step) {
		return fromOrd(ord() + step, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,next,"	public GeoHash next() {
		return next(1);
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,prev,"	public GeoHash prev() {
		return next(-1);
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,ord,"	public long ord() {
		int insignificantBits = 64 - significantBits;
		return bits >> insignificantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,getCharacterPrecision,"	public int getCharacterPrecision() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(
					""precision of GeoHash is not divisble by 5: "" + this);
		}
		return significantBits / 5;
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,fromOrd,"	public static GeoHash fromOrd(long ord, int significantBits) {
		int insignificantBits = 64 - significantBits;
		return fromLongValue(ord << insignificantBits, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,stepsBetween,"	public static long stepsBetween(GeoHash one, GeoHash two) {
		if (one.significantBits() != two.significantBits()) {
			throw new IllegalArgumentException(
					""It is only valid to compare the number of steps between two hashes if they have the same number of significant bits"");
		}
		return two.ord() - one.ord();
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern,",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,significantBits,"	public int significantBits() {
		return significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,longValue,"	public long longValue() {
		return bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,toBase32,"	public String toBase32() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(""Cannot convert a geohash to base32 if the precision is not a multiple of 5."");
		}
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.point = hash.boundingBox.getCenterPoint();
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", Long.toBinaryString(bits), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,toBinaryString,"	public String toBinaryString() {
		StringBuilder bui = new StringBuilder();
		long bitsCopy = bits;
		for (int i = 0; i < significantBits; i++) {
			if ((bitsCopy & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				bui.append('1');
			} else {
				bui.append('0');
			}
			bitsCopy <<= 1;
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,mask,"	private long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHash.java,compareTo,"	public int compareTo(GeoHash o) {
		int bitsCmp = Long.compare(bits ^ FIRST_BIT_FLAGGED, o.bits ^ FIRST_BIT_FLAGGED);
		if (bitsCmp != 0) {
			return bitsCmp;",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHashBoundingBoxQuery.java,addSearchHash,"	private void addSearchHash(GeoHash hash) {
		if (boundingBox == null) {
			boundingBox = new BoundingBox(hash.getBoundingBox());
		} else {
			boundingBox.expandToInclude(hash.getBoundingBox());
		}
		searchHashes.add(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHashBoundingBoxQuery.java,expandSearch,"	private void expandSearch(GeoHash centerHash, BoundingBox bbox) {
		addSearchHash(centerHash);

		for (GeoHash adjacent : centerHash.getAdjacent()) {
			BoundingBox adjacentBox = adjacent.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHashBoundingBoxQuery.java,hashFits,"	private boolean hashFits(GeoHash hash, BoundingBox bbox) {
		return hash.contains(bbox.getUpperLeft()) && hash.contains(bbox.getLowerRight());
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHashBoundingBoxQuery.java,contains,"	public boolean contains(GeoHash hash) {
		for (GeoHash searchHash : searchHashes) {
			if (hash.within(searchHash)) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHashBoundingBoxQuery.java,contains,"	public boolean contains(WGS84Point point) {
		return contains(GeoHash.withBitPrecision(point.getLatitude(), point.getLongitude(), 64));
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHashBoundingBoxQuery.java,getSearchHashes,"	public List<GeoHash> getSearchHashes() {
		return searchHashes;
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHashBoundingBoxQuery.java,toString,"	public String toString() {
		StringBuilder bui = new StringBuilder();
		for (GeoHash hash : searchHashes) {
			bui.append(hash).append(""\n"");
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,GeoHashBoundingBoxQuery.java,getWktBox,"	public String getWktBox() {
		return ""BOX("" + boundingBox.getMinLon() + "" "" + boundingBox.getMinLat() + "","" + boundingBox.getMaxLon() + "" ""
				+ boundingBox.getMaxLat() + "")"";",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,BoundingBoxSampler.java,getBoundingBox,"	public TwoGeoHashBoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,BoundingBoxSampler.java,next,"	public GeoHash next() {
		if (alreadyUsed.size() == maxSamples) {
			return null;
		}
		int idx = rand.nextInt(maxSamples + 1);
		while (alreadyUsed.contains(idx)) {
			idx = rand.nextInt(maxSamples + 1);
		}
		alreadyUsed.add(idx);
		GeoHash gh = boundingBox.getBottomLeft().next(idx);
		if (!boundingBox.getBoundingBox().contains(gh.getPoint())) {
			return next();
		}
		return gh;
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,BoundingBoxGeoHashIteratorTest.java,testIter,"	public void testIter() {
		BoundingBox box = new BoundingBox(37.7, 37.84, -122.52, -122.35);
		BoundingBoxGeoHashIterator iter = new BoundingBoxGeoHashIterator(
				TwoGeoHashBoundingBox.withBitPrecision(box, 10));
		BoundingBox newBox = iter.getBoundingBox().getBoundingBox();
		List<GeoHash> hashes = new ArrayList<>();
		while (iter.hasNext()) {
			hashes.add(iter.next());
		}
		GeoHash prev = null;
		for (GeoHash gh : hashes) {
			if (prev != null) {",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,BoundingBoxGeoHashIteratorTest.java,testIter2,"	public void testIter2() {
		BoundingBox box = new BoundingBox(37.7, 37.84, -122.52, -122.35);
		BoundingBoxGeoHashIterator iter = new BoundingBoxGeoHashIterator(
				TwoGeoHashBoundingBox.withBitPrecision(box, 35));
		BoundingBox newBox = iter.getBoundingBox().getBoundingBox();
		List<GeoHash> hashes = new ArrayList<>();
		while (iter.hasNext()) {
			hashes.add(iter.next());
		}
		GeoHash prev = null;
		for (GeoHash gh : hashes) {
			if (prev != null) {",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,BoundingBoxSamplerTest.java,testSampler,"	public void testSampler() {
		BoundingBox bbox = new BoundingBox(37.7, 37.84, -122.52, -122.35);
		BoundingBoxSampler sampler = new BoundingBoxSampler(TwoGeoHashBoundingBox.withBitPrecision(bbox, 35), 1179);
		bbox = sampler.getBoundingBox().getBoundingBox();
		GeoHash gh = sampler.next();
		Set<String> hashes = new HashSet<>();
		int sumOfComp = 0;
		int crossingZero = 0;

		GeoHash prev = null;
		while (gh != null) {
			assertTrue(bbox.contains(gh.getPoint()));
			assertFalse(hashes.contains(gh.toBase32()));
			hashes.add(gh.toBase32());
			if (prev != null) {
				sumOfComp += prev.compareTo(gh);
			}
			prev = gh;
			if (sumOfComp == 0) {
				crossingZero++;
			}
			gh = sampler.next();
		}
		assertEquals(12875, hashes.size());
		// The expected value of the sum should be zero. This checks that it is
		// at least close. Worst case is 12875 or -12875 so -40 is sufficiently
		// close
		assertEquals(-40, sumOfComp);
		// Check that the sum is zero a number of times, to make sure values are
		// increasing and decreasing.
		assertEquals(123, crossingZero);
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,RandomGeohashes.java,fullRange,"	public static Iterable<GeoHash> fullRange() {
		return new Iterable<GeoHash>() {
			@Override",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,RandomGeohashes.java,iterator,"			public Iterator<GeoHash> iterator() {
				Random rand = new Random();
				List<GeoHash> hashes = new ArrayList<>();
				for (double lat = -90; lat <= 90; lat += rand.nextDouble() + 1.45) {
					for (double lon = -180; lon <= 180; lon += rand.nextDouble() + 1.54) {
						for (int precisionChars = 6; precisionChars <= 12; precisionChars++) {
							GeoHash gh = GeoHash.withCharacterPrecision(lat, lon, precisionChars);
							hashes.add(gh);
						}
					}
				}
				return hashes.iterator();
			}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,RandomGeohashes.java,create,"	public static GeoHash create() {
		return GeoHash.withBitPrecision(randomLatitude(), randomLongitude(), randomPrecision());
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,RandomGeohashes.java,createWith5BitsPrecision,"	public static GeoHash createWith5BitsPrecision() {
		return GeoHash.withCharacterPrecision(randomLatitude(), randomLongitude(), randomCharacterPrecision());
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,RandomGeohashes.java,createWithPrecision,"	public static GeoHash createWithPrecision(int precision) {
		return GeoHash.withBitPrecision(randomLatitude(), randomLongitude(), precision);
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,RandomGeohashes.java,randomLatitude,"	private static double randomLatitude() {
		return (rand.nextDouble() - 0.5) * 180;
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,RandomGeohashes.java,randomLongitude,"	private static double randomLongitude() {
		return (rand.nextDouble() - 0.5) * 360;
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,RandomGeohashes.java,randomPrecision,"	private static int randomPrecision() {
		return rand.nextInt(60) + 5;
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
a568f1b8196303692b23c9ca66ace0bd36bcf095,RandomGeohashes.java,randomCharacterPrecision,"	private static int randomCharacterPrecision() {
		return rand.nextInt(12) + 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/a568f1b8196303692b23c9ca66ace0bd36bcf095
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		if (numberOfCharacters > MAX_CHARACTER_PRECISION) {
			throw new IllegalArgumentException(""A geohash can only be "" + MAX_CHARACTER_PRECISION + "" character long."");
		}
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (numberOfBits > MAX_BIT_PRECISION) {
			throw new IllegalArgumentException(""A Geohash can only be "" + MAX_BIT_PRECISION + "" bits long!"");
		}
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0) {
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		}
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,fromBinaryString,"	public static GeoHash fromBinaryString(String binaryString) {
		GeoHash geohash = new GeoHash();
		for (int i = 0; i < binaryString.length(); i++) {
			if (binaryString.charAt(i) == '1') {
				geohash.addOnBitToEnd();
			} else if (binaryString.charAt(i) == '0') {
				geohash.addOffBitToEnd();
			} else {
				throw new IllegalArgumentException(binaryString + "" is not a valid geohash as a binary string"");
			}
		}
		geohash.bits <<= (MAX_BIT_PRECISION - geohash.significantBits);
		long[] latitudeBits = geohash.getRightAlignedLatitudeBits();
		long[] longitudeBits = geohash.getRightAlignedLongitudeBits();
		return geohash.recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (MAX_BIT_PRECISION - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,fromLongValue,"	public static GeoHash fromLongValue(long hashVal, int significantBits) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		String binaryString = Long.toBinaryString(hashVal);
		while (binaryString.length() < MAX_BIT_PRECISION) {
			binaryString = ""0"" + binaryString;
		}
		for (int j = 0; j < significantBits; j++) {
			if (isEvenBit) {
				divideRangeDecode(hash, longitudeRange, binaryString.charAt(j) != '0');
			} else {
				divideRangeDecode(hash, latitudeRange, binaryString.charAt(j) != '0');
			}
			isEvenBit = !isEvenBit;
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (MAX_BIT_PRECISION - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,geoHashStringWithCharacterPrecision,"	public static String geoHashStringWithCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		GeoHash hash = withCharacterPrecision(latitude, longitude, numberOfCharacters);
		return hash.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(
				latitudeRange[1],",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,next,"	public GeoHash next(int step) {
		return fromOrd(ord() + step, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,next,"	public GeoHash next() {
		return next(1);
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,prev,"	public GeoHash prev() {
		return next(-1);
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,ord,"	public long ord() {
		int insignificantBits = MAX_BIT_PRECISION - significantBits;
		return bits >> insignificantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,getCharacterPrecision,"	public int getCharacterPrecision() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(
					""precision of GeoHash is not divisble by 5: "" + this);
		}
		return significantBits / 5;
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,fromOrd,"	public static GeoHash fromOrd(long ord, int significantBits) {
		int insignificantBits = MAX_BIT_PRECISION - significantBits;
		return fromLongValue(ord << insignificantBits, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,stepsBetween,"	public static long stepsBetween(GeoHash one, GeoHash two) {
		if (one.significantBits() != two.significantBits()) {
			throw new IllegalArgumentException(
					""It is only valid to compare the number of steps between two hashes if they have the same number of significant bits"");
		}
		return two.ord() - one.ord();
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern,",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,significantBits,"	public int significantBits() {
		return significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,longValue,"	public long longValue() {
		return bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,toBase32,"	public String toBase32() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(""Cannot convert a geohash to base32 if the precision is not a multiple of 5."");
		}
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (MAX_BIT_PRECISION - latBits[1]);
		lonBits[0] <<= (MAX_BIT_PRECISION - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (MAX_BIT_PRECISION - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.point = hash.boundingBox.getCenterPoint();
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", Long.toBinaryString(bits), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,toBinaryString,"	public String toBinaryString() {
		StringBuilder bui = new StringBuilder();
		long bitsCopy = bits;
		for (int i = 0; i < significantBits; i++) {
			if ((bitsCopy & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				bui.append('1');
			} else {
				bui.append('0');
			}
			bitsCopy <<= 1;
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,mask,"	private long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (MAX_BIT_PRECISION - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHash.java,compareTo,"	public int compareTo(GeoHash o) {
		int bitsCmp = Long.compare(bits ^ FIRST_BIT_FLAGGED, o.bits ^ FIRST_BIT_FLAGGED);
		if (bitsCmp != 0) {
			return bitsCmp;",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,toBase32ShouldThrowWhenPrecisionIsNotAMultipleOf5,"	public void toBase32ShouldThrowWhenPrecisionIsNotAMultipleOf5() {
		hash.bits = 0x6ff0413000000000l;
		hash.significantBits = 24;
		hash.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			BoundingBox bbox = gh.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,testToAndFromBinaryString,"	public void testToAndFromBinaryString() {
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			String binaryString = gh.toBinaryString();",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertWithin(hash, bbox);
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,assertWithin,"	private void assertWithin(GeoHash hash, GeoHash bbox) {
		assertTrue(hash + "" should be within "" + bbox, hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,itShouldCreateAHashWithMaximumPrecisionOf64Bits,"	public void itShouldCreateAHashWithMaximumPrecisionOf64Bits() {
		GeoHash.withBitPrecision(10.0, 10.0, 64);
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,itShouldThrowWhenTheBitPrecisionIsMoreThan64Bits,"	public void itShouldThrowWhenTheBitPrecisionIsMoreThan64Bits() {
		GeoHash.withBitPrecision(46.0, 8.0, 70);
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,itShouldThrowWhenTheCharacterPrecisionIsTooBig,"	public void itShouldThrowWhenTheCharacterPrecisionIsTooBig() {
		GeoHash.withCharacterPrecision(10.0, 120.0, 14);
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash + "" should NOT be within "" + bbox, hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");

		String geoHashString = GeoHash.geoHashStringWithCharacterPrecision(point.getLatitude(), point.getLongitude(), 12);
		assertEquals(fullStringValue, geoHashString);
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xd000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xc000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);
",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertEquals(start.getBoundingBox(), end.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,testKnownNeighbouringHashes,"	public void testKnownNeighbouringHashes() {
		GeoHash h1 = GeoHash.fromGeohashString(""u1pb"");
		assertEquals(""u0zz"", h1.getSouthernNeighbour().toBase32());
		assertEquals(""u1pc"", h1.getNorthernNeighbour().toBase32());
		assertEquals(""u300"", h1.getEasternNeighbour().toBase32());
		assertEquals(""u302"", h1.getEasternNeighbour().getEasternNeighbour().toBase32());
		assertEquals(""u1p8"", h1.getWesternNeighbour().toBase32());

		assertEquals(""sp2j"", GeoHash.withCharacterPrecision(41.7, 0.08, 4).toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,testKnownAdjacentNeighbours,"	public void testKnownAdjacentNeighbours() {
		String center = ""dqcjqc"";
		String[] adjacent = new String[] { ""dqcjqf"", ""dqcjqb"", ""dqcjr1"", ""dqcjq9"", ""dqcjqd"", ""dqcjr4"", ""dqcjr0"",
				""dqcjq8"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""u1x0dfg"";
		adjacent = new String[] { ""u1x0dg4"", ""u1x0dg5"", ""u1x0dgh"", ""u1x0dfu"", ""u1x0dfs"", ""u1x0dfe"", ""u1x0dfd"",
				""u1x0dff"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""sp2j"";
		adjacent = new String[] { ""ezry"", ""sp2n"", ""sp2q"", ""sp2m"", ""sp2k"", ""sp2h"", ""ezru"", ""ezrv"" };
		assertAdjacentHashesAre(center, adjacent);
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,testThatAdjacentHashesHavePointInitialized,"	public void testThatAdjacentHashesHavePointInitialized() {
		String center = ""dqcjqc"";
		GeoHash geohash = GeoHash.fromGeohashString(center);
		GeoHash[] adjacentHashes = geohash.getAdjacent();
		for (GeoHash adjacentHash : adjacentHashes) {
			assertNotNull(adjacentHash.getBoundingBox());",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,assertAdjacentHashesAre,"	private void assertAdjacentHashesAre(String centerString, String[] adjacentStrings) {
		GeoHash center = GeoHash.fromGeohashString(centerString);
		GeoHash[] adjacent = center.getAdjacent();
		for (String check : adjacentStrings) {
			assertArrayContainsGeoHash(check, adjacent);",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,assertArrayContainsGeoHash,"	private void assertArrayContainsGeoHash(String check, GeoHash[] hashes) {
		boolean found = false;
		for (GeoHash hash : hashes) {
			if (hash.toBase32().equals(check)) {
				found = true;
				break;
			}
		}
		assertTrue(""Array should contain "" + check, found);
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,testNeibouringHashesNearMeridian,"	public void testNeibouringHashesNearMeridian() {
		GeoHash hash = GeoHash.fromGeohashString(""sp2j"");
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(""ezrv"", west.toBase32());
		west = west.getWesternNeighbour();
		assertEquals(""ezrt"", west.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,testSimpleWithin,"	public void testSimpleWithin() {
		GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
		GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
		assertWithin(inside, hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(hash.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,testToLongAndBack,"	public void testToLongAndBack() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		long lv = hash.longValue();
		assertEquals(lv + (1 << (64 - hash.significantBits())), hash.next().longValue());
		GeoHash hashFromLong = GeoHash.fromLongValue(lv, hash.significantBits());
		assertEquals(""dr4jb0bn21"", hashFromLong.toBase32());
		assertEquals(hash, hashFromLong);
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,testNext,"	public void testNext() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 10);
		GeoHash next = hash.next();
		assertTrue(hash.compareTo(next) < 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,testNextPrev,"	public void testNextPrev() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 35);
		GeoHash next = hash.next(2);
		assertTrue(hash.compareTo(next) < 0);
		GeoHash prev1 = next.prev();
		GeoHash prev2 = prev1.next(-1);
		assertTrue(prev1.compareTo(next) < 0);
		System.out.println(""hash: "" + hash.toBase32());
		System.out.println(""next: "" + next.toBase32());
		System.out.println(""prev1: "" + prev1.toBase32());
		System.out.println(""prev2: "" + prev2.toBase32());

		assertTrue(prev2.compareTo(prev1) < 0);
		assertTrue(prev2.compareTo(hash) == 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,testGetCharacterPrecisionThrows,"	public void testGetCharacterPrecisionThrows() throws Exception {
		GeoHash hash = GeoHash.withBitPrecision(37.7, -122.52, 32);
		hash.getCharacterPrecision();
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,testGetCharacterPrecisionWorksWhenPrecisionIsMultipleOfFive,"	public void testGetCharacterPrecisionWorksWhenPrecisionIsMultipleOfFive() throws Exception {
		GeoHash hash = GeoHash.withBitPrecision(37.7, -122.52, 60);
		int precision = hash.getCharacterPrecision();
		assertEquals(precision, 12);
	}",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,testStepsBetween,"	public void testStepsBetween() {
		GeoHash bl = GeoHash.withBitPrecision(37.7, -122.52, 35);
		GeoHash ur = GeoHash.withBitPrecision(37.84, -122.35, 35);

		long steps = GeoHash.stepsBetween(bl, bl);
		assertEquals(steps, 0);

		steps = GeoHash.stepsBetween(bl, bl.next(4));
		assertEquals(steps, 4);

		BoundingBoxGeoHashIterator iter = new BoundingBoxGeoHashIterator(new TwoGeoHashBoundingBox(bl, ur));
		int count = 0;
		while (iter.hasNext()) {
			iter.next();
			count++;
		}
		assertEquals(12875, count);

		int allHashes = 0;
		int inBbox = 1;
		int latMore = 0;
		int lonMore = 0;
		int bothMore = 0;
		int latLess = 0;
		int lonLess = 0;
		int bothLess = 0;
		int latLessLonMore = 0;
		int latMoreLonLess = 0;
		GeoHash idx = bl;
		BoundingBox iterBbox = iter.getBoundingBox().getBoundingBox();
		while (idx.compareTo(ur) < 0) {
			idx = idx.next();
			allHashes++;
			if (iterBbox.contains(idx.getPoint())) {
				inBbox++;
			}
			boolean latIsMore = false;
			boolean latIsLess = false;
			if (idx.getPoint().getLatitude() > iterBbox.getMaxLat()) {
				latIsMore = true;
				latMore++;
			} else if (idx.getPoint().getLatitude() < iterBbox.getMinLat()) {
				latIsLess = true;
				latLess++;
			}
			if (idx.getPoint().getLongitude() > iterBbox.getMaxLon()) {
				lonMore++;
				if (latIsMore) {
					bothMore++;
				}
				if (latIsLess) {
					latLessLonMore++;
				}
			} else if (idx.getPoint().getLongitude() < iterBbox.getMinLon()) {
				lonLess++;
				if (latIsLess) {
					bothLess++;
				}
				if (latIsMore) {
					latMoreLonLess++;
				}
			}
		}

		// Just trying to understand where these GeoHashes are with regard to
		// their bounding box.
		steps = GeoHash.stepsBetween(bl, ur);
		assertEquals(48472, steps);
		assertEquals(steps, allHashes);
		assertEquals(count, inBbox);
		assertEquals(14938, latMore);
		assertEquals(640, lonMore);
		assertEquals(0, bothMore);
		assertEquals(7680, latLess);
		assertEquals(24391, lonLess);
		assertEquals(0, bothLess);
		assertEquals(240, latLessLonMore);
		assertEquals(11811, latMoreLonLess);
		assertEquals(steps, lonLess + latLess + latMore + lonMore + inBbox - latLessLonMore - latMoreLonLess - 1);
",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
90a2570b49e559dbe5f96308ae166bca5b3bf78c,GeoHashTest.java,testCompareTo,"	public void testCompareTo() {
		GeoHash prevHash = null;
		for (int i = 0; i < 10000; i++) {
			GeoHash hash = RandomGeohashes.createWith5BitsPrecision();",https://www.github.com/kungfoo/geohash-java/commit/90a2570b49e559dbe5f96308ae166bca5b3bf78c
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0) {
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		}
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,fromBinaryString,"	public static GeoHash fromBinaryString(String binaryString) {
		GeoHash geohash = new GeoHash();
		for (int i = 0; i < binaryString.length(); i++) {
			if (binaryString.charAt(i) == '1') {
				geohash.addOnBitToEnd();
			} else if (binaryString.charAt(i) == '0') {
				geohash.addOffBitToEnd();
			} else {
				throw new IllegalArgumentException(binaryString + "" is not a valid geohash as a binary string"");
			}
		}
		geohash.bits <<= (64 - geohash.significantBits);
		long[] latitudeBits = geohash.getRightAlignedLatitudeBits();
		long[] longitudeBits = geohash.getRightAlignedLongitudeBits();
		return geohash.recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,fromLongValue,"	public static GeoHash fromLongValue(long hashVal, int significantBits) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		String binaryString = Long.toBinaryString(hashVal);
		while (binaryString.length() < 64) {
			binaryString = ""0"" + binaryString;
		}
		for (int j = 0; j < significantBits; j++) {
			if (isEvenBit) {
				divideRangeDecode(hash, longitudeRange, binaryString.charAt(j) != '0');
			} else {
				divideRangeDecode(hash, latitudeRange, binaryString.charAt(j) != '0');
			}
			isEvenBit = !isEvenBit;
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,geoHashStringWithCharacterPrecision,"	public static String geoHashStringWithCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		GeoHash hash = withCharacterPrecision(latitude, longitude, numberOfCharacters);
		return hash.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(
				latitudeRange[1],",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,next,"	public GeoHash next(int step) {
		return fromOrd(ord() + step, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,next,"	public GeoHash next() {
		return next(1);
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,prev,"	public GeoHash prev() {
		return next(-1);
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,ord,"	public long ord() {
		int insignificantBits = 64 - significantBits;
		long bitMask = (1L << significantBits) - 1;
		return (bits >> insignificantBits) & bitMask;
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,getCharacterPrecision,"	public int getCharacterPrecision() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(
					""precision of GeoHash is not divisble by 5: "" + this);
		}
		return significantBits / 5;
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,fromOrd,"	public static GeoHash fromOrd(long ord, int significantBits) {
		int insignificantBits = 64 - significantBits;
		return fromLongValue(ord << insignificantBits, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,stepsBetween,"	public static long stepsBetween(GeoHash one, GeoHash two) {
		if (one.significantBits() != two.significantBits()) {
			throw new IllegalArgumentException(
					""It is only valid to compare the number of steps between two hashes if they have the same number of significant bits"");
		}
		return two.ord() - one.ord();
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern,",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,significantBits,"	public int significantBits() {
		return significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,longValue,"	public long longValue() {
		return bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,toBase32,"	public String toBase32() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(""Cannot convert a geohash to base32 if the precision is not a multiple of 5."");
		}
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.point = hash.boundingBox.getCenterPoint();
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", Long.toBinaryString(bits), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,toBinaryString,"	public String toBinaryString() {
		StringBuilder bui = new StringBuilder();
		long bitsCopy = bits;
		for (int i = 0; i < significantBits; i++) {
			if ((bitsCopy & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				bui.append('1');
			} else {
				bui.append('0');
			}
			bitsCopy <<= 1;
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,mask,"	private long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHash.java,compareTo,"	public int compareTo(GeoHash o) {
		int bitsCmp = Long.compare(bits ^ FIRST_BIT_FLAGGED, o.bits ^ FIRST_BIT_FLAGGED);
		if (bitsCmp != 0) {
			return bitsCmp;",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,toBase32ShouldThrowWhenPrecisionIsNotAMultipleOf5,"	public void toBase32ShouldThrowWhenPrecisionIsNotAMultipleOf5() {
		hash.bits = 0x6ff0413000000000l;
		hash.significantBits = 24;
		hash.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			BoundingBox bbox = gh.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testToAndFromBinaryString,"	public void testToAndFromBinaryString() {
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			String binaryString = gh.toBinaryString();",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertWithin(hash, bbox);
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,assertWithin,"	private void assertWithin(GeoHash hash, GeoHash bbox) {
		assertTrue(hash + "" should be within "" + bbox, hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash + "" should NOT be within "" + bbox, hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");

		String geoHashString = GeoHash.geoHashStringWithCharacterPrecision(point.getLatitude(), point.getLongitude(), 12);
		assertEquals(fullStringValue, geoHashString);
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xd000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xc000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);
",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertEquals(start.getBoundingBox(), end.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testKnownNeighbouringHashes,"	public void testKnownNeighbouringHashes() {
		GeoHash h1 = GeoHash.fromGeohashString(""u1pb"");
		assertEquals(""u0zz"", h1.getSouthernNeighbour().toBase32());
		assertEquals(""u1pc"", h1.getNorthernNeighbour().toBase32());
		assertEquals(""u300"", h1.getEasternNeighbour().toBase32());
		assertEquals(""u302"", h1.getEasternNeighbour().getEasternNeighbour().toBase32());
		assertEquals(""u1p8"", h1.getWesternNeighbour().toBase32());

		assertEquals(""sp2j"", GeoHash.withCharacterPrecision(41.7, 0.08, 4).toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testKnownAdjacentNeighbours,"	public void testKnownAdjacentNeighbours() {
		String center = ""dqcjqc"";
		String[] adjacent = new String[] { ""dqcjqf"", ""dqcjqb"", ""dqcjr1"", ""dqcjq9"", ""dqcjqd"", ""dqcjr4"", ""dqcjr0"",
				""dqcjq8"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""u1x0dfg"";
		adjacent = new String[] { ""u1x0dg4"", ""u1x0dg5"", ""u1x0dgh"", ""u1x0dfu"", ""u1x0dfs"", ""u1x0dfe"", ""u1x0dfd"",
				""u1x0dff"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""sp2j"";
		adjacent = new String[] { ""ezry"", ""sp2n"", ""sp2q"", ""sp2m"", ""sp2k"", ""sp2h"", ""ezru"", ""ezrv"" };
		assertAdjacentHashesAre(center, adjacent);
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testThatAdjacentHashesHavePointInitialized,"	public void testThatAdjacentHashesHavePointInitialized() {
		String center = ""dqcjqc"";
		GeoHash geohash = GeoHash.fromGeohashString(center);
		GeoHash[] adjacentHashes = geohash.getAdjacent();
		for (GeoHash adjacentHash : adjacentHashes) {
			assertNotNull(adjacentHash.getBoundingBox());",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,assertAdjacentHashesAre,"	private void assertAdjacentHashesAre(String centerString, String[] adjacentStrings) {
		GeoHash center = GeoHash.fromGeohashString(centerString);
		GeoHash[] adjacent = center.getAdjacent();
		for (String check : adjacentStrings) {
			assertArrayContainsGeoHash(check, adjacent);",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,assertArrayContainsGeoHash,"	private void assertArrayContainsGeoHash(String check, GeoHash[] hashes) {
		boolean found = false;
		for (GeoHash hash : hashes) {
			if (hash.toBase32().equals(check)) {
				found = true;
				break;
			}
		}
		assertTrue(""Array should contain "" + check, found);
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testNeibouringHashesNearMeridian,"	public void testNeibouringHashesNearMeridian() {
		GeoHash hash = GeoHash.fromGeohashString(""sp2j"");
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(""ezrv"", west.toBase32());
		west = west.getWesternNeighbour();
		assertEquals(""ezrt"", west.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testSimpleWithin,"	public void testSimpleWithin() {
		GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
		GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
		assertWithin(inside, hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(hash.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testToLongAndBack,"	public void testToLongAndBack() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		long lv = hash.longValue();
		assertEquals(lv + (1 << (64 - hash.significantBits())), hash.next().longValue());
		GeoHash hashFromLong = GeoHash.fromLongValue(lv, hash.significantBits());
		assertEquals(""dr4jb0bn21"", hashFromLong.toBase32());
		assertEquals(hash, hashFromLong);
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testNext,"	public void testNext() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 10);
		GeoHash next = hash.next();
		assertTrue(hash.compareTo(next) < 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testNextPrev,"	public void testNextPrev() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 35);
		GeoHash next = hash.next(2);
		assertTrue(hash.compareTo(next) < 0);
		GeoHash prev1 = next.prev();
		GeoHash prev2 = prev1.next(-1);
		assertTrue(prev1.compareTo(next) < 0);
		System.out.println(""hash: "" + hash.toBase32());
		System.out.println(""next: "" + next.toBase32());
		System.out.println(""prev1: "" + prev1.toBase32());
		System.out.println(""prev2: "" + prev2.toBase32());

		assertTrue(prev2.compareTo(prev1) < 0);
		assertTrue(prev2.compareTo(hash) == 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testGetCharacterPrecisionThrows,"	public void testGetCharacterPrecisionThrows() throws Exception {
		GeoHash hash = GeoHash.withBitPrecision(37.7, -122.52, 32);
		hash.getCharacterPrecision();
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testGetCharacterPrecisionWorksWhenPrecisionIsMultipleOfFive,"	public void testGetCharacterPrecisionWorksWhenPrecisionIsMultipleOfFive() throws Exception {
		GeoHash hash = GeoHash.withBitPrecision(37.7, -122.52, 60);
		int precision = hash.getCharacterPrecision();
		assertEquals(precision, 12);
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testStepsBetween,"	public void testStepsBetween() {
		GeoHash bl = GeoHash.withBitPrecision(37.7, -122.52, 35);
		GeoHash ur = GeoHash.withBitPrecision(37.84, -122.35, 35);

		long steps = GeoHash.stepsBetween(bl, bl);
		assertEquals(steps, 0);

		steps = GeoHash.stepsBetween(bl, bl.next(4));
		assertEquals(steps, 4);

		BoundingBoxGeoHashIterator iter = new BoundingBoxGeoHashIterator(new TwoGeoHashBoundingBox(bl, ur));
		int count = 0;
		while (iter.hasNext()) {
			iter.next();
			count++;
		}
		assertEquals(12875, count);

		int allHashes = 0;
		int inBbox = 1;
		int latMore = 0;
		int lonMore = 0;
		int bothMore = 0;
		int latLess = 0;
		int lonLess = 0;
		int bothLess = 0;
		int latLessLonMore = 0;
		int latMoreLonLess = 0;
		GeoHash idx = bl;
		BoundingBox iterBbox = iter.getBoundingBox().getBoundingBox();
		while (idx.compareTo(ur) < 0) {
			idx = idx.next();
			allHashes++;
			if (iterBbox.contains(idx.getPoint())) {
				inBbox++;
			}
			boolean latIsMore = false;
			boolean latIsLess = false;
			if (idx.getPoint().getLatitude() > iterBbox.getMaxLat()) {
				latIsMore = true;
				latMore++;
			} else if (idx.getPoint().getLatitude() < iterBbox.getMinLat()) {
				latIsLess = true;
				latLess++;
			}
			if (idx.getPoint().getLongitude() > iterBbox.getMaxLon()) {
				lonMore++;
				if (latIsMore) {
					bothMore++;
				}
				if (latIsLess) {
					latLessLonMore++;
				}
			} else if (idx.getPoint().getLongitude() < iterBbox.getMinLon()) {
				lonLess++;
				if (latIsLess) {
					bothLess++;
				}
				if (latIsMore) {
					latMoreLonLess++;
				}
			}
		}

		// Just trying to understand where these GeoHashes are with regard to
		// their bounding box.
		steps = GeoHash.stepsBetween(bl, ur);
		assertEquals(48472, steps);
		assertEquals(steps, allHashes);
		assertEquals(count, inBbox);
		assertEquals(14938, latMore);
		assertEquals(640, lonMore);
		assertEquals(0, bothMore);
		assertEquals(7680, latLess);
		assertEquals(24391, lonLess);
		assertEquals(0, bothLess);
		assertEquals(240, latLessLonMore);
		assertEquals(11811, latMoreLonLess);
		assertEquals(steps, lonLess + latLess + latMore + lonMore + inBbox - latLessLonMore - latMoreLonLess - 1);
",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testCompareTo,"	public void testCompareTo() {
		GeoHash prevHash = null;
		for (int i = 0; i < 10000; i++) {
			GeoHash hash = RandomGeohashes.createWith5BitsPrecision();",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
398d048b66e8cff1e5df8aa1a4bdc4c37ca70070,GeoHashTest.java,testOrdIsPositive,"	public void testOrdIsPositive() {
		double lat = 40.390943;
		double lon = 75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);
		assertEquals(0xcf6915015410500l, hash.ord());
		assertTrue(hash.ord() >= 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/398d048b66e8cff1e5df8aa1a4bdc4c37ca70070
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0) {
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		}
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,fromBinaryString,"	public static GeoHash fromBinaryString(String binaryString) {
		GeoHash geohash = new GeoHash();
		for (int i = 0; i < binaryString.length(); i++) {
			if (binaryString.charAt(i) == '1') {
				geohash.addOnBitToEnd();
			} else if (binaryString.charAt(i) == '0') {
				geohash.addOffBitToEnd();
			} else {
				throw new IllegalArgumentException(binaryString + "" is not a valid geohash as a binary string"");
			}
		}
		geohash.bits <<= (64 - geohash.significantBits);
		long[] latitudeBits = geohash.getRightAlignedLatitudeBits();
		long[] longitudeBits = geohash.getRightAlignedLongitudeBits();
		return geohash.recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,fromLongValue,"	public static GeoHash fromLongValue(long hashVal, int significantBits) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		String binaryString = Long.toBinaryString(hashVal);
		while (binaryString.length() < 64) {
			binaryString = ""0"" + binaryString;
		}
		for (int j = 0; j < significantBits; j++) {
			if (isEvenBit) {
				divideRangeDecode(hash, longitudeRange, binaryString.charAt(j) != '0');
			} else {
				divideRangeDecode(hash, latitudeRange, binaryString.charAt(j) != '0');
			}
			isEvenBit = !isEvenBit;
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (64 - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,geoHashStringWithCharacterPrecision,"	public static String geoHashStringWithCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		GeoHash hash = withCharacterPrecision(latitude, longitude, numberOfCharacters);
		return hash.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(
				latitudeRange[1],",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,next,"	public GeoHash next(int step) {
		return fromOrd(ord() + step, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,next,"	public GeoHash next() {
		return next(1);
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,prev,"	public GeoHash prev() {
		return next(-1);
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,ord,"	public long ord() {
		int insignificantBits = 64 - significantBits;
		return bits >>> insignificantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,getCharacterPrecision,"	public int getCharacterPrecision() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(
					""precision of GeoHash is not divisble by 5: "" + this);
		}
		return significantBits / 5;
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,fromOrd,"	public static GeoHash fromOrd(long ord, int significantBits) {
		int insignificantBits = 64 - significantBits;
		return fromLongValue(ord << insignificantBits, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,stepsBetween,"	public static long stepsBetween(GeoHash one, GeoHash two) {
		if (one.significantBits() != two.significantBits()) {
			throw new IllegalArgumentException(
					""It is only valid to compare the number of steps between two hashes if they have the same number of significant bits"");
		}
		return two.ord() - one.ord();
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern,",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,significantBits,"	public int significantBits() {
		return significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,longValue,"	public long longValue() {
		return bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,toBase32,"	public String toBase32() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(""Cannot convert a geohash to base32 if the precision is not a multiple of 5."");
		}
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (64 - latBits[1]);
		lonBits[0] <<= (64 - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (64 - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.point = hash.boundingBox.getCenterPoint();
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", Long.toBinaryString(bits), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,toBinaryString,"	public String toBinaryString() {
		StringBuilder bui = new StringBuilder();
		long bitsCopy = bits;
		for (int i = 0; i < significantBits; i++) {
			if ((bitsCopy & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				bui.append('1');
			} else {
				bui.append('0');
			}
			bitsCopy <<= 1;
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,mask,"	private long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (64 - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHash.java,compareTo,"	public int compareTo(GeoHash o) {
		int bitsCmp = Long.compare(bits ^ FIRST_BIT_FLAGGED, o.bits ^ FIRST_BIT_FLAGGED);
		if (bitsCmp != 0) {
			return bitsCmp;",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,toBase32ShouldThrowWhenPrecisionIsNotAMultipleOf5,"	public void toBase32ShouldThrowWhenPrecisionIsNotAMultipleOf5() {
		hash.bits = 0x6ff0413000000000l;
		hash.significantBits = 24;
		hash.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			BoundingBox bbox = gh.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testToAndFromBinaryString,"	public void testToAndFromBinaryString() {
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			String binaryString = gh.toBinaryString();",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertWithin(hash, bbox);
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,assertWithin,"	private void assertWithin(GeoHash hash, GeoHash bbox) {
		assertTrue(hash + "" should be within "" + bbox, hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash + "" should NOT be within "" + bbox, hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");

		String geoHashString = GeoHash.geoHashStringWithCharacterPrecision(point.getLatitude(), point.getLongitude(), 12);
		assertEquals(fullStringValue, geoHashString);
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xd000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xc000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);
",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertEquals(start.getBoundingBox(), end.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testKnownNeighbouringHashes,"	public void testKnownNeighbouringHashes() {
		GeoHash h1 = GeoHash.fromGeohashString(""u1pb"");
		assertEquals(""u0zz"", h1.getSouthernNeighbour().toBase32());
		assertEquals(""u1pc"", h1.getNorthernNeighbour().toBase32());
		assertEquals(""u300"", h1.getEasternNeighbour().toBase32());
		assertEquals(""u302"", h1.getEasternNeighbour().getEasternNeighbour().toBase32());
		assertEquals(""u1p8"", h1.getWesternNeighbour().toBase32());

		assertEquals(""sp2j"", GeoHash.withCharacterPrecision(41.7, 0.08, 4).toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testKnownAdjacentNeighbours,"	public void testKnownAdjacentNeighbours() {
		String center = ""dqcjqc"";
		String[] adjacent = new String[] { ""dqcjqf"", ""dqcjqb"", ""dqcjr1"", ""dqcjq9"", ""dqcjqd"", ""dqcjr4"", ""dqcjr0"",
				""dqcjq8"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""u1x0dfg"";
		adjacent = new String[] { ""u1x0dg4"", ""u1x0dg5"", ""u1x0dgh"", ""u1x0dfu"", ""u1x0dfs"", ""u1x0dfe"", ""u1x0dfd"",
				""u1x0dff"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""sp2j"";
		adjacent = new String[] { ""ezry"", ""sp2n"", ""sp2q"", ""sp2m"", ""sp2k"", ""sp2h"", ""ezru"", ""ezrv"" };
		assertAdjacentHashesAre(center, adjacent);
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testThatAdjacentHashesHavePointInitialized,"	public void testThatAdjacentHashesHavePointInitialized() {
		String center = ""dqcjqc"";
		GeoHash geohash = GeoHash.fromGeohashString(center);
		GeoHash[] adjacentHashes = geohash.getAdjacent();
		for (GeoHash adjacentHash : adjacentHashes) {
			assertNotNull(adjacentHash.getBoundingBox());",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,assertAdjacentHashesAre,"	private void assertAdjacentHashesAre(String centerString, String[] adjacentStrings) {
		GeoHash center = GeoHash.fromGeohashString(centerString);
		GeoHash[] adjacent = center.getAdjacent();
		for (String check : adjacentStrings) {
			assertArrayContainsGeoHash(check, adjacent);",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,assertArrayContainsGeoHash,"	private void assertArrayContainsGeoHash(String check, GeoHash[] hashes) {
		boolean found = false;
		for (GeoHash hash : hashes) {
			if (hash.toBase32().equals(check)) {
				found = true;
				break;
			}
		}
		assertTrue(""Array should contain "" + check, found);
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testNeibouringHashesNearMeridian,"	public void testNeibouringHashesNearMeridian() {
		GeoHash hash = GeoHash.fromGeohashString(""sp2j"");
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(""ezrv"", west.toBase32());
		west = west.getWesternNeighbour();
		assertEquals(""ezrt"", west.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testSimpleWithin,"	public void testSimpleWithin() {
		GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
		GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
		assertWithin(inside, hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(hash.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testToLongAndBack,"	public void testToLongAndBack() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		long lv = hash.longValue();
		assertEquals(lv + (1 << (64 - hash.significantBits())), hash.next().longValue());
		GeoHash hashFromLong = GeoHash.fromLongValue(lv, hash.significantBits());
		assertEquals(""dr4jb0bn21"", hashFromLong.toBase32());
		assertEquals(hash, hashFromLong);
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testNext,"	public void testNext() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 10);
		GeoHash next = hash.next();
		assertTrue(hash.compareTo(next) < 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testNextPrev,"	public void testNextPrev() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 35);
		GeoHash next = hash.next(2);
		assertTrue(hash.compareTo(next) < 0);
		GeoHash prev1 = next.prev();
		GeoHash prev2 = prev1.next(-1);
		assertTrue(prev1.compareTo(next) < 0);
		System.out.println(""hash: "" + hash.toBase32());
		System.out.println(""next: "" + next.toBase32());
		System.out.println(""prev1: "" + prev1.toBase32());
		System.out.println(""prev2: "" + prev2.toBase32());

		assertTrue(prev2.compareTo(prev1) < 0);
		assertTrue(prev2.compareTo(hash) == 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testGetCharacterPrecisionThrows,"	public void testGetCharacterPrecisionThrows() throws Exception {
		GeoHash hash = GeoHash.withBitPrecision(37.7, -122.52, 32);
		hash.getCharacterPrecision();
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testGetCharacterPrecisionWorksWhenPrecisionIsMultipleOfFive,"	public void testGetCharacterPrecisionWorksWhenPrecisionIsMultipleOfFive() throws Exception {
		GeoHash hash = GeoHash.withBitPrecision(37.7, -122.52, 60);
		int precision = hash.getCharacterPrecision();
		assertEquals(precision, 12);
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testStepsBetween,"	public void testStepsBetween() {
		GeoHash bl = GeoHash.withBitPrecision(37.7, -122.52, 35);
		GeoHash ur = GeoHash.withBitPrecision(37.84, -122.35, 35);

		long steps = GeoHash.stepsBetween(bl, bl);
		assertEquals(steps, 0);

		steps = GeoHash.stepsBetween(bl, bl.next(4));
		assertEquals(steps, 4);

		BoundingBoxGeoHashIterator iter = new BoundingBoxGeoHashIterator(new TwoGeoHashBoundingBox(bl, ur));
		int count = 0;
		while (iter.hasNext()) {
			iter.next();
			count++;
		}
		assertEquals(12875, count);

		int allHashes = 0;
		int inBbox = 1;
		int latMore = 0;
		int lonMore = 0;
		int bothMore = 0;
		int latLess = 0;
		int lonLess = 0;
		int bothLess = 0;
		int latLessLonMore = 0;
		int latMoreLonLess = 0;
		GeoHash idx = bl;
		BoundingBox iterBbox = iter.getBoundingBox().getBoundingBox();
		while (idx.compareTo(ur) < 0) {
			idx = idx.next();
			allHashes++;
			if (iterBbox.contains(idx.getPoint())) {
				inBbox++;
			}
			boolean latIsMore = false;
			boolean latIsLess = false;
			if (idx.getPoint().getLatitude() > iterBbox.getMaxLat()) {
				latIsMore = true;
				latMore++;
			} else if (idx.getPoint().getLatitude() < iterBbox.getMinLat()) {
				latIsLess = true;
				latLess++;
			}
			if (idx.getPoint().getLongitude() > iterBbox.getMaxLon()) {
				lonMore++;
				if (latIsMore) {
					bothMore++;
				}
				if (latIsLess) {
					latLessLonMore++;
				}
			} else if (idx.getPoint().getLongitude() < iterBbox.getMinLon()) {
				lonLess++;
				if (latIsLess) {
					bothLess++;
				}
				if (latIsMore) {
					latMoreLonLess++;
				}
			}
		}

		// Just trying to understand where these GeoHashes are with regard to
		// their bounding box.
		steps = GeoHash.stepsBetween(bl, ur);
		assertEquals(48472, steps);
		assertEquals(steps, allHashes);
		assertEquals(count, inBbox);
		assertEquals(14938, latMore);
		assertEquals(640, lonMore);
		assertEquals(0, bothMore);
		assertEquals(7680, latLess);
		assertEquals(24391, lonLess);
		assertEquals(0, bothLess);
		assertEquals(240, latLessLonMore);
		assertEquals(11811, latMoreLonLess);
		assertEquals(steps, lonLess + latLess + latMore + lonMore + inBbox - latLessLonMore - latMoreLonLess - 1);
",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testCompareTo,"	public void testCompareTo() {
		GeoHash prevHash = null;
		for (int i = 0; i < 10000; i++) {
			GeoHash hash = RandomGeohashes.createWith5BitsPrecision();",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testOrdIsPositive,"	public void testOrdIsPositive() {
		double lat = 40.390943;
		double lon = 75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);
		assertEquals(0xcf6915015410500l, hash.ord());
		assertTrue(hash.ord() >= 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
21ff41630c9dbd40e4674604d8e502b3c58937f1,GeoHashTest.java,testSecondCaseWhereOrdMustBePositive,"	public void testSecondCaseWhereOrdMustBePositive() {
		GeoHash hash = GeoHash.withCharacterPrecision(-36.919550434870125,174.71024582237604,7);
		assertTrue(hash.ord() > 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/21ff41630c9dbd40e4674604d8e502b3c58937f1
e28696d15e435d8e0a11f339ea4f9caa42488dc7,VincentyGeodesy.java,moveInDirection,"	public static WGS84Point moveInDirection(WGS84Point point, double bearingInDegrees, double distanceInMeters) {

		if (bearingInDegrees < 0 || bearingInDegrees > 360) {
			throw new IllegalArgumentException(""direction must be in (0,360)"");
		}

		double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; // WGS-84
		// ellipsiod
		double alpha1 = bearingInDegrees * degToRad;
		double sinAlpha1 = Math.sin(alpha1), cosAlpha1 = Math.cos(alpha1);

		double tanU1 = (1 - f) * Math.tan(point.getLatitude() * degToRad);
		double cosU1 = 1 / Math.sqrt((1 + tanU1 * tanU1)), sinU1 = tanU1 * cosU1;
		double sigma1 = Math.atan2(tanU1, cosAlpha1);
		double sinAlpha = cosU1 * sinAlpha1;
		double cosSqAlpha = 1 - sinAlpha * sinAlpha;
		double uSq = cosSqAlpha * (a * a - b * b) / (b * b);
		double A = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));
		double B = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));

		double sinSigma = 0, cosSigma = 0, cos2SigmaM = 0;
		double sigma = distanceInMeters / (b * A), sigmaP = 2 * Math.PI;
		while (Math.abs(sigma - sigmaP) > 1e-12) {
			cos2SigmaM = Math.cos(2 * sigma1 + sigma);
			sinSigma = Math.sin(sigma);
			cosSigma = Math.cos(sigma);
			double deltaSigma = B
					* sinSigma
					* (cos2SigmaM + B
							/ 4
							* (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM
									* (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));
			sigmaP = sigma;
			sigma = distanceInMeters / (b * A) + deltaSigma;
		}

		double tmp = sinU1 * sinSigma - cosU1 * cosSigma * cosAlpha1;
		double lat2 = Math.atan2(sinU1 * cosSigma + cosU1 * sinSigma * cosAlpha1, (1 - f)
				* Math.sqrt(sinAlpha * sinAlpha + tmp * tmp));
		double lambda = Math.atan2(sinSigma * sinAlpha1, cosU1 * cosSigma - sinU1 * sinSigma * cosAlpha1);
		double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
		double L = lambda - (1 - C) * f * sinAlpha
				* (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));

		double newLat = lat2 / degToRad;
		double newLon = point.getLongitude() + L / degToRad;

		newLon = (newLon > 180.0 ? 360.0 - newLon : newLon);
		newLon = (newLon < -180.0 ? 360.0 + newLon : newLon);

		return new WGS84Point(newLat, newLon);
	}",https://www.github.com/kungfoo/geohash-java/commit/e28696d15e435d8e0a11f339ea4f9caa42488dc7
e28696d15e435d8e0a11f339ea4f9caa42488dc7,VincentyGeodesy.java,distanceInMeters,"	public static double distanceInMeters(WGS84Point foo, WGS84Point bar) {
		double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; // WGS-84
		// ellipsiod
		double L = (bar.getLongitude() - foo.getLongitude()) * degToRad;
		double U1 = Math.atan((1 - f) * Math.tan(foo.getLatitude() * degToRad));
		double U2 = Math.atan((1 - f) * Math.tan(bar.getLatitude() * degToRad));
		double sinU1 = Math.sin(U1), cosU1 = Math.cos(U1);
		double sinU2 = Math.sin(U2), cosU2 = Math.cos(U2);

		double cosSqAlpha, sinSigma, cos2SigmaM, cosSigma, sigma;

		double lambda = L, lambdaP, iterLimit = 20;
		do {
			double sinLambda = Math.sin(lambda), cosLambda = Math.cos(lambda);
			sinSigma = Math.sqrt((cosU2 * sinLambda) * (cosU2 * sinLambda)
					+ (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda) * (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda));
			if (sinSigma == 0) {
				return 0; // co-incident points
			}
			cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda;
			sigma = Math.atan2(sinSigma, cosSigma);
			double sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma;
			cosSqAlpha = 1 - sinAlpha * sinAlpha;
			cos2SigmaM = cosSigma - 2 * sinU1 * sinU2 / cosSqAlpha;
			if (Double.isNaN(cos2SigmaM)) {
				cos2SigmaM = 0; // equatorial line: cosSqAlpha=0
			}
			double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
			lambdaP = lambda;
			lambda = L + (1 - C) * f * sinAlpha
					* (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));
		} while (Math.abs(lambda - lambdaP) > EPSILON && --iterLimit > 0);

		if (iterLimit == 0) {
			return Double.NaN;
		}
		double uSquared = cosSqAlpha * (a * a - b * b) / (b * b);
		double A = 1 + uSquared / 16384 * (4096 + uSquared * (-768 + uSquared * (320 - 175 * uSquared)));
		double B = uSquared / 1024 * (256 + uSquared * (-128 + uSquared * (74 - 47 * uSquared)));
		double deltaSigma = B
				* sinSigma
				* (cos2SigmaM + B
						/ 4
						* (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM
								* (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));
		double s = b * A * (sigma - deltaSigma);

		return s;
	}",https://www.github.com/kungfoo/geohash-java/commit/e28696d15e435d8e0a11f339ea4f9caa42488dc7
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashDecodingBenchmark.java,setup,"	public void setup(){
		randomHashes = new String[NUMBER_OF_HASHES];
		Random rand = new Random();
		for(int i = 0; i < NUMBER_OF_HASHES; i++){
			// at least two chars",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashDecodingBenchmark.java,benchmarkRandomDecoding,"	public void benchmarkRandomDecoding(){
		for(String hash : randomHashes){
			GeoHash geoHash = GeoHash.fromGeohashString(hash);",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashEncodingBenchmark.java,setupBenchmark,"	public void setupBenchmark() {
		hashes = new GeoHash[NUMBER_OF_HASHES];
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashEncodingBenchmark.java,benchmarkGeoHashEncoding,"	public void benchmarkGeoHashEncoding() {
		for (int i = 0; i < NUMBER_OF_HASHES; i++) {
			hashes[i] = RandomGeohashes.createWithPrecision(60);",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,BoundingBox.java,getUpperLeft,"	public WGS84Point getUpperLeft() {
		return new WGS84Point(maxLat, minLon);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,BoundingBox.java,getLowerRight,"	public WGS84Point getLowerRight() {
		return new WGS84Point(minLat, maxLon);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,BoundingBox.java,getLatitudeSize,"	public double getLatitudeSize() {
		return maxLat - minLat;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,BoundingBox.java,getLongitudeSize,"	public double getLongitudeSize() {
		return maxLon - minLon;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,BoundingBox.java,equals,"	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj instanceof BoundingBox) {
			BoundingBox that = (BoundingBox) obj;",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,BoundingBox.java,hashCode,"	public int hashCode() {
		int result = 17;
		result = 37 * result + hashCode(minLat);
		result = 37 * result + hashCode(maxLat);
		result = 37 * result + hashCode(minLon);
		result = 37 * result + hashCode(maxLon);
		return result;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,BoundingBox.java,hashCode,"	private static int hashCode(double x) {
		long f = Double.doubleToLongBits(x);
		return (int) (f ^ (f >>> 32));
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,BoundingBox.java,contains,"	public boolean contains(WGS84Point point) {
		return (point.getLatitude() >= minLat) && (point.getLongitude() >= minLon) && (point.getLatitude() <= maxLat)
				&& (point.getLongitude() <= maxLon);",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,BoundingBox.java,intersects,"	public boolean intersects(BoundingBox other) {
		return !(other.minLon > maxLon || other.maxLon < minLon || other.minLat > maxLat || other.maxLat < minLat);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,BoundingBox.java,toString,"	public String toString() {
		return getUpperLeft() + "" -> "" + getLowerRight();
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,BoundingBox.java,getCenterPoint,"	public WGS84Point getCenterPoint() {
		double centerLatitude = (minLat + maxLat) / 2;
		double centerLongitude = (minLon + maxLon) / 2;
		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,BoundingBox.java,expandToInclude,"	public void expandToInclude(BoundingBox other) {
		if (other.minLon < minLon) {
			minLon = other.minLon;
		}
		if (other.maxLon > maxLon) {
			maxLon = other.maxLon;
		}
		if (other.minLat < minLat) {
			minLat = other.minLat;
		}
		if (other.maxLat > maxLat) {
			maxLat = other.maxLat;",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,BoundingBox.java,getMinLon,"	public double getMinLon() {
		return minLon;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,BoundingBox.java,getMinLat,"	public double getMinLat() {
		return minLat;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,BoundingBox.java,getMaxLat,"	public double getMaxLat() {
		return maxLat;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,BoundingBox.java,getMaxLon,"	public double getMaxLon() {
		return maxLon;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		if (numberOfCharacters > MAX_CHARACTER_PRECISION) {
			throw new IllegalArgumentException(""A geohash can only be "" + MAX_CHARACTER_PRECISION + "" character long."");
		}
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (numberOfBits > MAX_BIT_PRECISION) {
			throw new IllegalArgumentException(""A Geohash can only be "" + MAX_BIT_PRECISION + "" bits long!"");
		}
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0) {
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		}
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,fromBinaryString,"	public static GeoHash fromBinaryString(String binaryString) {
		GeoHash geohash = new GeoHash();
		for (int i = 0; i < binaryString.length(); i++) {
			if (binaryString.charAt(i) == '1') {
				geohash.addOnBitToEnd();
			} else if (binaryString.charAt(i) == '0') {
				geohash.addOffBitToEnd();
			} else {
				throw new IllegalArgumentException(binaryString + "" is not a valid geohash as a binary string"");
			}
		}
		geohash.bits <<= (MAX_BIT_PRECISION - geohash.significantBits);
		long[] latitudeBits = geohash.getRightAlignedLatitudeBits();
		long[] longitudeBits = geohash.getRightAlignedLongitudeBits();
		return geohash.recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (MAX_BIT_PRECISION - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,fromLongValue,"	public static GeoHash fromLongValue(long hashVal, int significantBits) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		String binaryString = Long.toBinaryString(hashVal);
		while (binaryString.length() < MAX_BIT_PRECISION) {
			binaryString = ""0"" + binaryString;
		}
		for (int j = 0; j < significantBits; j++) {
			if (isEvenBit) {
				divideRangeDecode(hash, longitudeRange, binaryString.charAt(j) != '0');
			} else {
				divideRangeDecode(hash, latitudeRange, binaryString.charAt(j) != '0');
			}
			isEvenBit = !isEvenBit;
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (MAX_BIT_PRECISION - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,geoHashStringWithCharacterPrecision,"	public static String geoHashStringWithCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		GeoHash hash = withCharacterPrecision(latitude, longitude, numberOfCharacters);
		return hash.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(new WGS84Point(latitudeRange[0], longitudeRange[0]), new WGS84Point(
				latitudeRange[1],",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,next,"	public GeoHash next(int step) {
		return fromOrd(ord() + step, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,next,"	public GeoHash next() {
		return next(1);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,prev,"	public GeoHash prev() {
		return next(-1);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,ord,"	public long ord() {
		int insignificantBits = MAX_BIT_PRECISION - significantBits;
		return bits >>> insignificantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,getCharacterPrecision,"	public int getCharacterPrecision() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(
					""precision of GeoHash is not divisble by 5: "" + this);
		}
		return significantBits / 5;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,fromOrd,"	public static GeoHash fromOrd(long ord, int significantBits) {
		int insignificantBits = MAX_BIT_PRECISION - significantBits;
		return fromLongValue(ord << insignificantBits, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,stepsBetween,"	public static long stepsBetween(GeoHash one, GeoHash two) {
		if (one.significantBits() != two.significantBits()) {
			throw new IllegalArgumentException(
					""It is only valid to compare the number of steps between two hashes if they have the same number of significant bits"");
		}
		return two.ord() - one.ord();
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern,",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,significantBits,"	public int significantBits() {
		return significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,longValue,"	public long longValue() {
		return bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,toBase32,"	public String toBase32() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(""Cannot convert a geohash to base32 if the precision is not a multiple of 5."");
		}
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (MAX_BIT_PRECISION - latBits[1]);
		lonBits[0] <<= (MAX_BIT_PRECISION - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (MAX_BIT_PRECISION - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.point = hash.boundingBox.getCenterPoint();
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", Long.toBinaryString(bits), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,toBinaryString,"	public String toBinaryString() {
		StringBuilder bui = new StringBuilder();
		long bitsCopy = bits;
		for (int i = 0; i < significantBits; i++) {
			if ((bitsCopy & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				bui.append('1');
			} else {
				bui.append('0');
			}
			bitsCopy <<= 1;
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,mask,"	private long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (MAX_BIT_PRECISION - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHash.java,compareTo,"	public int compareTo(GeoHash o) {
		int bitsCmp = Long.compare(bits ^ FIRST_BIT_FLAGGED, o.bits ^ FIRST_BIT_FLAGGED);
		if (bitsCmp != 0) {
			return bitsCmp;",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,WGS84Point.java,getLatitude,"	public double getLatitude() {
		return latitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,WGS84Point.java,getLongitude,"	public double getLongitude() {
		return longitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,WGS84Point.java,toString,"	public String toString() {
		return String.format(""("" + latitude + "","" + longitude + "")"");
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,WGS84Point.java,equals,"	public boolean equals(Object obj) {
		if (obj instanceof WGS84Point) {
			WGS84Point other = (WGS84Point) obj;
			return latitude == other.latitude && longitude == other.longitude;
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,WGS84Point.java,hashCode,"	public int hashCode() {
		int result = 42;
		long latBits = Double.doubleToLongBits(latitude);
		long lonBits = Double.doubleToLongBits(longitude);
		result = 31 * result + (int) (latBits ^ (latBits >>> 32));
		result = 31 * result + (int) (lonBits ^ (lonBits >>> 32));
		return result;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashBoundingBoxQuery.java,addSearchHash,"	private void addSearchHash(GeoHash hash) {
		if (boundingBox == null) {
			boundingBox = new BoundingBox(hash.getBoundingBox());
		} else {
			boundingBox.expandToInclude(hash.getBoundingBox());
		}
		searchHashes.add(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashBoundingBoxQuery.java,expandSearch,"	private void expandSearch(GeoHash centerHash, BoundingBox bbox) {
		addSearchHash(centerHash);

		for (GeoHash adjacent : centerHash.getAdjacent()) {
			BoundingBox adjacentBox = adjacent.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashBoundingBoxQuery.java,hashFits,"	private boolean hashFits(GeoHash hash, BoundingBox bbox) {
		return hash.contains(bbox.getUpperLeft()) && hash.contains(bbox.getLowerRight());
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashBoundingBoxQuery.java,contains,"	public boolean contains(GeoHash hash) {
		for (GeoHash searchHash : searchHashes) {
			if (hash.within(searchHash)) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashBoundingBoxQuery.java,contains,"	public boolean contains(WGS84Point point) {
		return contains(GeoHash.withBitPrecision(point.getLatitude(), point.getLongitude(), 64));
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashBoundingBoxQuery.java,getSearchHashes,"	public List<GeoHash> getSearchHashes() {
		return searchHashes;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashBoundingBoxQuery.java,toString,"	public String toString() {
		StringBuilder bui = new StringBuilder();
		for (GeoHash hash : searchHashes) {
			bui.append(hash).append(""\n"");
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashBoundingBoxQuery.java,getWktBox,"	public String getWktBox() {
		return ""BOX("" + boundingBox.getMinLon() + "" "" + boundingBox.getMinLat() + "","" + boundingBox.getMaxLon() + "" ""
				+ boundingBox.getMaxLat() + "")"";",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashCircleQuery.java,contains,"	public boolean contains(GeoHash hash) {
		return query.contains(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashCircleQuery.java,getWktBox,"	public String getWktBox() {
		return query.getWktBox();
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashCircleQuery.java,getSearchHashes,"	public List<GeoHash> getSearchHashes() {
		return query.getSearchHashes();
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashCircleQuery.java,toString,"	public String toString() {
		return ""Cicle Query [center="" + center + "", radius="" + getRadiusString() + ""]"";
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashCircleQuery.java,getRadiusString,"	private String getRadiusString() {
		if (radius > 1000) {
			return radius / 1000 + ""km"";",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashCircleQuery.java,contains,"	public boolean contains(WGS84Point point) {
		return query.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashSizeTable.java,dLat,"	protected static final double dLat(int bits) {
		return 180d / Math.pow(2, bits / 2);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashSizeTable.java,dLon,"	protected static final double dLon(int bits) {
		return 360d / Math.pow(2, (bits + 1) / 2);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashSizeTable.java,numberOfBitsForOverlappingGeoHash,"	public static final int numberOfBitsForOverlappingGeoHash(BoundingBox boundingBox) {
		int bits = 63;
		double height = boundingBox.getLatitudeSize();
		double width = boundingBox.getLongitudeSize();
		while ((dLat[bits] < height || dLon[bits] < width) && bits > 0) {
			bits--;
		}
		return bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,VincentyGeodesy.java,moveInDirection,"	public static WGS84Point moveInDirection(WGS84Point point, double bearingInDegrees, double distanceInMeters) {

		if (bearingInDegrees < 0 || bearingInDegrees > 360) {
			throw new IllegalArgumentException(""direction must be in (0,360)"");
		}

		double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; // WGS-84
		// ellipsiod
		double alpha1 = bearingInDegrees * degToRad;
		double sinAlpha1 = Math.sin(alpha1), cosAlpha1 = Math.cos(alpha1);

		double tanU1 = (1 - f) * Math.tan(point.getLatitude() * degToRad);
		double cosU1 = 1 / Math.sqrt((1 + tanU1 * tanU1)), sinU1 = tanU1 * cosU1;
		double sigma1 = Math.atan2(tanU1, cosAlpha1);
		double sinAlpha = cosU1 * sinAlpha1;
		double cosSqAlpha = 1 - sinAlpha * sinAlpha;
		double uSq = cosSqAlpha * (a * a - b * b) / (b * b);
		double A = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));
		double B = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));

		double sinSigma = 0, cosSigma = 0, cos2SigmaM = 0;
		double sigma = distanceInMeters / (b * A), sigmaP = 2 * Math.PI;
		while (Math.abs(sigma - sigmaP) > 1e-12) {
			cos2SigmaM = Math.cos(2 * sigma1 + sigma);
			sinSigma = Math.sin(sigma);
			cosSigma = Math.cos(sigma);
			double deltaSigma = B
					* sinSigma
					* (cos2SigmaM + B
							/ 4
							* (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM
									* (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));
			sigmaP = sigma;
			sigma = distanceInMeters / (b * A) + deltaSigma;
		}

		double tmp = sinU1 * sinSigma - cosU1 * cosSigma * cosAlpha1;
		double lat2 = Math.atan2(sinU1 * cosSigma + cosU1 * sinSigma * cosAlpha1, (1 - f)
				* Math.sqrt(sinAlpha * sinAlpha + tmp * tmp));
		double lambda = Math.atan2(sinSigma * sinAlpha1, cosU1 * cosSigma - sinU1 * sinSigma * cosAlpha1);
		double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
		double L = lambda - (1 - C) * f * sinAlpha
				* (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));

		double newLat = lat2 / degToRad;
		double newLon = point.getLongitude() + L / degToRad;

		newLon = (newLon > 180.0 ? 360.0 - newLon : newLon);
		newLon = (newLon < -180.0 ? 360.0 + newLon : newLon);

		return new WGS84Point(newLat, newLon);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,VincentyGeodesy.java,distanceInMeters,"	public static double distanceInMeters(WGS84Point foo, WGS84Point bar) {
		double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; // WGS-84
		// ellipsiod
		double L = (bar.getLongitude() - foo.getLongitude()) * degToRad;
		double U1 = Math.atan((1 - f) * Math.tan(foo.getLatitude() * degToRad));
		double U2 = Math.atan((1 - f) * Math.tan(bar.getLatitude() * degToRad));
		double sinU1 = Math.sin(U1), cosU1 = Math.cos(U1);
		double sinU2 = Math.sin(U2), cosU2 = Math.cos(U2);

		double cosSqAlpha, sinSigma, cos2SigmaM, cosSigma, sigma;

		double lambda = L, lambdaP, iterLimit = 20;
		do {
			double sinLambda = Math.sin(lambda), cosLambda = Math.cos(lambda);
			sinSigma = Math.sqrt((cosU2 * sinLambda) * (cosU2 * sinLambda)
					+ (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda) * (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda));
			if (sinSigma == 0) {
				return 0; // co-incident points
			}
			cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda;
			sigma = Math.atan2(sinSigma, cosSigma);
			double sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma;
			cosSqAlpha = 1 - sinAlpha * sinAlpha;
			cos2SigmaM = cosSigma - 2 * sinU1 * sinU2 / cosSqAlpha;
			if (Double.isNaN(cos2SigmaM)) {
				cos2SigmaM = 0; // equatorial line: cosSqAlpha=0
			}
			double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
			lambdaP = lambda;
			lambda = L + (1 - C) * f * sinAlpha
					* (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));
		} while (Math.abs(lambda - lambdaP) > EPSILON && --iterLimit > 0);

		if (iterLimit == 0) {
			return Double.NaN;
		}
		double uSquared = cosSqAlpha * (a * a - b * b) / (b * b);
		double A = 1 + uSquared / 16384 * (4096 + uSquared * (-768 + uSquared * (320 - 175 * uSquared)));
		double B = uSquared / 1024 * (256 + uSquared * (-128 + uSquared * (74 - 47 * uSquared)));
		double deltaSigma = B
				* sinSigma
				* (cos2SigmaM + B
						/ 4
						* (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM
								* (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));
		double s = b * A * (sigma - deltaSigma);

		return s;
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,BoundingBoxTest.java,setUp,"	public void setUp() {
		a = new BoundingBox(new WGS84Point(30, 20), new WGS84Point(21, 31));
		b = new BoundingBox(a);
		c = new BoundingBox(new WGS84Point(45, -170), new WGS84Point(-45, 170));
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,BoundingBoxTest.java,testHashCode,"	public void testHashCode() {
		assertEquals(a.hashCode(), b.hashCode());
		assertFalse(a.hashCode() == c.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,BoundingBoxTest.java,testEqualsObject,"	public void testEqualsObject() {
		assertEquals(a, b);
		assertEquals(b, a);
		assertFalse(a.equals(c));
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,BoundingBoxTest.java,testContains,"	public void testContains() {
		BoundingBox bbox = new BoundingBox(45, 46, 121, 120);
		assertContains(bbox, new WGS84Point(45.5, 120.5));
		assertNotContains(bbox, new WGS84Point(90, 90));
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,BoundingBoxTest.java,testSize,"	public void testSize() {
		BoundingBox bbox = new BoundingBox(45, 90, 0, 30);
		assertHeightIs(bbox, 45);
		assertWidthIs(bbox, 30);
		bbox = new BoundingBox(-45, 45, -22.5, 30);
		assertHeightIs(bbox, 90);
		assertWidthIs(bbox, 52.5);
		bbox = new BoundingBox(-44, -46.1, -127.2, -128);
		assertHeightIs(bbox, 2.1);
		assertWidthIs(bbox, 0.8);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,BoundingBoxTest.java,assertWidthIs,"	private void assertWidthIs(BoundingBox bbox, double width) {
		assertEquals(width, bbox.getLongitudeSize(), DELTA);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,BoundingBoxTest.java,assertHeightIs,"	private void assertHeightIs(BoundingBox bbox, double height) {
		assertEquals(height, bbox.getLatitudeSize(), DELTA);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,BoundingBoxTest.java,testIntersects,"	public void testIntersects() {
		BoundingBox bbox = new BoundingBox(10, -10, 41, 40);
		assertIntersects(bbox, new BoundingBox(5, -15, 40.5, 43));
		assertDoesNotIntersect(bbox, new BoundingBox(5, -15, 42, 43));
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,BoundingBoxTest.java,assertDoesNotIntersect,"	private void assertDoesNotIntersect(BoundingBox bbox, BoundingBox boundingBox) {
		assertFalse(bbox + "" should NOT intersect "" + boundingBox, bbox.intersects(boundingBox));
		assertFalse(boundingBox + "" should NOT intersect "" + bbox, boundingBox.intersects(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,BoundingBoxTest.java,assertIntersects,"	private void assertIntersects(BoundingBox bbox, BoundingBox boundingBox) {
		assertTrue(bbox + "" should intersect "" + boundingBox, bbox.intersects(boundingBox));
		assertTrue(boundingBox + "" should intersect "" + bbox, boundingBox.intersects(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,BoundingBoxTest.java,assertContains,"	private void assertContains(BoundingBox box, WGS84Point p) {
		assertTrue(p + "" should be in "" + box, box.contains(p));
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,BoundingBoxTest.java,assertNotContains,"	private void assertNotContains(BoundingBox box, WGS84Point p) {
		assertFalse(p + "" should NOT be in "" + box, box.contains(p));
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashBoundingBoxSearchTest.java,testSeveralBoundingBoxes,"	public void testSeveralBoundingBoxes() {
		checkSearchYieldsCorrectNumberOfHashes(40.2090980098, 40.21982983232432, -22.523432424324, -22.494234232442);
		checkSearchYieldsCorrectNumberOfHashes(41.23452234, 40.09872762, 31.23432, 30.0113312322);
		checkSearchYieldsCorrectHashes(47.447907, 47.300200, 8.760941, 8.471276, ""u0qj"");
		checkSearchYieldsCorrectHashes(47.157502, 47.329727, 8.562244, 8.859215, ""u0qj"", ""u0qm"", ""u0qh"", ""u0qk"");
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashBoundingBoxSearchTest.java,checkSearchYieldsCorrectNumberOfHashes,"	private void checkSearchYieldsCorrectNumberOfHashes(double minLat, double maxLat, double minLon, double maxLon) {
		GeoHashQuery search = new GeoHashBoundingBoxQuery(new BoundingBox(minLat, maxLat, minLon, maxLon));
		assertRightNumberOfSearchHashes(search);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashBoundingBoxSearchTest.java,checkSearchYieldsCorrectHashes,"	private void checkSearchYieldsCorrectHashes(double minLat, double maxLat, double minLon, double maxLon,
			String... hashes) {
		GeoHashQuery search = new GeoHashBoundingBoxQuery(new BoundingBox(minLat, maxLat, minLon, maxLon));
		assertEquals(hashes.length, search.getSearchHashes().size());
		for (String expectedHash : hashes) {
			assertTrue(""search hashes should contain "" + expectedHash + "" is: "" + search, search.getSearchHashes()",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashBoundingBoxSearchTest.java,assertRightNumberOfSearchHashes,"	private void assertRightNumberOfSearchHashes(GeoHashQuery search) {
		int size = search.getSearchHashes().size();
		assertTrue(size == 1 || size == 2 || size == 4);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,toBase32ShouldThrowWhenPrecisionIsNotAMultipleOf5,"	public void toBase32ShouldThrowWhenPrecisionIsNotAMultipleOf5() {
		hash.bits = 0x6ff0413000000000l;
		hash.significantBits = 24;
		hash.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			BoundingBox bbox = gh.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testToAndFromBinaryString,"	public void testToAndFromBinaryString() {
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			String binaryString = gh.toBinaryString();",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertWithin(hash, bbox);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,assertWithin,"	private void assertWithin(GeoHash hash, GeoHash bbox) {
		assertTrue(hash + "" should be within "" + bbox, hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,itShouldCreateAHashWithMaximumPrecisionOf64Bits,"	public void itShouldCreateAHashWithMaximumPrecisionOf64Bits() {
		GeoHash.withBitPrecision(10.0, 10.0, 64);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,itShouldThrowWhenTheBitPrecisionIsMoreThan64Bits,"	public void itShouldThrowWhenTheBitPrecisionIsMoreThan64Bits() {
		GeoHash.withBitPrecision(46.0, 8.0, 70);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,itShouldThrowWhenTheCharacterPrecisionIsTooBig,"	public void itShouldThrowWhenTheCharacterPrecisionIsTooBig() {
		GeoHash.withCharacterPrecision(10.0, 120.0, 14);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash + "" should NOT be within "" + bbox, hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");

		String geoHashString = GeoHash.geoHashStringWithCharacterPrecision(point.getLatitude(), point.getLongitude(), 12);
		assertEquals(fullStringValue, geoHashString);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xd000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xc000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);
",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertEquals(start.getBoundingBox(), end.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testKnownNeighbouringHashes,"	public void testKnownNeighbouringHashes() {
		GeoHash h1 = GeoHash.fromGeohashString(""u1pb"");
		assertEquals(""u0zz"", h1.getSouthernNeighbour().toBase32());
		assertEquals(""u1pc"", h1.getNorthernNeighbour().toBase32());
		assertEquals(""u300"", h1.getEasternNeighbour().toBase32());
		assertEquals(""u302"", h1.getEasternNeighbour().getEasternNeighbour().toBase32());
		assertEquals(""u1p8"", h1.getWesternNeighbour().toBase32());

		assertEquals(""sp2j"", GeoHash.withCharacterPrecision(41.7, 0.08, 4).toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testKnownAdjacentNeighbours,"	public void testKnownAdjacentNeighbours() {
		String center = ""dqcjqc"";
		String[] adjacent = new String[] { ""dqcjqf"", ""dqcjqb"", ""dqcjr1"", ""dqcjq9"", ""dqcjqd"", ""dqcjr4"", ""dqcjr0"",
				""dqcjq8"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""u1x0dfg"";
		adjacent = new String[] { ""u1x0dg4"", ""u1x0dg5"", ""u1x0dgh"", ""u1x0dfu"", ""u1x0dfs"", ""u1x0dfe"", ""u1x0dfd"",
				""u1x0dff"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""sp2j"";
		adjacent = new String[] { ""ezry"", ""sp2n"", ""sp2q"", ""sp2m"", ""sp2k"", ""sp2h"", ""ezru"", ""ezrv"" };
		assertAdjacentHashesAre(center, adjacent);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testThatAdjacentHashesHavePointInitialized,"	public void testThatAdjacentHashesHavePointInitialized() {
		String center = ""dqcjqc"";
		GeoHash geohash = GeoHash.fromGeohashString(center);
		GeoHash[] adjacentHashes = geohash.getAdjacent();
		for (GeoHash adjacentHash : adjacentHashes) {
			assertNotNull(adjacentHash.getBoundingBox());",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,assertAdjacentHashesAre,"	private void assertAdjacentHashesAre(String centerString, String[] adjacentStrings) {
		GeoHash center = GeoHash.fromGeohashString(centerString);
		GeoHash[] adjacent = center.getAdjacent();
		for (String check : adjacentStrings) {
			assertArrayContainsGeoHash(check, adjacent);",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,assertArrayContainsGeoHash,"	private void assertArrayContainsGeoHash(String check, GeoHash[] hashes) {
		boolean found = false;
		for (GeoHash hash : hashes) {
			if (hash.toBase32().equals(check)) {
				found = true;
				break;
			}
		}
		assertTrue(""Array should contain "" + check, found);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testNeibouringHashesNearMeridian,"	public void testNeibouringHashesNearMeridian() {
		GeoHash hash = GeoHash.fromGeohashString(""sp2j"");
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(""ezrv"", west.toBase32());
		west = west.getWesternNeighbour();
		assertEquals(""ezrt"", west.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testSimpleWithin,"	public void testSimpleWithin() {
		GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
		GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
		assertWithin(inside, hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(hash.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testToLongAndBack,"	public void testToLongAndBack() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		long lv = hash.longValue();
		assertEquals(lv + (1 << (64 - hash.significantBits())), hash.next().longValue());
		GeoHash hashFromLong = GeoHash.fromLongValue(lv, hash.significantBits());
		assertEquals(""dr4jb0bn21"", hashFromLong.toBase32());
		assertEquals(hash, hashFromLong);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testNext,"	public void testNext() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 10);
		GeoHash next = hash.next();
		assertTrue(hash.compareTo(next) < 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testNextPrev,"	public void testNextPrev() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 35);
		GeoHash next = hash.next(2);
		assertTrue(hash.compareTo(next) < 0);
		GeoHash prev1 = next.prev();
		GeoHash prev2 = prev1.next(-1);
		assertTrue(prev1.compareTo(next) < 0);
		System.out.println(""hash: "" + hash.toBase32());
		System.out.println(""next: "" + next.toBase32());
		System.out.println(""prev1: "" + prev1.toBase32());
		System.out.println(""prev2: "" + prev2.toBase32());

		assertTrue(prev2.compareTo(prev1) < 0);
		assertTrue(prev2.compareTo(hash) == 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testGetCharacterPrecisionThrows,"	public void testGetCharacterPrecisionThrows() throws Exception {
		GeoHash hash = GeoHash.withBitPrecision(37.7, -122.52, 32);
		hash.getCharacterPrecision();
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testGetCharacterPrecisionWorksWhenPrecisionIsMultipleOfFive,"	public void testGetCharacterPrecisionWorksWhenPrecisionIsMultipleOfFive() throws Exception {
		GeoHash hash = GeoHash.withBitPrecision(37.7, -122.52, 60);
		int precision = hash.getCharacterPrecision();
		assertEquals(precision, 12);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testStepsBetween,"	public void testStepsBetween() {
		GeoHash bl = GeoHash.withBitPrecision(37.7, -122.52, 35);
		GeoHash ur = GeoHash.withBitPrecision(37.84, -122.35, 35);

		long steps = GeoHash.stepsBetween(bl, bl);
		assertEquals(steps, 0);

		steps = GeoHash.stepsBetween(bl, bl.next(4));
		assertEquals(steps, 4);

		BoundingBoxGeoHashIterator iter = new BoundingBoxGeoHashIterator(new TwoGeoHashBoundingBox(bl, ur));
		int count = 0;
		while (iter.hasNext()) {
			iter.next();
			count++;
		}
		assertEquals(12875, count);

		int allHashes = 0;
		int inBbox = 1;
		int latMore = 0;
		int lonMore = 0;
		int bothMore = 0;
		int latLess = 0;
		int lonLess = 0;
		int bothLess = 0;
		int latLessLonMore = 0;
		int latMoreLonLess = 0;
		GeoHash idx = bl;
		BoundingBox iterBbox = iter.getBoundingBox().getBoundingBox();
		while (idx.compareTo(ur) < 0) {
			idx = idx.next();
			allHashes++;
			if (iterBbox.contains(idx.getPoint())) {
				inBbox++;
			}
			boolean latIsMore = false;
			boolean latIsLess = false;
			if (idx.getPoint().getLatitude() > iterBbox.getMaxLat()) {
				latIsMore = true;
				latMore++;
			} else if (idx.getPoint().getLatitude() < iterBbox.getMinLat()) {
				latIsLess = true;
				latLess++;
			}
			if (idx.getPoint().getLongitude() > iterBbox.getMaxLon()) {
				lonMore++;
				if (latIsMore) {
					bothMore++;
				}
				if (latIsLess) {
					latLessLonMore++;
				}
			} else if (idx.getPoint().getLongitude() < iterBbox.getMinLon()) {
				lonLess++;
				if (latIsLess) {
					bothLess++;
				}
				if (latIsMore) {
					latMoreLonLess++;
				}
			}
		}

		// Just trying to understand where these GeoHashes are with regard to
		// their bounding box.
		steps = GeoHash.stepsBetween(bl, ur);
		assertEquals(48472, steps);
		assertEquals(steps, allHashes);
		assertEquals(count, inBbox);
		assertEquals(14938, latMore);
		assertEquals(640, lonMore);
		assertEquals(0, bothMore);
		assertEquals(7680, latLess);
		assertEquals(24391, lonLess);
		assertEquals(0, bothLess);
		assertEquals(240, latLessLonMore);
		assertEquals(11811, latMoreLonLess);
		assertEquals(steps, lonLess + latLess + latMore + lonMore + inBbox - latLessLonMore - latMoreLonLess - 1);
",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testCompareTo,"	public void testCompareTo() {
		GeoHash prevHash = null;
		for (int i = 0; i < 10000; i++) {
			GeoHash hash = RandomGeohashes.createWith5BitsPrecision();",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testOrdIsPositive,"	public void testOrdIsPositive() {
		double lat = 40.390943;
		double lon = 75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);
		assertEquals(0xcf6915015410500l, hash.ord());
		assertTrue(hash.ord() >= 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,GeoHashTest.java,testSecondCaseWhereOrdMustBePositive,"	public void testSecondCaseWhereOrdMustBePositive() {
		GeoHash hash = GeoHash.withCharacterPrecision(-36.919550434870125,174.71024582237604,7);
		assertTrue(hash.ord() > 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,WGS84PointTest.java,setUp,"	public void setUp() {
		a = new WGS84Point(47.2342, 15.7465465);
		b = new WGS84Point(a);
		c = new WGS84Point(-47.234, b.getLongitude());
		d = new WGS84Point(-32.9687253, 12.42334242);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,WGS84PointTest.java,testVincenty,"	public void testVincenty() {
		WGS84Point startPoint = new WGS84Point(40, 40);

		int distanceInMeters = 10000;
		WGS84Point result = VincentyGeodesy.moveInDirection(startPoint, 120,
				distanceInMeters);
		assertEquals(40.10134882, result.getLongitude(), DELTA);
		assertEquals(39.9549245, result.getLatitude(), DELTA);

		assertEquals(distanceInMeters, VincentyGeodesy.distanceInMeters(
				startPoint, result), DELTA);

		WGS84Point p1 = new WGS84Point(1, 1);
		int tenThousandKilometers = 10000000;
		WGS84Point p2 = VincentyGeodesy.moveInDirection(p1, 270, tenThousandKilometers);
		System.out.println(p2);
		assertEquals(tenThousandKilometers, VincentyGeodesy.distanceInMeters(p1, p2), DELTA);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,WGS84PointTest.java,testEquals,"	public void testEquals() {
		assertEquals(a, a);
		assertEquals(a, b);
		assertEquals(b, a);
		assertNotSame(a, b);

		assertFalse(a.equals(c));
		assertFalse(c.equals(a));
		assertFalse(d.equals(c));
		assertFalse(d.equals(a));
		assertFalse(d.equals(new Integer(10)));
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,WGS84PointTest.java,testHashCode,"	public void testHashCode() {
		assertEquals(a.hashCode(), a.hashCode());
		assertEquals(a.hashCode(), b.hashCode());
		assertFalse(a.hashCode() == c.hashCode());
		assertFalse(d.hashCode() == c.hashCode());
		assertFalse(d.hashCode() == new Integer(10).hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c,WGS84PointTest.java,testRangeCheck,"	public void testRangeCheck() {
		new WGS84Point(180, 240);
	}",https://www.github.com/kungfoo/geohash-java/commit/c9957767bbf95c7d4e7f7e6c0c8bfd732a8bea3c
0541956c7bd3605f33525bb140e7984132bbd899,GeoHashBoundingBoxQuery.java,addSearchHash,"	private void addSearchHash(GeoHash hash) {
		if (boundingBox == null) {
			boundingBox = new BoundingBox(hash.getBoundingBox());
		} else {
			boundingBox.expandToInclude(hash.getBoundingBox());
		}
		searchHashes.add(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/0541956c7bd3605f33525bb140e7984132bbd899
0541956c7bd3605f33525bb140e7984132bbd899,GeoHashBoundingBoxQuery.java,expandSearch,"	private void expandSearch(GeoHash centerHash, BoundingBox bbox) {
		addSearchHash(centerHash);

		for (GeoHash adjacent : centerHash.getAdjacent()) {
			BoundingBox adjacentBox = adjacent.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/0541956c7bd3605f33525bb140e7984132bbd899
0541956c7bd3605f33525bb140e7984132bbd899,GeoHashBoundingBoxQuery.java,hashFits,"	private boolean hashFits(GeoHash hash, BoundingBox bbox) {
		return hash.contains(bbox.getUpperLeft()) && hash.contains(bbox.getLowerRight());
	}",https://www.github.com/kungfoo/geohash-java/commit/0541956c7bd3605f33525bb140e7984132bbd899
0541956c7bd3605f33525bb140e7984132bbd899,GeoHashBoundingBoxQuery.java,contains,"	public boolean contains(GeoHash hash) {
		for (GeoHash searchHash : searchHashes) {
			if (hash.within(searchHash)) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/0541956c7bd3605f33525bb140e7984132bbd899
0541956c7bd3605f33525bb140e7984132bbd899,GeoHashBoundingBoxQuery.java,contains,"	public boolean contains(WGS84Point point) {
		return contains(GeoHash.withBitPrecision(point.getLatitude(), point.getLongitude(), 64));
	}",https://www.github.com/kungfoo/geohash-java/commit/0541956c7bd3605f33525bb140e7984132bbd899
0541956c7bd3605f33525bb140e7984132bbd899,GeoHashBoundingBoxQuery.java,getSearchHashes,"	public List<GeoHash> getSearchHashes() {
		return searchHashes;
	}",https://www.github.com/kungfoo/geohash-java/commit/0541956c7bd3605f33525bb140e7984132bbd899
0541956c7bd3605f33525bb140e7984132bbd899,GeoHashBoundingBoxQuery.java,toString,"	public String toString() {
		StringBuilder bui = new StringBuilder();
		for (GeoHash hash : searchHashes) {
			bui.append(hash).append(""\n"");
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/0541956c7bd3605f33525bb140e7984132bbd899
0541956c7bd3605f33525bb140e7984132bbd899,GeoHashBoundingBoxQuery.java,getWktBox,"	public String getWktBox() {
		return ""BOX("" + boundingBox.getMinLon() + "" "" + boundingBox.getMinLat() + "","" + boundingBox.getMaxLon() + "" ""
				+ boundingBox.getMaxLat() + "")"";",https://www.github.com/kungfoo/geohash-java/commit/0541956c7bd3605f33525bb140e7984132bbd899
b0b5f5a80a65ba36f9d286ae004a9fef13656549,VincentyGeodesy.java,moveInDirection,"	public static WGS84Point moveInDirection(WGS84Point point, double bearingInDegrees, double distanceInMeters) {

		if (bearingInDegrees < 0 || bearingInDegrees > 360) {
			throw new IllegalArgumentException(""direction must be in (0,360)"");
		}

		double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; // WGS-84
		// ellipsiod
		double alpha1 = bearingInDegrees * degToRad;
		double sinAlpha1 = Math.sin(alpha1), cosAlpha1 = Math.cos(alpha1);

		double tanU1 = (1 - f) * Math.tan(point.getLatitude() * degToRad);
		double cosU1 = 1 / Math.sqrt((1 + tanU1 * tanU1)), sinU1 = tanU1 * cosU1;
		double sigma1 = Math.atan2(tanU1, cosAlpha1);
		double sinAlpha = cosU1 * sinAlpha1;
		double cosSqAlpha = 1 - sinAlpha * sinAlpha;
		double uSq = cosSqAlpha * (a * a - b * b) / (b * b);
		double A = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));
		double B = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));

		double sinSigma = 0, cosSigma = 0, cos2SigmaM = 0;
		double sigma = distanceInMeters / (b * A), sigmaP = 2 * Math.PI;
		while (Math.abs(sigma - sigmaP) > 1e-12) {
			cos2SigmaM = Math.cos(2 * sigma1 + sigma);
			sinSigma = Math.sin(sigma);
			cosSigma = Math.cos(sigma);
			double deltaSigma = B
					* sinSigma
					* (cos2SigmaM + B
							/ 4
							* (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM
									* (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));
			sigmaP = sigma;
			sigma = distanceInMeters / (b * A) + deltaSigma;
		}

		double tmp = sinU1 * sinSigma - cosU1 * cosSigma * cosAlpha1;
		double lat2 = Math.atan2(sinU1 * cosSigma + cosU1 * sinSigma * cosAlpha1, (1 - f)
				* Math.sqrt(sinAlpha * sinAlpha + tmp * tmp));
		double lambda = Math.atan2(sinSigma * sinAlpha1, cosU1 * cosSigma - sinU1 * sinSigma * cosAlpha1);
		double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
		double L = lambda - (1 - C) * f * sinAlpha
				* (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));

		double newLat = lat2 / degToRad;
		double newLon = point.getLongitude() + L / degToRad;

		newLon = (newLon > 180.0 ? newLon - 360 : newLon);
		newLon = (newLon < -180.0 ? 360.0 + newLon : newLon);

		return new WGS84Point(newLat, newLon);
	}",https://www.github.com/kungfoo/geohash-java/commit/b0b5f5a80a65ba36f9d286ae004a9fef13656549
b0b5f5a80a65ba36f9d286ae004a9fef13656549,VincentyGeodesy.java,distanceInMeters,"	public static double distanceInMeters(WGS84Point foo, WGS84Point bar) {
		double a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; // WGS-84
		// ellipsiod
		double L = (bar.getLongitude() - foo.getLongitude()) * degToRad;
		double U1 = Math.atan((1 - f) * Math.tan(foo.getLatitude() * degToRad));
		double U2 = Math.atan((1 - f) * Math.tan(bar.getLatitude() * degToRad));
		double sinU1 = Math.sin(U1), cosU1 = Math.cos(U1);
		double sinU2 = Math.sin(U2), cosU2 = Math.cos(U2);

		double cosSqAlpha, sinSigma, cos2SigmaM, cosSigma, sigma;

		double lambda = L, lambdaP, iterLimit = 20;
		do {
			double sinLambda = Math.sin(lambda), cosLambda = Math.cos(lambda);
			sinSigma = Math.sqrt((cosU2 * sinLambda) * (cosU2 * sinLambda)
					+ (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda) * (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda));
			if (sinSigma == 0) {
				return 0; // co-incident points
			}
			cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda;
			sigma = Math.atan2(sinSigma, cosSigma);
			double sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma;
			cosSqAlpha = 1 - sinAlpha * sinAlpha;
			cos2SigmaM = cosSigma - 2 * sinU1 * sinU2 / cosSqAlpha;
			if (Double.isNaN(cos2SigmaM)) {
				cos2SigmaM = 0; // equatorial line: cosSqAlpha=0
			}
			double C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));
			lambdaP = lambda;
			lambda = L + (1 - C) * f * sinAlpha
					* (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));
		} while (Math.abs(lambda - lambdaP) > EPSILON && --iterLimit > 0);

		if (iterLimit == 0) {
			return Double.NaN;
		}
		double uSquared = cosSqAlpha * (a * a - b * b) / (b * b);
		double A = 1 + uSquared / 16384 * (4096 + uSquared * (-768 + uSquared * (320 - 175 * uSquared)));
		double B = uSquared / 1024 * (256 + uSquared * (-128 + uSquared * (74 - 47 * uSquared)));
		double deltaSigma = B
				* sinSigma
				* (cos2SigmaM + B
						/ 4
						* (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM
								* (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));
		double s = b * A * (sigma - deltaSigma);

		return s;
	}",https://www.github.com/kungfoo/geohash-java/commit/b0b5f5a80a65ba36f9d286ae004a9fef13656549
376f5edb443465ff6cc2bac0bbd69d62967b0c27,BoundingBoxGeoHashIterator.java,getBoundingBox,"	public TwoGeoHashBoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/376f5edb443465ff6cc2bac0bbd69d62967b0c27
376f5edb443465ff6cc2bac0bbd69d62967b0c27,BoundingBoxGeoHashIterator.java,hasNext,"	public boolean hasNext() {
		return current != null;
	}",https://www.github.com/kungfoo/geohash-java/commit/376f5edb443465ff6cc2bac0bbd69d62967b0c27
376f5edb443465ff6cc2bac0bbd69d62967b0c27,BoundingBoxGeoHashIterator.java,next,"	public GeoHash next() {
		if (!hasNext()) {
			throw new NoSuchElementException();
		}

		GeoHash rv = current;
		if (rv.equals(boundingBox.getTopRight())) {
		    current = null;
        } else {
			current = rv.next();
            while (hasNext() && !boundingBox.getBoundingBox().contains(current.getPoint())) {
                current = current.next();
            }
        }

		return rv;
	}",https://www.github.com/kungfoo/geohash-java/commit/376f5edb443465ff6cc2bac0bbd69d62967b0c27
376f5edb443465ff6cc2bac0bbd69d62967b0c27,BoundingBoxGeoHashIterator.java,remove,"	public void remove() {
		throw new UnsupportedOperationException();
	}",https://www.github.com/kungfoo/geohash-java/commit/376f5edb443465ff6cc2bac0bbd69d62967b0c27
376f5edb443465ff6cc2bac0bbd69d62967b0c27,BoundingBoxGeoHashIteratorTest.java,testIter,"	public void testIter() {
		BoundingBox box = new BoundingBox(37.7, 37.84, -122.52, -122.35);
		BoundingBoxGeoHashIterator iter = new BoundingBoxGeoHashIterator(
				TwoGeoHashBoundingBox.withBitPrecision(box, 10));
		checkIterator(iter);
	}",https://www.github.com/kungfoo/geohash-java/commit/376f5edb443465ff6cc2bac0bbd69d62967b0c27
376f5edb443465ff6cc2bac0bbd69d62967b0c27,BoundingBoxGeoHashIteratorTest.java,testIter2,"	public void testIter2() {
		BoundingBox box = new BoundingBox(37.7, 37.84, -122.52, -122.35);
		BoundingBoxGeoHashIterator iter = new BoundingBoxGeoHashIterator(
				TwoGeoHashBoundingBox.withBitPrecision(box, 35));
		checkIterator(iter);
	}",https://www.github.com/kungfoo/geohash-java/commit/376f5edb443465ff6cc2bac0bbd69d62967b0c27
376f5edb443465ff6cc2bac0bbd69d62967b0c27,BoundingBoxGeoHashIteratorTest.java,testIter3,"	public void testIter3() {
		BoundingBox box = new BoundingBox(28.5, 67.15, -33.2, 44.5);
		BoundingBoxGeoHashIterator iter = new BoundingBoxGeoHashIterator(
				TwoGeoHashBoundingBox.withCharacterPrecision(box, 2));
		List<GeoHash> hashes = checkIterator(iter);
		assertThat(hashes.size(), is(49));
	}",https://www.github.com/kungfoo/geohash-java/commit/376f5edb443465ff6cc2bac0bbd69d62967b0c27
376f5edb443465ff6cc2bac0bbd69d62967b0c27,BoundingBoxGeoHashIteratorTest.java,testEndlessIterator,"	public void testEndlessIterator() {
		BoundingBox box = new BoundingBox(72.28907f, 88.62655f, -50.976562f, 170.50781f);
		TwoGeoHashBoundingBox twoGeoHashBoundingBox = TwoGeoHashBoundingBox.withCharacterPrecision(box, 2);
		BoundingBoxGeoHashIterator iterator = new BoundingBoxGeoHashIterator(twoGeoHashBoundingBox);

		Set<GeoHash> hashes = new HashSet<>();
		while (iterator.hasNext()) {
			GeoHash hash = iterator.next();",https://www.github.com/kungfoo/geohash-java/commit/376f5edb443465ff6cc2bac0bbd69d62967b0c27
376f5edb443465ff6cc2bac0bbd69d62967b0c27,BoundingBoxGeoHashIteratorTest.java,testAllCells,"	public void testAllCells() {
		BoundingBox box = new BoundingBox(-90, 90, -180, 180);
		TwoGeoHashBoundingBox twoGeoHashBoundingBox = TwoGeoHashBoundingBox.withCharacterPrecision(box, 2);
		BoundingBoxGeoHashIterator iterator = new BoundingBoxGeoHashIterator(twoGeoHashBoundingBox);

		Set<GeoHash> hashes = new HashSet<>();
		while (iterator.hasNext()) {
			GeoHash hash = iterator.next();
			hashes.add(hash);
		}

		assertThat(hashes.size(), is(1024));
	}",https://www.github.com/kungfoo/geohash-java/commit/376f5edb443465ff6cc2bac0bbd69d62967b0c27
376f5edb443465ff6cc2bac0bbd69d62967b0c27,BoundingBoxGeoHashIteratorTest.java,testTopRightCorner,"	public void testTopRightCorner() {
		BoundingBox box = new BoundingBox(84.4, 84.9, 169.3, 179.6); // all in ZZ cell
		TwoGeoHashBoundingBox twoGeoHashBoundingBox = TwoGeoHashBoundingBox.withCharacterPrecision(box, 2);
		BoundingBoxGeoHashIterator iterator = new BoundingBoxGeoHashIterator(twoGeoHashBoundingBox);

		Set<GeoHash> hashes = new HashSet<>();
		while (iterator.hasNext()) {
			GeoHash hash = iterator.next();",https://www.github.com/kungfoo/geohash-java/commit/376f5edb443465ff6cc2bac0bbd69d62967b0c27
376f5edb443465ff6cc2bac0bbd69d62967b0c27,BoundingBoxGeoHashIteratorTest.java,checkIterator,"	private List<GeoHash> checkIterator(BoundingBoxGeoHashIterator iter) {
		BoundingBox newBox = iter.getBoundingBox().getBoundingBox();
		List<GeoHash> hashes = new ArrayList<>();
		while (iter.hasNext()) {
			hashes.add(iter.next());
		}

		GeoHash prev = null;
		for (GeoHash gh : hashes) {
			if (prev != null) {
				Assert.assertTrue(prev.compareTo(gh) < 0);
			}
			Assert.assertTrue(newBox.contains(gh.getPoint()));
			prev = gh;
		}

		return hashes;
	}",https://www.github.com/kungfoo/geohash-java/commit/376f5edb443465ff6cc2bac0bbd69d62967b0c27
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBox.java,getNorthWestPoint,"	public WGS84Point getNorthWestPoint() {
		return new WGS84Point(northLatitude, westLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBox.java,getNorthEastPoint,"	public WGS84Point getNorthEastPoint() {
		return new WGS84Point(northLatitude, eastLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBox.java,getSouthEastPoint,"	public WGS84Point getSouthEastPoint() {
		return new WGS84Point(southLatitude, eastLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBox.java,getSouthWestPoint,"	public WGS84Point getSouthWestPoint() {
		return new WGS84Point(southLatitude, westLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBox.java,getLatitudeSize,"	public double getLatitudeSize() {
		return northLatitude - southLatitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBox.java,getLongitudeSize,"	public double getLongitudeSize() {
		if (eastLongitude == 180.0 && westLongitude == -180.0)
			return 360.0;
		double size = (eastLongitude - westLongitude) % 360;

		// Remainder fix for earlier java versions
		if (size < 0)
			size += 360.0;
		return size;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBox.java,equals,"	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj instanceof BoundingBox) {
			BoundingBox that = (BoundingBox) obj;",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBox.java,hashCode,"	public int hashCode() {
		int result = 17;
		result = 37 * result + hashCode(southLatitude);
		result = 37 * result + hashCode(northLatitude);
		result = 37 * result + hashCode(westLongitude);
		result = 37 * result + hashCode(eastLongitude);
		return result;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBox.java,hashCode,"	private static int hashCode(double x) {
		long f = Double.doubleToLongBits(x);
		return (int) (f ^ (f >>> 32));
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBox.java,contains,"	public boolean contains(WGS84Point point) {
		return containsLatitude(point.getLatitude()) && containsLongitude(point.getLongitude());
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBox.java,intersects,"	public boolean intersects(BoundingBox other) {
		// Check latitude first cause it's the same for all cases
		if (other.southLatitude > northLatitude || other.northLatitude < southLatitude) {
			return false;",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBox.java,toString,"	public String toString() {
		return getNorthWestPoint() + "" -> "" + getSouthEastPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBox.java,getCenterPoint,"	public WGS84Point getCenterPoint() {
		double centerLatitude = (southLatitude + northLatitude) / 2;
		double centerLongitude = (westLongitude + eastLongitude) / 2;

		// This can happen if the bBox crosses the 180-Meridian
		if (centerLongitude > 180)
			centerLongitude -= 360;

		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBox.java,expandToInclude,"	public void expandToInclude(BoundingBox other) {

		// Expand Latitude
		if (other.southLatitude < southLatitude) {
			southLatitude = other.southLatitude;
		}
		if (other.northLatitude > northLatitude) {
			northLatitude = other.northLatitude;
		}

		// Expand Longitude
		// At first check whether the two boxes contain each other or not
		boolean thisContainsOther = containsLongitude(other.eastLongitude) && containsLongitude(other.westLongitude);
		boolean otherContainsThis = other.containsLongitude(eastLongitude) && other.containsLongitude(westLongitude);

		// The new box needs to span the whole globe
		if (thisContainsOther && otherContainsThis) {
			eastLongitude = 180.0;
			westLongitude = -180.0;
			intersects180Meridian = false;
			return;
		}
		// Already done in this case
		if (thisContainsOther)
			return;
		// Expand to match the bigger box
		if (otherContainsThis) {
			eastLongitude = other.eastLongitude;
			westLongitude = other.westLongitude;
			intersects180Meridian = eastLongitude < westLongitude;
			return;
		}

		// If this is not the case compute the distance between the endpoints in east direction
		double distanceEastToOtherEast = (other.eastLongitude - eastLongitude) % 360;
		double distanceOtherWestToWest = (westLongitude - other.westLongitude) % 360;

		// Fix for lower java versions, since the remainder-operator (%) changed in one version, idk which one
		if (distanceEastToOtherEast < 0)
			distanceEastToOtherEast += 360;
		if (distanceOtherWestToWest < 0)
			distanceOtherWestToWest += 360;

		// The minimal distance needs to be extended
		if (distanceEastToOtherEast <= distanceOtherWestToWest) {
			eastLongitude = other.eastLongitude;
		} else {
			westLongitude = other.westLongitude;
		}

		intersects180Meridian = eastLongitude < westLongitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBox.java,containsLatitude,"	private boolean containsLatitude(double latitude) {
		return latitude >= southLatitude && latitude <= northLatitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBox.java,containsLongitude,"	private boolean containsLongitude(double longitude) {
		if (intersects180Meridian) {
			return longitude <= eastLongitude || longitude >= westLongitude;",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBox.java,getEastLongitude,"	public double getEastLongitude() {
		return eastLongitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBox.java,getWestLongitude,"	public double getWestLongitude() {
		return westLongitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBox.java,getNorthLatitude,"	public double getNorthLatitude() {
		return northLatitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBox.java,getSouthLatitude,"	public double getSouthLatitude() {
		return southLatitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBox.java,intersects180Meridian,"	public boolean intersects180Meridian() {
		return intersects180Meridian;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		if (numberOfCharacters > MAX_CHARACTER_PRECISION) {
			throw new IllegalArgumentException(""A geohash can only be "" + MAX_CHARACTER_PRECISION + "" character long."");
		}
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (numberOfBits > MAX_BIT_PRECISION) {
			throw new IllegalArgumentException(""A Geohash can only be "" + MAX_BIT_PRECISION + "" bits long!"");
		}
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0) {
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		}
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,fromBinaryString,"	public static GeoHash fromBinaryString(String binaryString) {
		GeoHash geohash = new GeoHash();
		for (int i = 0; i < binaryString.length(); i++) {
			if (binaryString.charAt(i) == '1') {
				geohash.addOnBitToEnd();
			} else if (binaryString.charAt(i) == '0') {
				geohash.addOffBitToEnd();
			} else {
				throw new IllegalArgumentException(binaryString + "" is not a valid geohash as a binary string"");
			}
		}
		geohash.bits <<= (MAX_BIT_PRECISION - geohash.significantBits);
		long[] latitudeBits = geohash.getRightAlignedLatitudeBits();
		long[] longitudeBits = geohash.getRightAlignedLongitudeBits();
		return geohash.recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (MAX_BIT_PRECISION - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,fromLongValue,"	public static GeoHash fromLongValue(long hashVal, int significantBits) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		String binaryString = Long.toBinaryString(hashVal);
		while (binaryString.length() < MAX_BIT_PRECISION) {
			binaryString = ""0"" + binaryString;
		}
		for (int j = 0; j < significantBits; j++) {
			if (isEvenBit) {
				divideRangeDecode(hash, longitudeRange, binaryString.charAt(j) != '0');
			} else {
				divideRangeDecode(hash, latitudeRange, binaryString.charAt(j) != '0');
			}
			isEvenBit = !isEvenBit;
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (MAX_BIT_PRECISION - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,geoHashStringWithCharacterPrecision,"	public static String geoHashStringWithCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		GeoHash hash = withCharacterPrecision(latitude, longitude, numberOfCharacters);
		return hash.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(latitudeRange[0], latitudeRange[1], longitudeRange[0], longitudeRange[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,next,"	public GeoHash next(int step) {
		return fromOrd(ord() + step, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,next,"	public GeoHash next() {
		return next(1);
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,prev,"	public GeoHash prev() {
		return next(-1);
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,ord,"	public long ord() {
		int insignificantBits = MAX_BIT_PRECISION - significantBits;
		return bits >>> insignificantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,getCharacterPrecision,"	public int getCharacterPrecision() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(
					""precision of GeoHash is not divisble by 5: "" + this);
		}
		return significantBits / 5;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,fromOrd,"	public static GeoHash fromOrd(long ord, int significantBits) {
		int insignificantBits = MAX_BIT_PRECISION - significantBits;
		return fromLongValue(ord << insignificantBits, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,stepsBetween,"	public static long stepsBetween(GeoHash one, GeoHash two) {
		if (one.significantBits() != two.significantBits()) {
			throw new IllegalArgumentException(
					""It is only valid to compare the number of steps between two hashes if they have the same number of significant bits"");
		}
		return two.ord() - one.ord();
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern,",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,significantBits,"	public int significantBits() {
		return significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,longValue,"	public long longValue() {
		return bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,toBase32,"	public String toBase32() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(""Cannot convert a geohash to base32 if the precision is not a multiple of 5."");
		}
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (MAX_BIT_PRECISION - latBits[1]);
		lonBits[0] <<= (MAX_BIT_PRECISION - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (MAX_BIT_PRECISION - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.point = hash.boundingBox.getCenterPoint();
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", Long.toBinaryString(bits), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,toBinaryString,"	public String toBinaryString() {
		StringBuilder bui = new StringBuilder();
		long bitsCopy = bits;
		for (int i = 0; i < significantBits; i++) {
			if ((bitsCopy & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				bui.append('1');
			} else {
				bui.append('0');
			}
			bitsCopy <<= 1;
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,mask,"	private long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (MAX_BIT_PRECISION - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHash.java,compareTo,"	public int compareTo(GeoHash o) {
		int bitsCmp = Long.compare(bits ^ FIRST_BIT_FLAGGED, o.bits ^ FIRST_BIT_FLAGGED);
		if (bitsCmp != 0) {
			return bitsCmp;",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHashBoundingBoxQuery.java,generateSearchHashes,"	private void generateSearchHashes(BoundingBox bbox) {
		int fittingBits = GeoHashSizeTable.numberOfBitsForOverlappingGeoHash(bbox);
		WGS84Point center = bbox.getCenterPoint();
		GeoHash centerHash = GeoHash.withBitPrecision(center.getLatitude(), center.getLongitude(), fittingBits);

		if (hashContainsBoundingBox(centerHash, bbox)) {
			// If the centerHash completly fits into the provided bounding box, just add the hash and continue",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHashBoundingBoxQuery.java,expandSearch,"	private void expandSearch(GeoHash centerHash, BoundingBox bbox) {
		searchHashes.add(centerHash);

		for (GeoHash adjacent : centerHash.getAdjacent()) {
			BoundingBox adjacentBox = adjacent.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHashBoundingBoxQuery.java,hashContainsBoundingBox,"	private boolean hashContainsBoundingBox(GeoHash hash, BoundingBox bbox) {
		return hash.contains(bbox.getNorthWestPoint()) && hash.contains(bbox.getSouthEastPoint());
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHashBoundingBoxQuery.java,contains,"	public boolean contains(GeoHash hash) {
		for (GeoHash searchHash : searchHashes) {
			if (hash.within(searchHash)) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHashBoundingBoxQuery.java,contains,"	public boolean contains(WGS84Point point) {
		return contains(GeoHash.withBitPrecision(point.getLatitude(), point.getLongitude(), 64));
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHashBoundingBoxQuery.java,getSearchHashes,"	public List<GeoHash> getSearchHashes() {
		return searchHashes;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHashBoundingBoxQuery.java,toString,"	public String toString() {
		StringBuilder bui = new StringBuilder();
		for (GeoHash hash : searchHashes) {
			bui.append(hash).append(""\n"");
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHashBoundingBoxQuery.java,getWktBox,"	public String getWktBox() {
		return ""BOX("" + boundingBox.getWestLongitude() + "" "" + boundingBox.getSouthLatitude() + "","" + boundingBox.getEastLongitude() + "" "" + boundingBox.getNorthLatitude() + "")"";
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBoxGeoHashIterator.java,getBoundingBox,"	public TwoGeoHashBoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBoxGeoHashIterator.java,hasNext,"	public boolean hasNext() {
		return current.compareTo(boundingBox.getNorthWest()) <= 0;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBoxGeoHashIterator.java,next,"	public GeoHash next() {
		GeoHash rv = current;
		if (!hasNext()) {
			throw new NoSuchElementException();
		}
		current = rv.next();
		while (hasNext() && !boundingBox.getBoundingBox().contains(current.getPoint())) {
			current = current.next();
		}
		return rv;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBoxGeoHashIterator.java,remove,"	public void remove() {
		throw new UnsupportedOperationException();
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBoxSampler.java,getBoundingBox,"	public TwoGeoHashBoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBoxSampler.java,next,"	public GeoHash next() {
		if (alreadyUsed.size() == maxSamples) {
			return null;
		}
		int idx = rand.nextInt(maxSamples + 1);
		while (alreadyUsed.contains(idx)) {
			idx = rand.nextInt(maxSamples + 1);
		}
		alreadyUsed.add(idx);
		GeoHash gh = boundingBox.getSouthEast().next(idx);
		if (!boundingBox.getBoundingBox().contains(gh.getPoint())) {
			return next();
		}
		return gh;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,TwoGeoHashBoundingBox.java,withCharacterPrecision,"	public static TwoGeoHashBoundingBox withCharacterPrecision(BoundingBox bbox, int numberOfCharacters) {
		GeoHash bottomLeft = GeoHash.withCharacterPrecision(bbox.getSouthLatitude(), bbox.getWestLongitude(), numberOfCharacters);
		GeoHash topRight = GeoHash.withCharacterPrecision(bbox.getNorthLatitude(), bbox.getEastLongitude(), numberOfCharacters);
		return new TwoGeoHashBoundingBox(bottomLeft, topRight);
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,TwoGeoHashBoundingBox.java,withBitPrecision,"	public static TwoGeoHashBoundingBox withBitPrecision(BoundingBox bbox, int numberOfBits) {
		GeoHash bottomLeft = GeoHash.withBitPrecision(bbox.getSouthLatitude(), bbox.getWestLongitude(), numberOfBits);
		GeoHash topRight = GeoHash.withBitPrecision(bbox.getNorthLatitude(), bbox.getEastLongitude(), numberOfBits);
		return new TwoGeoHashBoundingBox(bottomLeft, topRight);
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,TwoGeoHashBoundingBox.java,fromBase32,"	public static TwoGeoHashBoundingBox fromBase32(String base32) {
		String southWestBase32 = base32.substring(0, 7);
		String northEastBase32 = base32.substring(7);
		return new TwoGeoHashBoundingBox(GeoHash.fromGeohashString(southWestBase32), GeoHash.fromGeohashString(northEastBase32));
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,TwoGeoHashBoundingBox.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,TwoGeoHashBoundingBox.java,getSouthEast,"	public GeoHash getSouthEast() {
		return southEast;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,TwoGeoHashBoundingBox.java,getNorthWest,"	public GeoHash getNorthWest() {
		return northWest;
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,TwoGeoHashBoundingBox.java,toBase32,"	public String toBase32() {
		return southEast.toBase32() + northWest.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBoxTest.java,setUp,"	public void setUp() {
		a = new BoundingBox(new WGS84Point(21, 20), new WGS84Point(30, 31));
		b = new BoundingBox(a);
		c = new BoundingBox(new WGS84Point(-45, -170), new WGS84Point(45, 170));
		d = new BoundingBox(new WGS84Point(-45, 170), new WGS84Point(-45, -170));
		e = new BoundingBox(d);
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBoxTest.java,testHashCode,"	public void testHashCode() {
		assertEquals(a.hashCode(), b.hashCode());
		assertFalse(a.hashCode() == c.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBoxTest.java,testEqualsObject,"	public void testEqualsObject() {
		assertEquals(a, b);
		assertEquals(b, a);
		assertFalse(a.equals(c));
		assertEquals(d, e);
		assertEquals(e, d);
		assertFalse(c.equals(d));
		assertFalse(c.equals(a));
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBoxTest.java,testContains,"	public void testContains() {
		BoundingBox bbox = new BoundingBox(45, 46, 120, 121);
		assertContains(bbox, new WGS84Point(45.5, 120.5));
		assertNotContains(bbox, new WGS84Point(90, 90));

		// Testing bounding box over 180-Meridian
		bbox = new BoundingBox(45, 46, 170, -170);
		assertContains(bbox, new WGS84Point(45.5, 175));
		assertContains(bbox, new WGS84Point(45.5, -175));
		assertNotContains(bbox, new WGS84Point(45.5, -165));
		assertNotContains(bbox, new WGS84Point(45.5, 165));
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBoxTest.java,testSize,"	public void testSize() {
		BoundingBox bbox = new BoundingBox(45, 90, 0, 30);
		assertHeightIs(bbox, 45);
		assertWidthIs(bbox, 30);
		bbox = new BoundingBox(-45, 45, -22.5, 30);
		assertHeightIs(bbox, 90);
		assertWidthIs(bbox, 52.5);
		bbox = new BoundingBox(-46.1, -44, -128, -127.2);
		assertHeightIs(bbox, 2.1);
		assertWidthIs(bbox, 0.8);

		// Testing bounding box over 180-Meridian
		bbox = new BoundingBox(45, 90, 170, -170);
		assertHeightIs(bbox, 45);
		assertWidthIs(bbox, 20);
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBoxTest.java,assertWidthIs,"	private void assertWidthIs(BoundingBox bbox, double width) {
		assertEquals(width, bbox.getLongitudeSize(), DELTA);
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBoxTest.java,assertHeightIs,"	private void assertHeightIs(BoundingBox bbox, double height) {
		assertEquals(height, bbox.getLatitudeSize(), DELTA);
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBoxTest.java,testIntersects,"	public void testIntersects() {
		BoundingBox bbox = new BoundingBox(-10, 10, 40, 41);
		assertIntersects(bbox, new BoundingBox(-15, 5, 40.5, 43));
		assertDoesNotIntersect(bbox, new BoundingBox(-15, 5, 42, 43));

		// Testing bounding box over 180-Meridian
		bbox = new BoundingBox(45, 90, 170, -170);
		assertIntersects(bbox, new BoundingBox(50, 55, 175, 176));
		assertIntersects(bbox, new BoundingBox(50, 55, 160, 176));
		assertIntersects(bbox, new BoundingBox(50, 55, -175, -176));
		assertIntersects(bbox, new BoundingBox(50, 55, -160, -176));
		assertIntersects(bbox, new BoundingBox(50, 55, 175, -175));
		assertIntersects(bbox, new BoundingBox(50, 55, -175, 175));

		assertDoesNotIntersect(bbox, new BoundingBox(-15, 5, 42, 43));
		assertDoesNotIntersect(bbox, new BoundingBox(-15, 5, 175, 176));
		assertDoesNotIntersect(bbox, new BoundingBox(-15, 5, 175, -175));
		assertDoesNotIntersect(bbox, new BoundingBox(50, 55, 160, 169));
		assertDoesNotIntersect(bbox, new BoundingBox(50, 55, -169, -160));
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBoxTest.java,assertDoesNotIntersect,"	private void assertDoesNotIntersect(BoundingBox bbox, BoundingBox boundingBox) {
		assertFalse(bbox + "" should NOT intersect "" + boundingBox, bbox.intersects(boundingBox));
		assertFalse(boundingBox + "" should NOT intersect "" + bbox, boundingBox.intersects(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBoxTest.java,assertIntersects,"	private void assertIntersects(BoundingBox bbox, BoundingBox boundingBox) {
		assertTrue(bbox + "" should intersect "" + boundingBox, bbox.intersects(boundingBox));
		assertTrue(boundingBox + "" should intersect "" + bbox, boundingBox.intersects(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBoxTest.java,assertContains,"	private void assertContains(BoundingBox box, WGS84Point p) {
		assertTrue(p + "" should be in "" + box, box.contains(p));
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,BoundingBoxTest.java,assertNotContains,"	private void assertNotContains(BoundingBox box, WGS84Point p) {
		assertFalse(p + "" should NOT be in "" + box, box.contains(p));
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHashBoundingBoxSearchTest.java,testSeveralBoundingBoxes,"	public void testSeveralBoundingBoxes() {
		checkSearchYieldsCorrectNumberOfHashes(40.2090980098, 40.21982983232432, -22.523432424324, -22.494234232442);
		checkSearchYieldsCorrectNumberOfHashes(40.09872762, 41.23452234, 30.0113312322, 31.23432);

		checkSearchYieldsCorrectHashes(47.300200, 47.447907, 8.471276, 8.760941, ""u0qj"");
		checkSearchYieldsCorrectHashes(47.157502, 47.329727, 8.562244, 8.859215, ""u0qj"", ""u0qm"", ""u0qh"", ""u0qk"");

		// Testing bounding box over 180-Meridian
		checkSearchYieldsCorrectNumberOfHashes(40.2090980098, 40.21982983232432, 170.523432424324, -170.494234232442);
		checkSearchYieldsCorrectNumberOfHashes(40.2090980098, 40.21982983232432, 170.523432424324, 160.494234232442);

		checkSearchYieldsCorrectHashes(40.2090980098, 40.21982983232432, 170.523432424324, -170.494234232442, ""xz"", ""8p"");
		checkSearchYieldsCorrectBinaryHashes(47.157502, 47.329727, 179.062244, -179.859215, ""1111101010101111"", ""010100000000010100000"", ""010100000000010100010"");

		// Check duplicate handling
		checkSearchYieldsCorrectBinaryHashes(47.157502, 47.329727, 179.062244, 160, """");
		checkSearchYieldsCorrectBinaryHashes(47.157502, 47.329727, 179.062244, -1, ""01"", ""1111101010101111"");
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHashBoundingBoxSearchTest.java,checkSearchYieldsCorrectNumberOfHashes,"	private void checkSearchYieldsCorrectNumberOfHashes(double southLat, double northLat, double westLon, double eastLon) {
		GeoHashQuery search = new GeoHashBoundingBoxQuery(new BoundingBox(southLat, northLat, westLon, eastLon));
		assertRightNumberOfSearchHashes(search);
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHashBoundingBoxSearchTest.java,checkSearchYieldsCorrectHashes,"	private void checkSearchYieldsCorrectHashes(double southLat, double northLat, double westLon, double eastLon, String... hashes) {
		GeoHashQuery search = new GeoHashBoundingBoxQuery(new BoundingBox(southLat, northLat, westLon, eastLon));
		assertEquals(hashes.length, search.getSearchHashes().size());
		for (String expectedHash : hashes) {
			assertTrue(""search hashes should contain '"" + expectedHash + ""':'"" + GeoHash.fromGeohashString(expectedHash) + ""'. Saved hashes:\n "" + search, search.getSearchHashes().contains(GeoHash.fromGeohashString(expectedHash)));",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHashBoundingBoxSearchTest.java,checkSearchYieldsCorrectBinaryHashes,"	private void checkSearchYieldsCorrectBinaryHashes(double southLat, double northLat, double westLon, double eastLon, String... hashes) {
		GeoHashQuery search = new GeoHashBoundingBoxQuery(new BoundingBox(southLat, northLat, westLon, eastLon));
		assertEquals(hashes.length, search.getSearchHashes().size());
		for (String expectedHash : hashes) {
			assertTrue(""search hashes should contain '"" + expectedHash + ""':'"" + GeoHash.fromBinaryString(expectedHash) + ""'. Saved hashes:\n "" + search, search.getSearchHashes().contains(GeoHash.fromBinaryString(expectedHash)));",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHashBoundingBoxSearchTest.java,assertRightNumberOfSearchHashes,"	private void assertRightNumberOfSearchHashes(GeoHashQuery search) {
		int size = search.getSearchHashes().size();
		assertTrue(size <= 8 && size > 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHashCircleQueryTest.java,testIssue3WithCircleQuery,"	public void testIssue3WithCircleQuery() throws Exception {
		WGS84Point center = new WGS84Point(39.86391280373075, 116.37356590048701);
		GeoHashCircleQuery query = new GeoHashCircleQuery(center, 589);

		// the distance between center and test1 is about 430 meters
		WGS84Point test1 = new WGS84Point(39.8648866576058, 116.378465869303);
		// the distance between center and test2 is about 510 meters
		WGS84Point test2 = new WGS84Point(39.8664787092599, 116.378552856158);
		// the distance between center and test2 is about 600 meters
		WGS84Point test3 = new WGS84Point(39.8786787092599, 116.378552856158);

		assertTrue(query.contains(test1));
		assertTrue(query.contains(test2));
		assertFalse(query.contains(test3));
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
833706976c63927b2a12f1a91d842d3ee07ed615,GeoHashCircleQueryTest.java,test180MeridianCircleQuery,"	public void test180MeridianCircleQuery() throws Exception {
		// Test query over 180-Meridian
		WGS84Point center = new WGS84Point(39.86391280373075, 179.98356590048701);
		GeoHashCircleQuery query = new GeoHashCircleQuery(center, 3000);

		WGS84Point test1 = new WGS84Point(39.8648866576058, 180);
		WGS84Point test2 = new WGS84Point(39.8664787092599, -180);
		WGS84Point test3 = new WGS84Point(39.8686787092599, -179.9957861565146);
		WGS84Point test4 = new WGS84Point(39.8686787092599, 179.0057861565146);
		WGS84Point test5 = new WGS84Point(39.8686787092599, -179.0);

		assertTrue(query.contains(test1));
		assertTrue(query.contains(test2));
		assertTrue(query.contains(test3));
		assertFalse(query.contains(test4));
		assertFalse(query.contains(test5));
	}",https://www.github.com/kungfoo/geohash-java/commit/833706976c63927b2a12f1a91d842d3ee07ed615
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		if (numberOfCharacters > MAX_CHARACTER_PRECISION) {
			throw new IllegalArgumentException(""A geohash can only be "" + MAX_CHARACTER_PRECISION + "" character long."");
		}
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (numberOfBits > MAX_BIT_PRECISION) {
			throw new IllegalArgumentException(""A Geohash can only be "" + MAX_BIT_PRECISION + "" bits long!"");
		}
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0) {
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		}
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,fromBinaryString,"	public static GeoHash fromBinaryString(String binaryString) {
		GeoHash geohash = new GeoHash();
		for (int i = 0; i < binaryString.length(); i++) {
			if (binaryString.charAt(i) == '1') {
				geohash.addOnBitToEnd();
			} else if (binaryString.charAt(i) == '0') {
				geohash.addOffBitToEnd();
			} else {
				throw new IllegalArgumentException(binaryString + "" is not a valid geohash as a binary string"");
			}
		}
		geohash.bits <<= (MAX_BIT_PRECISION - geohash.significantBits);
		long[] latitudeBits = geohash.getRightAlignedLatitudeBits();
		long[] longitudeBits = geohash.getRightAlignedLongitudeBits();
		return geohash.recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (MAX_BIT_PRECISION - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,fromLongValue,"	public static GeoHash fromLongValue(long hashVal, int significantBits) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		String binaryString = Long.toBinaryString(hashVal);
		while (binaryString.length() < MAX_BIT_PRECISION) {
			binaryString = ""0"" + binaryString;
		}
		for (int j = 0; j < significantBits; j++) {
			if (isEvenBit) {
				divideRangeDecode(hash, longitudeRange, binaryString.charAt(j) != '0');
			} else {
				divideRangeDecode(hash, latitudeRange, binaryString.charAt(j) != '0');
			}
			isEvenBit = !isEvenBit;
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (MAX_BIT_PRECISION - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,geoHashStringWithCharacterPrecision,"	public static String geoHashStringWithCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		GeoHash hash = withCharacterPrecision(latitude, longitude, numberOfCharacters);
		return hash.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(latitudeRange[0], latitudeRange[1], longitudeRange[0], longitudeRange[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,next,"	public GeoHash next(int step) {
		return fromOrd(ord() + step, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,next,"	public GeoHash next() {
		return next(1);
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,prev,"	public GeoHash prev() {
		return next(-1);
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,ord,"	public long ord() {
		int insignificantBits = MAX_BIT_PRECISION - significantBits;
		return bits >>> insignificantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,getCharacterPrecision,"	public int getCharacterPrecision() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(
					""precision of GeoHash is not divisble by 5: "" + this);
		}
		return significantBits / 5;
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,fromOrd,"	public static GeoHash fromOrd(long ord, int significantBits) {
		int insignificantBits = MAX_BIT_PRECISION - significantBits;
		return fromLongValue(ord << insignificantBits, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,stepsBetween,"	public static long stepsBetween(GeoHash one, GeoHash two) {
		if (one.significantBits() != two.significantBits()) {
			throw new IllegalArgumentException(
					""It is only valid to compare the number of steps between two hashes if they have the same number of significant bits"");
		}
		return two.ord() - one.ord();
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern,",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,significantBits,"	public int significantBits() {
		return significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,longValue,"	public long longValue() {
		return bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,toBase32,"	public String toBase32() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(""Cannot convert a geohash to base32 if the precision is not a multiple of 5."");
		}
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,getPoint,"	public WGS84Point getPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,getBoundingBoxCenterPoint,"	public WGS84Point getBoundingBoxCenterPoint() {
		return boundingBox.getCenterPoint();
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (MAX_BIT_PRECISION - latBits[1]);
		lonBits[0] <<= (MAX_BIT_PRECISION - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (MAX_BIT_PRECISION - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.point = hash.boundingBox.getCenterPoint();
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", padLeft(Long.toBinaryString(bits), 64, ""0""), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,padLeft,"	private static String padLeft(String s, int n, String pad) {
		return String.format(""%"" + n + ""s"", s).replace("" "", pad);
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,toBinaryString,"	public String toBinaryString() {
		StringBuilder bui = new StringBuilder();
		long bitsCopy = bits;
		for (int i = 0; i < significantBits; i++) {
			if ((bitsCopy & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				bui.append('1');
			} else {
				bui.append('0');
			}
			bitsCopy <<= 1;
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,mask,"	private long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (MAX_BIT_PRECISION - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
01f89c904e4cea9dd14e91daf6cfb4562f9e10b5,GeoHash.java,compareTo,"	public int compareTo(GeoHash o) {
		int bitsCmp = Long.compare(bits ^ FIRST_BIT_FLAGGED, o.bits ^ FIRST_BIT_FLAGGED);
		if (bitsCmp != 0) {
			return bitsCmp;",https://www.github.com/kungfoo/geohash-java/commit/01f89c904e4cea9dd14e91daf6cfb4562f9e10b5
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,toBase32ShouldThrowWhenPrecisionIsNotAMultipleOf5,"	public void toBase32ShouldThrowWhenPrecisionIsNotAMultipleOf5() {
		hash.bits = 0x6ff0413000000000l;
		hash.significantBits = 24;
		hash.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			BoundingBox bbox = gh.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testToAndFromBinaryString,"	public void testToAndFromBinaryString() {
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			String binaryString = gh.toBinaryString();",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertWithin(hash, bbox);
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,assertWithin,"	private void assertWithin(GeoHash hash, GeoHash bbox) {
		assertTrue(hash + "" should be within "" + bbox, hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,itShouldCreateAHashWithMaximumPrecisionOf64Bits,"	public void itShouldCreateAHashWithMaximumPrecisionOf64Bits() {
		GeoHash.withBitPrecision(10.0, 10.0, 64);
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,itShouldThrowWhenTheBitPrecisionIsMoreThan64Bits,"	public void itShouldThrowWhenTheBitPrecisionIsMoreThan64Bits() {
		GeoHash.withBitPrecision(46.0, 8.0, 70);
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,itShouldThrowWhenTheCharacterPrecisionIsTooBig,"	public void itShouldThrowWhenTheCharacterPrecisionIsTooBig() {
		GeoHash.withCharacterPrecision(10.0, 120.0, 14);
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash + "" should NOT be within "" + bbox, hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");

		String geoHashString = GeoHash.geoHashStringWithCharacterPrecision(point.getLatitude(), point.getLongitude(), 12);
		assertEquals(fullStringValue, geoHashString);
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xd000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xc000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);
",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertEquals(start.getBoundingBox(), end.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testKnownNeighbouringHashes,"	public void testKnownNeighbouringHashes() {
		GeoHash h1 = GeoHash.fromGeohashString(""u1pb"");
		assertEquals(""u0zz"", h1.getSouthernNeighbour().toBase32());
		assertEquals(""u1pc"", h1.getNorthernNeighbour().toBase32());
		assertEquals(""u300"", h1.getEasternNeighbour().toBase32());
		assertEquals(""u302"", h1.getEasternNeighbour().getEasternNeighbour().toBase32());
		assertEquals(""u1p8"", h1.getWesternNeighbour().toBase32());

		assertEquals(""sp2j"", GeoHash.withCharacterPrecision(41.7, 0.08, 4).toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testKnownAdjacentNeighbours,"	public void testKnownAdjacentNeighbours() {
		String center = ""dqcjqc"";
		String[] adjacent = new String[] { ""dqcjqf"", ""dqcjqb"", ""dqcjr1"", ""dqcjq9"", ""dqcjqd"", ""dqcjr4"", ""dqcjr0"",
				""dqcjq8"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""u1x0dfg"";
		adjacent = new String[] { ""u1x0dg4"", ""u1x0dg5"", ""u1x0dgh"", ""u1x0dfu"", ""u1x0dfs"", ""u1x0dfe"", ""u1x0dfd"",
				""u1x0dff"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""sp2j"";
		adjacent = new String[] { ""ezry"", ""sp2n"", ""sp2q"", ""sp2m"", ""sp2k"", ""sp2h"", ""ezru"", ""ezrv"" };
		assertAdjacentHashesAre(center, adjacent);
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testThatAdjacentHashesHavePointInitialized,"	public void testThatAdjacentHashesHavePointInitialized() {
		String center = ""dqcjqc"";
		GeoHash geohash = GeoHash.fromGeohashString(center);
		GeoHash[] adjacentHashes = geohash.getAdjacent();
		for (GeoHash adjacentHash : adjacentHashes) {
			assertNotNull(adjacentHash.getBoundingBox());",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,assertAdjacentHashesAre,"	private void assertAdjacentHashesAre(String centerString, String[] adjacentStrings) {
		GeoHash center = GeoHash.fromGeohashString(centerString);
		GeoHash[] adjacent = center.getAdjacent();
		for (String check : adjacentStrings) {
			assertArrayContainsGeoHash(check, adjacent);",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,assertArrayContainsGeoHash,"	private void assertArrayContainsGeoHash(String check, GeoHash[] hashes) {
		boolean found = false;
		for (GeoHash hash : hashes) {
			if (hash.toBase32().equals(check)) {
				found = true;
				break;
			}
		}
		assertTrue(""Array should contain "" + check, found);
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testNeibouringHashesNearMeridian,"	public void testNeibouringHashesNearMeridian() {
		GeoHash hash = GeoHash.fromGeohashString(""sp2j"");
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(""ezrv"", west.toBase32());
		west = west.getWesternNeighbour();
		assertEquals(""ezrt"", west.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testSimpleWithin,"	public void testSimpleWithin() {
		GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
		GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
		assertWithin(inside, hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenterPoint());
		System.out.print(""corners="");
		System.out.println(hash.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testToLongAndBack,"	public void testToLongAndBack() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		long lv = hash.longValue();
		assertEquals(lv + (1 << (64 - hash.significantBits())), hash.next().longValue());
		GeoHash hashFromLong = GeoHash.fromLongValue(lv, hash.significantBits());
		assertEquals(""dr4jb0bn21"", hashFromLong.toBase32());
		assertEquals(hash, hashFromLong);
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testNext,"	public void testNext() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 10);
		GeoHash next = hash.next();
		assertTrue(hash.compareTo(next) < 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testNextPrev,"	public void testNextPrev() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 35);
		GeoHash next = hash.next(2);
		assertTrue(hash.compareTo(next) < 0);
		GeoHash prev1 = next.prev();
		GeoHash prev2 = prev1.next(-1);
		assertTrue(prev1.compareTo(next) < 0);
		System.out.println(""hash: "" + hash.toBase32());
		System.out.println(""next: "" + next.toBase32());
		System.out.println(""prev1: "" + prev1.toBase32());
		System.out.println(""prev2: "" + prev2.toBase32());

		assertTrue(prev2.compareTo(prev1) < 0);
		assertTrue(prev2.compareTo(hash) == 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testGetCharacterPrecisionThrows,"	public void testGetCharacterPrecisionThrows() throws Exception {
		GeoHash hash = GeoHash.withBitPrecision(37.7, -122.52, 32);
		hash.getCharacterPrecision();
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testGetCharacterPrecisionWorksWhenPrecisionIsMultipleOfFive,"	public void testGetCharacterPrecisionWorksWhenPrecisionIsMultipleOfFive() throws Exception {
		GeoHash hash = GeoHash.withBitPrecision(37.7, -122.52, 60);
		int precision = hash.getCharacterPrecision();
		assertEquals(precision, 12);
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testStepsBetween,"	public void testStepsBetween() {
		GeoHash bl = GeoHash.withBitPrecision(37.7, -122.52, 35);
		GeoHash ur = GeoHash.withBitPrecision(37.84, -122.35, 35);

		long steps = GeoHash.stepsBetween(bl, bl);
		assertEquals(steps, 0);

		steps = GeoHash.stepsBetween(bl, bl.next(4));
		assertEquals(steps, 4);

		BoundingBoxGeoHashIterator iter = new BoundingBoxGeoHashIterator(new TwoGeoHashBoundingBox(bl, ur));
		int count = 0;
		while (iter.hasNext()) {
			iter.next();
			count++;
		}
		assertEquals(12875, count);

		int allHashes = 0;
		int inBbox = 1;
		int latMore = 0;
		int lonMore = 0;
		int bothMore = 0;
		int latLess = 0;
		int lonLess = 0;
		int bothLess = 0;
		int latLessLonMore = 0;
		int latMoreLonLess = 0;
		GeoHash idx = bl;
		BoundingBox iterBbox = iter.getBoundingBox().getBoundingBox();
		while (idx.compareTo(ur) < 0) {
			idx = idx.next();
			allHashes++;
			if (iterBbox.contains(idx.getPoint())) {
				inBbox++;
			}
			boolean latIsMore = false;
			boolean latIsLess = false;
			if (idx.getPoint().getLatitude() > iterBbox.getNorthLatitude()) {
				latIsMore = true;
				latMore++;
			} else if (idx.getPoint().getLatitude() < iterBbox.getSouthLatitude()) {
				latIsLess = true;
				latLess++;
			}
			if (idx.getPoint().getLongitude() > iterBbox.getEastLongitude()) {
				lonMore++;
				if (latIsMore) {
					bothMore++;
				}
				if (latIsLess) {
					latLessLonMore++;
				}
			} else if (idx.getPoint().getLongitude() < iterBbox.getWestLongitude()) {
				lonLess++;
				if (latIsLess) {
					bothLess++;
				}
				if (latIsMore) {
					latMoreLonLess++;
				}
			}
		}

		// Just trying to understand where these GeoHashes are with regard to
		// their bounding box.
		steps = GeoHash.stepsBetween(bl, ur);
		assertEquals(48472, steps);
		assertEquals(steps, allHashes);
		assertEquals(count, inBbox);
		assertEquals(14938, latMore);
		assertEquals(640, lonMore);
		assertEquals(0, bothMore);
		assertEquals(7680, latLess);
		assertEquals(24391, lonLess);
		assertEquals(0, bothLess);
		assertEquals(240, latLessLonMore);
		assertEquals(11811, latMoreLonLess);
		assertEquals(steps, lonLess + latLess + latMore + lonMore + inBbox - latLessLonMore - latMoreLonLess - 1);
",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testCompareTo,"	public void testCompareTo() {
		GeoHash prevHash = null;
		for (int i = 0; i < 10000; i++) {
			GeoHash hash = RandomGeohashes.createWith5BitsPrecision();",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testOrdIsPositive,"	public void testOrdIsPositive() {
		double lat = 40.390943;
		double lon = 75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);
		assertEquals(0xcf6915015410500l, hash.ord());
		assertTrue(hash.ord() >= 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
d4f95b5d8f169c29565bb01f31e169b160a7093f,GeoHashTest.java,testSecondCaseWhereOrdMustBePositive,"	public void testSecondCaseWhereOrdMustBePositive() {
		GeoHash hash = GeoHash.withCharacterPrecision(-36.919550434870125,174.71024582237604,7);
		assertTrue(hash.ord() > 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/d4f95b5d8f169c29565bb01f31e169b160a7093f
18cd11d673633c33261526656411d50220970579,GeoHashCircleQuery.java,contains,"	public boolean contains(GeoHash hash) {
		return query.contains(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/18cd11d673633c33261526656411d50220970579
18cd11d673633c33261526656411d50220970579,GeoHashCircleQuery.java,getWktBox,"	public String getWktBox() {
		return query.getWktBox();
	}",https://www.github.com/kungfoo/geohash-java/commit/18cd11d673633c33261526656411d50220970579
18cd11d673633c33261526656411d50220970579,GeoHashCircleQuery.java,getSearchHashes,"	public List<GeoHash> getSearchHashes() {
		return query.getSearchHashes();
	}",https://www.github.com/kungfoo/geohash-java/commit/18cd11d673633c33261526656411d50220970579
18cd11d673633c33261526656411d50220970579,GeoHashCircleQuery.java,toString,"	public String toString() {
		return ""Cicle Query [center="" + center + "", radius="" + getRadiusString() + ""]"";
	}",https://www.github.com/kungfoo/geohash-java/commit/18cd11d673633c33261526656411d50220970579
18cd11d673633c33261526656411d50220970579,GeoHashCircleQuery.java,getRadiusString,"	private String getRadiusString() {
		if (radius > 1000) {
			return radius / 1000 + ""km"";",https://www.github.com/kungfoo/geohash-java/commit/18cd11d673633c33261526656411d50220970579
18cd11d673633c33261526656411d50220970579,GeoHashCircleQuery.java,contains,"	public boolean contains(WGS84Point point) {
		return query.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/18cd11d673633c33261526656411d50220970579
5a56166721c2b7c0238954938357b2535741110e,GeoHashSizeTableTest.java,testDLat,"	public void testDLat() {
		assertDLatIs(180d, 0);
		assertDLatIs(180d, 1);
		assertDLatIs(90d, 2);
		assertDLatIs(0.3515625, 18);
		assertDLatIs(0.3515625, 19);
	}",https://www.github.com/kungfoo/geohash-java/commit/5a56166721c2b7c0238954938357b2535741110e
5a56166721c2b7c0238954938357b2535741110e,GeoHashSizeTableTest.java,assertDLatIs,"	private void assertDLatIs(double d, int i) {
		assertEquals(d, GeoHashSizeTable.dLat(i), 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/5a56166721c2b7c0238954938357b2535741110e
5a56166721c2b7c0238954938357b2535741110e,GeoHashSizeTableTest.java,testDLon,"	public void testDLon() {
		assertDLonIs(360, 0);
		assertDLonIs(180, 1);
		assertDLonIs(0.0439453125, 25);
		assertDLonIs(0.0439453125, 26);
	}",https://www.github.com/kungfoo/geohash-java/commit/5a56166721c2b7c0238954938357b2535741110e
5a56166721c2b7c0238954938357b2535741110e,GeoHashSizeTableTest.java,assertDLonIs,"	private void assertDLonIs(double d, int i) {
		assertEquals(d, GeoHashSizeTable.dLon(i), 1 - 128);
	}",https://www.github.com/kungfoo/geohash-java/commit/5a56166721c2b7c0238954938357b2535741110e
5a56166721c2b7c0238954938357b2535741110e,GeoHashSizeTableTest.java,generate,"		public BoundingBox generate(int bits);

		/**
		 * return the number of expected bits.
		 */
		public int getExpectedBits(int bits);
	}

	/**
	 * the entire box is a little too small, thus it must fit nicely into the
	 * hash.
	 */
	private static class ALittleTooSmallVerifier implements BoundingBoxSizeTableVerifier {
		public ALittleTooSmallVerifier() {
		}

		@Override
		public BoundingBox generate(int bits) {
			// make the bounding box a little smaller than dLat/dLon
			double dLat = GeoHashSizeTable.dLat(bits) - DELTA;
			double dLon = GeoHashSizeTable.dLon(bits) - DELTA;
			return new BoundingBox(45 - dLat, 45, 30 - dLon, 30);
		}

		@Override
		public int getExpectedBits(int bits) {
			return bits;
		}
	}

	/**
	 * if both lat and lon are a little too large, we must use a bigger hash,
	 * i.e. less bits.
	 */
	private static class BothALittleTooLargeVerifier implements BoundingBoxSizeTableVerifier {
		public BothALittleTooLargeVerifier() {
		}

		@Override
		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);
			return new BoundingBox(0, dLat + DELTA, 0, dLon + DELTA);
		}

		@Override
		public int getExpectedBits(int bits) {
			return bits - 2;
		}
	}

	/**
	 * depending on whether we're currently at an even or odd nuber of bits, one
	 * or two bits have to be removed.
	 */
	private static class OnlyOneALittleTooLargeVerifier implements BoundingBoxSizeTableVerifier {
		public OnlyOneALittleTooLargeVerifier() {
		}

		private Random rand = new Random();
		private boolean latitudeAffected;

		@Override
		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);

			if (latitudeAffected = rand.nextBoolean()) {
				dLat += DELTA;
			} else {
				dLon += DELTA;
			}
			return new BoundingBox(0, dLat, 0, dLon);
		}

		@Override
		public int getExpectedBits(int bits) {
			if (latitudeAffected) {
				if (bits % 2 != 0) {
					return bits - 2;
				} else {
					return bits - 1;
				}
			} else {
				if (bits % 2 != 0) {
					return bits - 1;
				} else {
					return bits - 2;
				}
			}
		}
	}

	@Test
	public void testKnownSmallerBoundingBoxSizes() {
		checkWithGenerator(new ALittleTooSmallVerifier());
	}

	@Test
	public void testKnownLargerBoundingBoxSizes() {
		checkWithGenerator(new BothALittleTooLargeVerifier());
	}

	@Test
	public void testKnownOneBitLargerBoxSizes() {
		checkWithGenerator(new OnlyOneALittleTooLargeVerifier());
	}

	private void checkWithGenerator(BoundingBoxSizeTableVerifier generator) {
		for (int bits = 4; bits < 64; bits++) {
			BoundingBox bbox = generator.generate(bits);
			assertEquals(generator.getExpectedBits(bits), GeoHashSizeTable.numberOfBitsForOverlappingGeoHash(bbox));
		}
	}
}",https://www.github.com/kungfoo/geohash-java/commit/5a56166721c2b7c0238954938357b2535741110e
5a56166721c2b7c0238954938357b2535741110e,GeoHashSizeTableTest.java,getExpectedBits,"		public int getExpectedBits(int bits);
	}

	/**
	 * the entire box is a little too small, thus it must fit nicely into the
	 * hash.
	 */
	private static class ALittleTooSmallVerifier implements BoundingBoxSizeTableVerifier {
		public ALittleTooSmallVerifier() {
		}

		@Override
		public BoundingBox generate(int bits) {
			// make the bounding box a little smaller than dLat/dLon
			double dLat = GeoHashSizeTable.dLat(bits) - DELTA;
			double dLon = GeoHashSizeTable.dLon(bits) - DELTA;
			return new BoundingBox(45 - dLat, 45, 30 - dLon, 30);
		}

		@Override
		public int getExpectedBits(int bits) {
			return bits;
		}
	}

	/**
	 * if both lat and lon are a little too large, we must use a bigger hash,
	 * i.e. less bits.
	 */
	private static class BothALittleTooLargeVerifier implements BoundingBoxSizeTableVerifier {
		public BothALittleTooLargeVerifier() {
		}

		@Override
		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);
			return new BoundingBox(0, dLat + DELTA, 0, dLon + DELTA);
		}

		@Override
		public int getExpectedBits(int bits) {
			return bits - 2;
		}
	}

	/**
	 * depending on whether we're currently at an even or odd nuber of bits, one
	 * or two bits have to be removed.
	 */
	private static class OnlyOneALittleTooLargeVerifier implements BoundingBoxSizeTableVerifier {
		public OnlyOneALittleTooLargeVerifier() {
		}

		private Random rand = new Random();
		private boolean latitudeAffected;

		@Override
		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);

			if (latitudeAffected = rand.nextBoolean()) {
				dLat += DELTA;
			} else {
				dLon += DELTA;
			}
			return new BoundingBox(0, dLat, 0, dLon);
		}

		@Override
		public int getExpectedBits(int bits) {
			if (latitudeAffected) {
				if (bits % 2 != 0) {
					return bits - 2;
				} else {
					return bits - 1;
				}
			} else {
				if (bits % 2 != 0) {
					return bits - 1;
				} else {
					return bits - 2;
				}
			}
		}
	}

	@Test
	public void testKnownSmallerBoundingBoxSizes() {
		checkWithGenerator(new ALittleTooSmallVerifier());
	}

	@Test
	public void testKnownLargerBoundingBoxSizes() {
		checkWithGenerator(new BothALittleTooLargeVerifier());
	}

	@Test
	public void testKnownOneBitLargerBoxSizes() {
		checkWithGenerator(new OnlyOneALittleTooLargeVerifier());
	}

	private void checkWithGenerator(BoundingBoxSizeTableVerifier generator) {
		for (int bits = 4; bits < 64; bits++) {
			BoundingBox bbox = generator.generate(bits);
			assertEquals(generator.getExpectedBits(bits), GeoHashSizeTable.numberOfBitsForOverlappingGeoHash(bbox));
		}
	}
}",https://www.github.com/kungfoo/geohash-java/commit/5a56166721c2b7c0238954938357b2535741110e
5a56166721c2b7c0238954938357b2535741110e,GeoHashSizeTableTest.java,generate,"		public BoundingBox generate(int bits) {
			// make the bounding box a little smaller than dLat/dLon
			double dLat = GeoHashSizeTable.dLat(bits) - DELTA;
			double dLon = GeoHashSizeTable.dLon(bits) - DELTA;
			return new BoundingBox(45 - dLat, 45, 30 - dLon, 30);
		}",https://www.github.com/kungfoo/geohash-java/commit/5a56166721c2b7c0238954938357b2535741110e
5a56166721c2b7c0238954938357b2535741110e,GeoHashSizeTableTest.java,getExpectedBits,"		public int getExpectedBits(int bits) {
			return bits;
		}",https://www.github.com/kungfoo/geohash-java/commit/5a56166721c2b7c0238954938357b2535741110e
5a56166721c2b7c0238954938357b2535741110e,GeoHashSizeTableTest.java,generate,"		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);
			return new BoundingBox(0, dLat + DELTA, 0, dLon + DELTA);
		}",https://www.github.com/kungfoo/geohash-java/commit/5a56166721c2b7c0238954938357b2535741110e
5a56166721c2b7c0238954938357b2535741110e,GeoHashSizeTableTest.java,getExpectedBits,"		public int getExpectedBits(int bits) {
			return bits - 2;
		}",https://www.github.com/kungfoo/geohash-java/commit/5a56166721c2b7c0238954938357b2535741110e
5a56166721c2b7c0238954938357b2535741110e,GeoHashSizeTableTest.java,generate,"		public BoundingBox generate(int bits) {
			double dLat = GeoHashSizeTable.dLat(bits);
			double dLon = GeoHashSizeTable.dLon(bits);

			if (latitudeAffected = rand.nextBoolean()) {
				dLat += DELTA;
			} else {
				dLon += DELTA;
			}
			return new BoundingBox(0, dLat, 0, dLon);
		}",https://www.github.com/kungfoo/geohash-java/commit/5a56166721c2b7c0238954938357b2535741110e
5a56166721c2b7c0238954938357b2535741110e,GeoHashSizeTableTest.java,getExpectedBits,"		public int getExpectedBits(int bits) {
			if (latitudeAffected) {
				if (bits % 2 != 0) {",https://www.github.com/kungfoo/geohash-java/commit/5a56166721c2b7c0238954938357b2535741110e
5a56166721c2b7c0238954938357b2535741110e,GeoHashSizeTableTest.java,testKnownSmallerBoundingBoxSizes,"	public void testKnownSmallerBoundingBoxSizes() {
		checkWithGenerator(new ALittleTooSmallVerifier());
	}",https://www.github.com/kungfoo/geohash-java/commit/5a56166721c2b7c0238954938357b2535741110e
5a56166721c2b7c0238954938357b2535741110e,GeoHashSizeTableTest.java,testKnownLargerBoundingBoxSizes,"	public void testKnownLargerBoundingBoxSizes() {
		checkWithGenerator(new BothALittleTooLargeVerifier());
	}",https://www.github.com/kungfoo/geohash-java/commit/5a56166721c2b7c0238954938357b2535741110e
5a56166721c2b7c0238954938357b2535741110e,GeoHashSizeTableTest.java,testKnownOneBitLargerBoxSizes,"	public void testKnownOneBitLargerBoxSizes() {
		checkWithGenerator(new OnlyOneALittleTooLargeVerifier());
	}",https://www.github.com/kungfoo/geohash-java/commit/5a56166721c2b7c0238954938357b2535741110e
5a56166721c2b7c0238954938357b2535741110e,GeoHashSizeTableTest.java,checkWithGenerator,"	private void checkWithGenerator(BoundingBoxSizeTableVerifier generator) {
		for (int bits = 4; bits < 64; bits++) {
			BoundingBox bbox = generator.generate(bits);",https://www.github.com/kungfoo/geohash-java/commit/5a56166721c2b7c0238954938357b2535741110e
3d67eb53b8a937240d0e875561dde95e6f350752,BoundingBoxGeoHashIterator.java,getBoundingBox,"	public TwoGeoHashBoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/3d67eb53b8a937240d0e875561dde95e6f350752
3d67eb53b8a937240d0e875561dde95e6f350752,BoundingBoxGeoHashIterator.java,hasNext,"	public boolean hasNext() {
		return current.compareTo(boundingBox.getNorthEast()) <= 0;
	}",https://www.github.com/kungfoo/geohash-java/commit/3d67eb53b8a937240d0e875561dde95e6f350752
3d67eb53b8a937240d0e875561dde95e6f350752,BoundingBoxGeoHashIterator.java,next,"	public GeoHash next() {
		GeoHash rv = current;
		if (!hasNext()) {
			throw new NoSuchElementException();
		}
		current = rv.next();
		while (hasNext() && !boundingBox.getBoundingBox().contains(current.getPoint())) {
			current = current.next();
		}
		return rv;
	}",https://www.github.com/kungfoo/geohash-java/commit/3d67eb53b8a937240d0e875561dde95e6f350752
3d67eb53b8a937240d0e875561dde95e6f350752,BoundingBoxGeoHashIterator.java,remove,"	public void remove() {
		throw new UnsupportedOperationException();
	}",https://www.github.com/kungfoo/geohash-java/commit/3d67eb53b8a937240d0e875561dde95e6f350752
3d67eb53b8a937240d0e875561dde95e6f350752,BoundingBoxSampler.java,getBoundingBox,"	public TwoGeoHashBoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/3d67eb53b8a937240d0e875561dde95e6f350752
3d67eb53b8a937240d0e875561dde95e6f350752,BoundingBoxSampler.java,next,"	public GeoHash next() {
		if (alreadyUsed.size() == maxSamples) {
			return null;
		}
		int idx = rand.nextInt(maxSamples + 1);
		while (alreadyUsed.contains(idx)) {
			idx = rand.nextInt(maxSamples + 1);
		}
		alreadyUsed.add(idx);
		GeoHash gh = boundingBox.getSouthWest().next(idx);
		if (!boundingBox.getBoundingBox().contains(gh.getPoint())) {
			return next();
		}
		return gh;
	}",https://www.github.com/kungfoo/geohash-java/commit/3d67eb53b8a937240d0e875561dde95e6f350752
3d67eb53b8a937240d0e875561dde95e6f350752,TwoGeoHashBoundingBox.java,withCharacterPrecision,"    public static TwoGeoHashBoundingBox withCharacterPrecision(BoundingBox bbox, int numberOfCharacters) {
        GeoHash southWest = GeoHash.withCharacterPrecision(bbox.getSouthLatitude(), bbox.getWestLongitude(), numberOfCharacters);
        GeoHash northEast = GeoHash.withCharacterPrecision(bbox.getNorthLatitude(), bbox.getEastLongitude(), numberOfCharacters);
        return new TwoGeoHashBoundingBox(southWest, northEast);
    }",https://www.github.com/kungfoo/geohash-java/commit/3d67eb53b8a937240d0e875561dde95e6f350752
3d67eb53b8a937240d0e875561dde95e6f350752,TwoGeoHashBoundingBox.java,withBitPrecision,"    public static TwoGeoHashBoundingBox withBitPrecision(BoundingBox bbox, int numberOfBits) {
        GeoHash southWest = GeoHash.withBitPrecision(bbox.getSouthLatitude(), bbox.getWestLongitude(), numberOfBits);
        GeoHash northEast = GeoHash.withBitPrecision(bbox.getNorthLatitude(), bbox.getEastLongitude(), numberOfBits);
        return new TwoGeoHashBoundingBox(southWest, northEast);
    }",https://www.github.com/kungfoo/geohash-java/commit/3d67eb53b8a937240d0e875561dde95e6f350752
3d67eb53b8a937240d0e875561dde95e6f350752,TwoGeoHashBoundingBox.java,fromBase32,"    public static TwoGeoHashBoundingBox fromBase32(String base32) {
        String southWestBase32 = base32.substring(0, 7);
        String northEastBase32 = base32.substring(7);
        return new TwoGeoHashBoundingBox(GeoHash.fromGeohashString(southWestBase32), GeoHash.fromGeohashString(northEastBase32));
    }",https://www.github.com/kungfoo/geohash-java/commit/3d67eb53b8a937240d0e875561dde95e6f350752
3d67eb53b8a937240d0e875561dde95e6f350752,TwoGeoHashBoundingBox.java,getBoundingBox,"    public BoundingBox getBoundingBox() {
        return boundingBox;
    }",https://www.github.com/kungfoo/geohash-java/commit/3d67eb53b8a937240d0e875561dde95e6f350752
3d67eb53b8a937240d0e875561dde95e6f350752,TwoGeoHashBoundingBox.java,getSouthWest,"    public GeoHash getSouthWest() {
        return southWest;
    }",https://www.github.com/kungfoo/geohash-java/commit/3d67eb53b8a937240d0e875561dde95e6f350752
3d67eb53b8a937240d0e875561dde95e6f350752,TwoGeoHashBoundingBox.java,getNorthEast,"    public GeoHash getNorthEast() {
        return northEast;
    }",https://www.github.com/kungfoo/geohash-java/commit/3d67eb53b8a937240d0e875561dde95e6f350752
3d67eb53b8a937240d0e875561dde95e6f350752,TwoGeoHashBoundingBox.java,toBase32,"    public String toBase32() {
        return southWest.toBase32() + northEast.toBase32();
    }",https://www.github.com/kungfoo/geohash-java/commit/3d67eb53b8a937240d0e875561dde95e6f350752
efbc6d6c141b1706edb438853ec55c3e8342ec01,TwoGeoHashBoundingBox.java,withCharacterPrecision,"    public static TwoGeoHashBoundingBox withCharacterPrecision(BoundingBox bbox, int numberOfCharacters) {
        GeoHash southWest = GeoHash.withCharacterPrecision(bbox.getSouthLatitude(), bbox.getWestLongitude(), numberOfCharacters);
        GeoHash northEast = GeoHash.withCharacterPrecision(bbox.getNorthLatitude(), bbox.getEastLongitude(), numberOfCharacters);
        return new TwoGeoHashBoundingBox(southWest, northEast);
    }",https://www.github.com/kungfoo/geohash-java/commit/efbc6d6c141b1706edb438853ec55c3e8342ec01
efbc6d6c141b1706edb438853ec55c3e8342ec01,TwoGeoHashBoundingBox.java,withBitPrecision,"    public static TwoGeoHashBoundingBox withBitPrecision(BoundingBox bbox, int numberOfBits) {
        GeoHash southWest = GeoHash.withBitPrecision(bbox.getSouthLatitude(), bbox.getWestLongitude(), numberOfBits);
        GeoHash northEast = GeoHash.withBitPrecision(bbox.getNorthLatitude(), bbox.getEastLongitude(), numberOfBits);
        return new TwoGeoHashBoundingBox(southWest, northEast);
    }",https://www.github.com/kungfoo/geohash-java/commit/efbc6d6c141b1706edb438853ec55c3e8342ec01
efbc6d6c141b1706edb438853ec55c3e8342ec01,TwoGeoHashBoundingBox.java,getBoundingBox,"    public BoundingBox getBoundingBox() {
        return boundingBox;
    }",https://www.github.com/kungfoo/geohash-java/commit/efbc6d6c141b1706edb438853ec55c3e8342ec01
efbc6d6c141b1706edb438853ec55c3e8342ec01,TwoGeoHashBoundingBox.java,getSouthWest,"    public GeoHash getSouthWest() {
        return southWest;
    }",https://www.github.com/kungfoo/geohash-java/commit/efbc6d6c141b1706edb438853ec55c3e8342ec01
efbc6d6c141b1706edb438853ec55c3e8342ec01,TwoGeoHashBoundingBox.java,getNorthEast,"    public GeoHash getNorthEast() {
        return northEast;
    }",https://www.github.com/kungfoo/geohash-java/commit/efbc6d6c141b1706edb438853ec55c3e8342ec01
efbc6d6c141b1706edb438853ec55c3e8342ec01,TwoGeoHashBoundingBox.java,toBase32,"    public String toBase32() {
        return southWest.toBase32() + northEast.toBase32();
    }",https://www.github.com/kungfoo/geohash-java/commit/efbc6d6c141b1706edb438853ec55c3e8342ec01
d6e4854361abeab2166cad8f6df6e342d1e3a599,BoundingBox.java,getNorthWestCorner,"	public WGS84Point getNorthWestCorner() {
		return new WGS84Point(northLatitude, westLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,BoundingBox.java,getNorthEastCorner,"	public WGS84Point getNorthEastCorner() {
		return new WGS84Point(northLatitude, eastLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,BoundingBox.java,getSouthEastCorner,"	public WGS84Point getSouthEastCorner() {
		return new WGS84Point(southLatitude, eastLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,BoundingBox.java,getSouthWestCorner,"	public WGS84Point getSouthWestCorner() {
		return new WGS84Point(southLatitude, westLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,BoundingBox.java,getLatitudeSize,"	public double getLatitudeSize() {
		return northLatitude - southLatitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,BoundingBox.java,getLongitudeSize,"	public double getLongitudeSize() {
		if (eastLongitude == 180.0 && westLongitude == -180.0)
			return 360.0;
		double size = (eastLongitude - westLongitude) % 360;

		// Remainder fix for earlier java versions
		if (size < 0)
			size += 360.0;
		return size;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,BoundingBox.java,equals,"	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj instanceof BoundingBox) {
			BoundingBox that = (BoundingBox) obj;",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,BoundingBox.java,hashCode,"	public int hashCode() {
		int result = 17;
		result = 37 * result + hashCode(southLatitude);
		result = 37 * result + hashCode(northLatitude);
		result = 37 * result + hashCode(westLongitude);
		result = 37 * result + hashCode(eastLongitude);
		return result;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,BoundingBox.java,hashCode,"	private static int hashCode(double x) {
		long f = Double.doubleToLongBits(x);
		return (int) (f ^ (f >>> 32));
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,BoundingBox.java,contains,"	public boolean contains(WGS84Point point) {
		return containsLatitude(point.getLatitude()) && containsLongitude(point.getLongitude());
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,BoundingBox.java,intersects,"	public boolean intersects(BoundingBox other) {
		// Check latitude first cause it's the same for all cases
		if (other.southLatitude > northLatitude || other.northLatitude < southLatitude) {
			return false;",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,BoundingBox.java,toString,"	public String toString() {
		return getNorthWestCorner() + "" -> "" + getSouthEastCorner();
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,BoundingBox.java,getCenter,"	public WGS84Point getCenter() {
		double centerLatitude = (southLatitude + northLatitude) / 2;
		double centerLongitude = (westLongitude + eastLongitude) / 2;

		// This can happen if the bBox crosses the 180-Meridian
		if (centerLongitude > 180)
			centerLongitude -= 360;

		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,BoundingBox.java,expandToInclude,"	public void expandToInclude(BoundingBox other) {

		// Expand Latitude
		if (other.southLatitude < southLatitude) {
			southLatitude = other.southLatitude;
		}
		if (other.northLatitude > northLatitude) {
			northLatitude = other.northLatitude;
		}

		// Expand Longitude
		// At first check whether the two boxes contain each other or not
		boolean thisContainsOther = containsLongitude(other.eastLongitude) && containsLongitude(other.westLongitude);
		boolean otherContainsThis = other.containsLongitude(eastLongitude) && other.containsLongitude(westLongitude);

		// The new box needs to span the whole globe
		if (thisContainsOther && otherContainsThis) {
			eastLongitude = 180.0;
			westLongitude = -180.0;
			intersects180Meridian = false;
			return;
		}
		// Already done in this case
		if (thisContainsOther)
			return;
		// Expand to match the bigger box
		if (otherContainsThis) {
			eastLongitude = other.eastLongitude;
			westLongitude = other.westLongitude;
			intersects180Meridian = eastLongitude < westLongitude;
			return;
		}

		// If this is not the case compute the distance between the endpoints in east direction
		double distanceEastToOtherEast = (other.eastLongitude - eastLongitude) % 360;
		double distanceOtherWestToWest = (westLongitude - other.westLongitude) % 360;

		// Fix for lower java versions, since the remainder-operator (%) changed in one version, idk which one
		if (distanceEastToOtherEast < 0)
			distanceEastToOtherEast += 360;
		if (distanceOtherWestToWest < 0)
			distanceOtherWestToWest += 360;

		// The minimal distance needs to be extended
		if (distanceEastToOtherEast <= distanceOtherWestToWest) {
			eastLongitude = other.eastLongitude;
		} else {
			westLongitude = other.westLongitude;
		}

		intersects180Meridian = eastLongitude < westLongitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,BoundingBox.java,containsLatitude,"	private boolean containsLatitude(double latitude) {
		return latitude >= southLatitude && latitude <= northLatitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,BoundingBox.java,containsLongitude,"	private boolean containsLongitude(double longitude) {
		if (intersects180Meridian) {
			return longitude <= eastLongitude || longitude >= westLongitude;",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,BoundingBox.java,getEastLongitude,"	public double getEastLongitude() {
		return eastLongitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,BoundingBox.java,getWestLongitude,"	public double getWestLongitude() {
		return westLongitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,BoundingBox.java,getNorthLatitude,"	public double getNorthLatitude() {
		return northLatitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,BoundingBox.java,getSouthLatitude,"	public double getSouthLatitude() {
		return southLatitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,BoundingBox.java,intersects180Meridian,"	public boolean intersects180Meridian() {
		return intersects180Meridian;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		if (numberOfCharacters > MAX_CHARACTER_PRECISION) {
			throw new IllegalArgumentException(""A geohash can only be "" + MAX_CHARACTER_PRECISION + "" character long."");
		}
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (numberOfBits > MAX_BIT_PRECISION) {
			throw new IllegalArgumentException(""A Geohash can only be "" + MAX_BIT_PRECISION + "" bits long!"");
		}
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0) {
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		}
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,fromBinaryString,"	public static GeoHash fromBinaryString(String binaryString) {
		GeoHash geohash = new GeoHash();
		for (int i = 0; i < binaryString.length(); i++) {
			if (binaryString.charAt(i) == '1') {
				geohash.addOnBitToEnd();
			} else if (binaryString.charAt(i) == '0') {
				geohash.addOffBitToEnd();
			} else {
				throw new IllegalArgumentException(binaryString + "" is not a valid geohash as a binary string"");
			}
		}
		geohash.bits <<= (MAX_BIT_PRECISION - geohash.significantBits);
		long[] latitudeBits = geohash.getRightAlignedLatitudeBits();
		long[] longitudeBits = geohash.getRightAlignedLongitudeBits();
		return geohash.recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (MAX_BIT_PRECISION - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,fromLongValue,"	public static GeoHash fromLongValue(long hashVal, int significantBits) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		String binaryString = Long.toBinaryString(hashVal);
		while (binaryString.length() < MAX_BIT_PRECISION) {
			binaryString = ""0"" + binaryString;
		}
		for (int j = 0; j < significantBits; j++) {
			if (isEvenBit) {
				divideRangeDecode(hash, longitudeRange, binaryString.charAt(j) != '0');
			} else {
				divideRangeDecode(hash, latitudeRange, binaryString.charAt(j) != '0');
			}
			isEvenBit = !isEvenBit;
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (MAX_BIT_PRECISION - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,geoHashStringWithCharacterPrecision,"	public static String geoHashStringWithCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		GeoHash hash = withCharacterPrecision(latitude, longitude, numberOfCharacters);
		return hash.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(latitudeRange[0], latitudeRange[1], longitudeRange[0], longitudeRange[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,next,"	public GeoHash next(int step) {
		return fromOrd(ord() + step, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,next,"	public GeoHash next() {
		return next(1);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,prev,"	public GeoHash prev() {
		return next(-1);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,ord,"	public long ord() {
		int insignificantBits = MAX_BIT_PRECISION - significantBits;
		return bits >>> insignificantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,getCharacterPrecision,"	public int getCharacterPrecision() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(
					""precision of GeoHash is not divisble by 5: "" + this);
		}
		return significantBits / 5;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,fromOrd,"	public static GeoHash fromOrd(long ord, int significantBits) {
		int insignificantBits = MAX_BIT_PRECISION - significantBits;
		return fromLongValue(ord << insignificantBits, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,stepsBetween,"	public static long stepsBetween(GeoHash one, GeoHash two) {
		if (one.significantBits() != two.significantBits()) {
			throw new IllegalArgumentException(
					""It is only valid to compare the number of steps between two hashes if they have the same number of significant bits"");
		}
		return two.ord() - one.ord();
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern,",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,significantBits,"	public int significantBits() {
		return significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,longValue,"	public long longValue() {
		return bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,toBase32,"	public String toBase32() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(""Cannot convert a geohash to base32 if the precision is not a multiple of 5."");
		}
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,getOriginatingPoint,"	public WGS84Point getOriginatingPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,getBoundingBoxCenter,"	public WGS84Point getBoundingBoxCenter() {
		return boundingBox.getCenter();
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (MAX_BIT_PRECISION - latBits[1]);
		lonBits[0] <<= (MAX_BIT_PRECISION - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (MAX_BIT_PRECISION - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.point = hash.boundingBox.getCenter();
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", padLeft(Long.toBinaryString(bits), 64, ""0""), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,padLeft,"	private static String padLeft(String s, int n, String pad) {
		return String.format(""%"" + n + ""s"", s).replace("" "", pad);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,toBinaryString,"	public String toBinaryString() {
		StringBuilder bui = new StringBuilder();
		long bitsCopy = bits;
		for (int i = 0; i < significantBits; i++) {
			if ((bitsCopy & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				bui.append('1');
			} else {
				bui.append('0');
			}
			bitsCopy <<= 1;
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,mask,"	private long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (MAX_BIT_PRECISION - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHash.java,compareTo,"	public int compareTo(GeoHash o) {
		int bitsCmp = Long.compare(bits ^ FIRST_BIT_FLAGGED, o.bits ^ FIRST_BIT_FLAGGED);
		if (bitsCmp != 0) {
			return bitsCmp;",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashBoundingBoxQuery.java,generateSearchHashes,"	private void generateSearchHashes(BoundingBox bbox) {
		int fittingBits = GeoHashSizeTable.numberOfBitsForOverlappingGeoHash(bbox);
		WGS84Point center = bbox.getCenter();
		GeoHash centerHash = GeoHash.withBitPrecision(center.getLatitude(), center.getLongitude(), fittingBits);

		if (hashContainsBoundingBox(centerHash, bbox)) {
			// If the centerHash completly fits into the provided bounding box, just add the hash and continue",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashBoundingBoxQuery.java,expandSearch,"	private void expandSearch(GeoHash centerHash, BoundingBox bbox) {
		searchHashes.add(centerHash);

		for (GeoHash adjacent : centerHash.getAdjacent()) {
			BoundingBox adjacentBox = adjacent.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashBoundingBoxQuery.java,hashContainsBoundingBox,"	private boolean hashContainsBoundingBox(GeoHash hash, BoundingBox bbox) {
		return hash.contains(bbox.getNorthWestCorner()) && hash.contains(bbox.getSouthEastCorner());
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashBoundingBoxQuery.java,contains,"	public boolean contains(GeoHash hash) {
		for (GeoHash searchHash : searchHashes) {
			if (hash.within(searchHash)) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashBoundingBoxQuery.java,contains,"	public boolean contains(WGS84Point point) {
		return contains(GeoHash.withBitPrecision(point.getLatitude(), point.getLongitude(), 64));
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashBoundingBoxQuery.java,getSearchHashes,"	public List<GeoHash> getSearchHashes() {
		return searchHashes;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashBoundingBoxQuery.java,toString,"	public String toString() {
		StringBuilder bui = new StringBuilder();
		for (GeoHash hash : searchHashes) {
			bui.append(hash).append(""\n"");
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashBoundingBoxQuery.java,getWktBox,"	public String getWktBox() {
		return ""BOX("" + boundingBox.getWestLongitude() + "" "" + boundingBox.getSouthLatitude() + "","" + boundingBox.getEastLongitude() + "" "" + boundingBox.getNorthLatitude() + "")"";
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashCircleQuery.java,contains,"	public boolean contains(GeoHash hash) {
		return query.contains(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashCircleQuery.java,getWktBox,"	public String getWktBox() {
		return query.getWktBox();
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashCircleQuery.java,getSearchHashes,"	public List<GeoHash> getSearchHashes() {
		return query.getSearchHashes();
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashCircleQuery.java,toString,"	public String toString() {
		return ""Cicle Query [center="" + center + "", radius="" + getRadiusString() + ""]"";
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashCircleQuery.java,getRadiusString,"	private String getRadiusString() {
		if (radius > 1000) {
			return radius / 1000 + ""km"";",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashCircleQuery.java,contains,"	public boolean contains(WGS84Point point) {
		return query.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,BoundingBoxGeoHashIterator.java,getBoundingBox,"	public TwoGeoHashBoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,BoundingBoxGeoHashIterator.java,hasNext,"	public boolean hasNext() {
		return current.compareTo(boundingBox.getNorthEastCorner()) <= 0;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,BoundingBoxGeoHashIterator.java,next,"	public GeoHash next() {
		GeoHash rv = current;
		if (!hasNext()) {
			throw new NoSuchElementException();
		}
		current = rv.next();
		while (hasNext() && !boundingBox.getBoundingBox().contains(current.getOriginatingPoint())) {
			current = current.next();
		}
		return rv;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,BoundingBoxGeoHashIterator.java,remove,"	public void remove() {
		throw new UnsupportedOperationException();
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,BoundingBoxSampler.java,getBoundingBox,"	public TwoGeoHashBoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,BoundingBoxSampler.java,next,"	public GeoHash next() {
		if (alreadyUsed.size() == maxSamples) {
			return null;
		}
		int idx = rand.nextInt(maxSamples + 1);
		while (alreadyUsed.contains(idx)) {
			idx = rand.nextInt(maxSamples + 1);
		}
		alreadyUsed.add(idx);
		GeoHash gh = boundingBox.getSouthWestCorner().next(idx);
		if (!boundingBox.getBoundingBox().contains(gh.getOriginatingPoint())) {
			return next();
		}
		return gh;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,TwoGeoHashBoundingBox.java,withCharacterPrecision,"	public static TwoGeoHashBoundingBox withCharacterPrecision(BoundingBox bbox, int numberOfCharacters) {
		GeoHash southWestCorner = GeoHash.withCharacterPrecision(bbox.getSouthLatitude(), bbox.getWestLongitude(), numberOfCharacters);
		GeoHash northEastCorner = GeoHash.withCharacterPrecision(bbox.getNorthLatitude(), bbox.getEastLongitude(), numberOfCharacters);
		return new TwoGeoHashBoundingBox(southWestCorner, northEastCorner);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,TwoGeoHashBoundingBox.java,withBitPrecision,"	public static TwoGeoHashBoundingBox withBitPrecision(BoundingBox bbox, int numberOfBits) {
		GeoHash southWestCorner = GeoHash.withBitPrecision(bbox.getSouthLatitude(), bbox.getWestLongitude(), numberOfBits);
		GeoHash northEastCorner = GeoHash.withBitPrecision(bbox.getNorthLatitude(), bbox.getEastLongitude(), numberOfBits);
		return new TwoGeoHashBoundingBox(southWestCorner, northEastCorner);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,TwoGeoHashBoundingBox.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,TwoGeoHashBoundingBox.java,getSouthWestCorner,"	public GeoHash getSouthWestCorner() {
		return southWestCorner;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,TwoGeoHashBoundingBox.java,getNorthEastCorner,"	public GeoHash getNorthEastCorner() {
		return northEastCorner;
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,TwoGeoHashBoundingBox.java,toBase32,"	public String toBase32() {
		return southWestCorner.toBase32() + northEastCorner.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,toBase32ShouldThrowWhenPrecisionIsNotAMultipleOf5,"	public void toBase32ShouldThrowWhenPrecisionIsNotAMultipleOf5() {
		hash.bits = 0x6ff0413000000000l;
		hash.significantBits = 24;
		hash.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			BoundingBox bbox = gh.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testToAndFromBinaryString,"	public void testToAndFromBinaryString() {
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			String binaryString = gh.toBinaryString();",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertWithin(hash, bbox);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,assertWithin,"	private void assertWithin(GeoHash hash, GeoHash bbox) {
		assertTrue(hash + "" should be within "" + bbox, hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,itShouldCreateAHashWithMaximumPrecisionOf64Bits,"	public void itShouldCreateAHashWithMaximumPrecisionOf64Bits() {
		GeoHash.withBitPrecision(10.0, 10.0, 64);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,itShouldThrowWhenTheBitPrecisionIsMoreThan64Bits,"	public void itShouldThrowWhenTheBitPrecisionIsMoreThan64Bits() {
		GeoHash.withBitPrecision(46.0, 8.0, 70);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,itShouldThrowWhenTheCharacterPrecisionIsTooBig,"	public void itShouldThrowWhenTheCharacterPrecisionIsTooBig() {
		GeoHash.withCharacterPrecision(10.0, 120.0, 14);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash + "" should NOT be within "" + bbox, hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");

		String geoHashString = GeoHash.geoHashStringWithCharacterPrecision(point.getLatitude(), point.getLongitude(), 12);
		assertEquals(fullStringValue, geoHashString);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xd000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xc000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);
",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertEquals(start.getBoundingBox(), end.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testKnownNeighbouringHashes,"	public void testKnownNeighbouringHashes() {
		GeoHash h1 = GeoHash.fromGeohashString(""u1pb"");
		assertEquals(""u0zz"", h1.getSouthernNeighbour().toBase32());
		assertEquals(""u1pc"", h1.getNorthernNeighbour().toBase32());
		assertEquals(""u300"", h1.getEasternNeighbour().toBase32());
		assertEquals(""u302"", h1.getEasternNeighbour().getEasternNeighbour().toBase32());
		assertEquals(""u1p8"", h1.getWesternNeighbour().toBase32());

		assertEquals(""sp2j"", GeoHash.withCharacterPrecision(41.7, 0.08, 4).toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testKnownAdjacentNeighbours,"	public void testKnownAdjacentNeighbours() {
		String center = ""dqcjqc"";
		String[] adjacent = new String[] { ""dqcjqf"", ""dqcjqb"", ""dqcjr1"", ""dqcjq9"", ""dqcjqd"", ""dqcjr4"", ""dqcjr0"",
				""dqcjq8"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""u1x0dfg"";
		adjacent = new String[] { ""u1x0dg4"", ""u1x0dg5"", ""u1x0dgh"", ""u1x0dfu"", ""u1x0dfs"", ""u1x0dfe"", ""u1x0dfd"",
				""u1x0dff"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""sp2j"";
		adjacent = new String[] { ""ezry"", ""sp2n"", ""sp2q"", ""sp2m"", ""sp2k"", ""sp2h"", ""ezru"", ""ezrv"" };
		assertAdjacentHashesAre(center, adjacent);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testThatAdjacentHashesHavePointInitialized,"	public void testThatAdjacentHashesHavePointInitialized() {
		String center = ""dqcjqc"";
		GeoHash geohash = GeoHash.fromGeohashString(center);
		GeoHash[] adjacentHashes = geohash.getAdjacent();
		for (GeoHash adjacentHash : adjacentHashes) {
			assertNotNull(adjacentHash.getBoundingBox());",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,assertAdjacentHashesAre,"	private void assertAdjacentHashesAre(String centerString, String[] adjacentStrings) {
		GeoHash center = GeoHash.fromGeohashString(centerString);
		GeoHash[] adjacent = center.getAdjacent();
		for (String check : adjacentStrings) {
			assertArrayContainsGeoHash(check, adjacent);",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,assertArrayContainsGeoHash,"	private void assertArrayContainsGeoHash(String check, GeoHash[] hashes) {
		boolean found = false;
		for (GeoHash hash : hashes) {
			if (hash.toBase32().equals(check)) {
				found = true;
				break;
			}
		}
		assertTrue(""Array should contain "" + check, found);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testNeibouringHashesNearMeridian,"	public void testNeibouringHashesNearMeridian() {
		GeoHash hash = GeoHash.fromGeohashString(""sp2j"");
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(""ezrv"", west.toBase32());
		west = west.getWesternNeighbour();
		assertEquals(""ezrt"", west.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testSimpleWithin,"	public void testSimpleWithin() {
		GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
		GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
		assertWithin(inside, hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenter());
		System.out.print(""corners="");
		System.out.println(hash.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testToLongAndBack,"	public void testToLongAndBack() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		long lv = hash.longValue();
		assertEquals(lv + (1 << (64 - hash.significantBits())), hash.next().longValue());
		GeoHash hashFromLong = GeoHash.fromLongValue(lv, hash.significantBits());
		assertEquals(""dr4jb0bn21"", hashFromLong.toBase32());
		assertEquals(hash, hashFromLong);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testNext,"	public void testNext() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 10);
		GeoHash next = hash.next();
		assertTrue(hash.compareTo(next) < 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testNextPrev,"	public void testNextPrev() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 35);
		GeoHash next = hash.next(2);
		assertTrue(hash.compareTo(next) < 0);
		GeoHash prev1 = next.prev();
		GeoHash prev2 = prev1.next(-1);
		assertTrue(prev1.compareTo(next) < 0);
		System.out.println(""hash: "" + hash.toBase32());
		System.out.println(""next: "" + next.toBase32());
		System.out.println(""prev1: "" + prev1.toBase32());
		System.out.println(""prev2: "" + prev2.toBase32());

		assertTrue(prev2.compareTo(prev1) < 0);
		assertTrue(prev2.compareTo(hash) == 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testGetCharacterPrecisionThrows,"	public void testGetCharacterPrecisionThrows() throws Exception {
		GeoHash hash = GeoHash.withBitPrecision(37.7, -122.52, 32);
		hash.getCharacterPrecision();
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testGetCharacterPrecisionWorksWhenPrecisionIsMultipleOfFive,"	public void testGetCharacterPrecisionWorksWhenPrecisionIsMultipleOfFive() throws Exception {
		GeoHash hash = GeoHash.withBitPrecision(37.7, -122.52, 60);
		int precision = hash.getCharacterPrecision();
		assertEquals(precision, 12);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testStepsBetween,"	public void testStepsBetween() {
		GeoHash bl = GeoHash.withBitPrecision(37.7, -122.52, 35);
		GeoHash ur = GeoHash.withBitPrecision(37.84, -122.35, 35);

		long steps = GeoHash.stepsBetween(bl, bl);
		assertEquals(steps, 0);

		steps = GeoHash.stepsBetween(bl, bl.next(4));
		assertEquals(steps, 4);

		BoundingBoxGeoHashIterator iter = new BoundingBoxGeoHashIterator(new TwoGeoHashBoundingBox(bl, ur));
		int count = 0;
		while (iter.hasNext()) {
			iter.next();
			count++;
		}
		assertEquals(12875, count);

		int allHashes = 0;
		int inBbox = 1;
		int latMore = 0;
		int lonMore = 0;
		int bothMore = 0;
		int latLess = 0;
		int lonLess = 0;
		int bothLess = 0;
		int latLessLonMore = 0;
		int latMoreLonLess = 0;
		GeoHash idx = bl;
		BoundingBox iterBbox = iter.getBoundingBox().getBoundingBox();
		while (idx.compareTo(ur) < 0) {
			idx = idx.next();
			allHashes++;
			if (iterBbox.contains(idx.getOriginatingPoint())) {
				inBbox++;
			}
			boolean latIsMore = false;
			boolean latIsLess = false;
			if (idx.getOriginatingPoint().getLatitude() > iterBbox.getNorthLatitude()) {
				latIsMore = true;
				latMore++;
			} else if (idx.getOriginatingPoint().getLatitude() < iterBbox.getSouthLatitude()) {
				latIsLess = true;
				latLess++;
			}
			if (idx.getOriginatingPoint().getLongitude() > iterBbox.getEastLongitude()) {
				lonMore++;
				if (latIsMore) {
					bothMore++;
				}
				if (latIsLess) {
					latLessLonMore++;
				}
			} else if (idx.getOriginatingPoint().getLongitude() < iterBbox.getWestLongitude()) {
				lonLess++;
				if (latIsLess) {
					bothLess++;
				}
				if (latIsMore) {
					latMoreLonLess++;
				}
			}
		}

		// Just trying to understand where these GeoHashes are with regard to
		// their bounding box.
		steps = GeoHash.stepsBetween(bl, ur);
		assertEquals(48472, steps);
		assertEquals(steps, allHashes);
		assertEquals(count, inBbox);
		assertEquals(14938, latMore);
		assertEquals(640, lonMore);
		assertEquals(0, bothMore);
		assertEquals(7680, latLess);
		assertEquals(24391, lonLess);
		assertEquals(0, bothLess);
		assertEquals(240, latLessLonMore);
		assertEquals(11811, latMoreLonLess);
		assertEquals(steps, lonLess + latLess + latMore + lonMore + inBbox - latLessLonMore - latMoreLonLess - 1);
",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testCompareTo,"	public void testCompareTo() {
		GeoHash prevHash = null;
		for (int i = 0; i < 10000; i++) {
			GeoHash hash = RandomGeohashes.createWith5BitsPrecision();",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testOrdIsPositive,"	public void testOrdIsPositive() {
		double lat = 40.390943;
		double lon = 75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);
		assertEquals(0xcf6915015410500l, hash.ord());
		assertTrue(hash.ord() >= 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,GeoHashTest.java,testSecondCaseWhereOrdMustBePositive,"	public void testSecondCaseWhereOrdMustBePositive() {
		GeoHash hash = GeoHash.withCharacterPrecision(-36.919550434870125,174.71024582237604,7);
		assertTrue(hash.ord() > 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,BoundingBoxGeoHashIteratorTest.java,testIter,"	public void testIter() {
		BoundingBox box = new BoundingBox(37.7, 37.84, -122.52, -122.35);
		BoundingBoxGeoHashIterator iter = new BoundingBoxGeoHashIterator(
				TwoGeoHashBoundingBox.withBitPrecision(box, 10));
		BoundingBox newBox = iter.getBoundingBox().getBoundingBox();
		List<GeoHash> hashes = new ArrayList<>();
		while (iter.hasNext()) {
			hashes.add(iter.next());
		}
		GeoHash prev = null;
		for (GeoHash gh : hashes) {
			if (prev != null) {",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,BoundingBoxGeoHashIteratorTest.java,testIter2,"	public void testIter2() {
		BoundingBox box = new BoundingBox(37.7, 37.84, -122.52, -122.35);
		BoundingBoxGeoHashIterator iter = new BoundingBoxGeoHashIterator(
				TwoGeoHashBoundingBox.withBitPrecision(box, 35));
		BoundingBox newBox = iter.getBoundingBox().getBoundingBox();
		List<GeoHash> hashes = new ArrayList<>();
		while (iter.hasNext()) {
			hashes.add(iter.next());
		}
		GeoHash prev = null;
		for (GeoHash gh : hashes) {
			if (prev != null) {",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
d6e4854361abeab2166cad8f6df6e342d1e3a599,BoundingBoxSamplerTest.java,testSampler,"	public void testSampler() {
		BoundingBox bbox = new BoundingBox(37.7, 37.84, -122.52, -122.35);
		BoundingBoxSampler sampler = new BoundingBoxSampler(TwoGeoHashBoundingBox.withBitPrecision(bbox, 35), 1179);
		bbox = sampler.getBoundingBox().getBoundingBox();
		GeoHash gh = sampler.next();
		Set<String> hashes = new HashSet<>();
		int sumOfComp = 0;
		int crossingZero = 0;

		GeoHash prev = null;
		while (gh != null) {
			assertTrue(bbox.contains(gh.getOriginatingPoint()));
			assertFalse(hashes.contains(gh.toBase32()));
			hashes.add(gh.toBase32());
			if (prev != null) {
				sumOfComp += prev.compareTo(gh);
			}
			prev = gh;
			if (sumOfComp == 0) {
				crossingZero++;
			}
			gh = sampler.next();
		}
		assertEquals(12875, hashes.size());
		// The expected value of the sum should be zero. This checks that it is
		// at least close. Worst case is 12875 or -12875 so -40 is sufficiently
		// close
		assertEquals(-40, sumOfComp);
		// Check that the sum is zero a number of times, to make sure values are
		// increasing and decreasing.
		assertEquals(123, crossingZero);
	}",https://www.github.com/kungfoo/geohash-java/commit/d6e4854361abeab2166cad8f6df6e342d1e3a599
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBox.java,getNorthWestCorner,"	public WGS84Point getNorthWestCorner() {
		return new WGS84Point(northLatitude, westLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBox.java,getNorthEastCorner,"	public WGS84Point getNorthEastCorner() {
		return new WGS84Point(northLatitude, eastLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBox.java,getSouthEastCorner,"	public WGS84Point getSouthEastCorner() {
		return new WGS84Point(southLatitude, eastLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBox.java,getSouthWestCorner,"	public WGS84Point getSouthWestCorner() {
		return new WGS84Point(southLatitude, westLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBox.java,getLatitudeSize,"	public double getLatitudeSize() {
		return northLatitude - southLatitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBox.java,getLongitudeSize,"	public double getLongitudeSize() {
		if (eastLongitude == 180.0 && westLongitude == -180.0)
			return 360.0;
		double size = (eastLongitude - westLongitude) % 360;

		// Remainder fix for earlier java versions
		if (size < 0)
			size += 360.0;
		return size;
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBox.java,equals,"	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj instanceof BoundingBox) {
			BoundingBox that = (BoundingBox) obj;",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBox.java,hashCode,"	public int hashCode() {
		int result = 17;
		result = 37 * result + hashCode(southLatitude);
		result = 37 * result + hashCode(northLatitude);
		result = 37 * result + hashCode(westLongitude);
		result = 37 * result + hashCode(eastLongitude);
		return result;
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBox.java,hashCode,"	private static int hashCode(double x) {
		long f = Double.doubleToLongBits(x);
		return (int) (f ^ (f >>> 32));
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBox.java,contains,"	public boolean contains(WGS84Point point) {
		return containsLatitude(point.getLatitude()) && containsLongitude(point.getLongitude());
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBox.java,intersects,"	public boolean intersects(BoundingBox other) {
		// Check latitude first cause it's the same for all cases
		if (other.southLatitude > northLatitude || other.northLatitude < southLatitude) {
			return false;",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBox.java,toString,"	public String toString() {
		return getNorthWestCorner() + "" -> "" + getSouthEastCorner();
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBox.java,getCenter,"	public WGS84Point getCenter() {
		double centerLatitude = (southLatitude + northLatitude) / 2;
		double centerLongitude = (westLongitude + eastLongitude) / 2;

		// This can happen if the bBox crosses the 180-Meridian
		if (centerLongitude > 180)
			centerLongitude -= 360;

		return new WGS84Point(centerLatitude, centerLongitude);
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBox.java,expandToInclude,"	public void expandToInclude(WGS84Point point) {
		
		// Expand Latitude
		if(point.getLatitude() < southLatitude)
			southLatitude = point.getLatitude();
		else if(point.getLatitude() > northLatitude)
			northLatitude = point.getLatitude();
		
		// Already done in this case
		if(containsLongitude(point.getLongitude()))
			return;
		
		// If this is not the case compute the distance between the endpoints in east direction
		double distanceEastToPoint = DoubleUtil.remainderWithFix(point.getLongitude() - eastLongitude, 360);
		double distancePointToWest = DoubleUtil.remainderWithFix(westLongitude - point.getLongitude(), 360);

		// The minimal distance needs to be extended
		if(distanceEastToPoint <= distancePointToWest)
			eastLongitude = point.getLongitude();
		else
			westLongitude = point.getLongitude();
		
		intersects180Meridian = eastLongitude < westLongitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBox.java,expandToInclude,"	public void expandToInclude(BoundingBox other) {

		// Expand Latitude
		if (other.southLatitude < southLatitude) {
			southLatitude = other.southLatitude;
		}
		if (other.northLatitude > northLatitude) {
			northLatitude = other.northLatitude;
		}

		// Expand Longitude
		// At first check whether the two boxes contain each other or not
		boolean thisContainsOther = containsLongitude(other.eastLongitude) && containsLongitude(other.westLongitude);
		boolean otherContainsThis = other.containsLongitude(eastLongitude) && other.containsLongitude(westLongitude);

		// The new box needs to span the whole globe
		if (thisContainsOther && otherContainsThis) {
			eastLongitude = 180.0;
			westLongitude = -180.0;
			intersects180Meridian = false;
			return;
		}
		// Already done in this case
		if (thisContainsOther)
			return;
		// Expand to match the bigger box
		if (otherContainsThis) {
			eastLongitude = other.eastLongitude;
			westLongitude = other.westLongitude;
			intersects180Meridian = eastLongitude < westLongitude;
			return;
		}

		// If this is not the case compute the distance between the endpoints in east direction
		double distanceEastToOtherEast = DoubleUtil.remainderWithFix(other.eastLongitude - eastLongitude, 360);
		double distanceOtherWestToWest = DoubleUtil.remainderWithFix(westLongitude - other.westLongitude, 360);

		// The minimal distance needs to be extended
		if (distanceEastToOtherEast <= distanceOtherWestToWest) {
			eastLongitude = other.eastLongitude;
		} else {
			westLongitude = other.westLongitude;
		}

		intersects180Meridian = eastLongitude < westLongitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBox.java,containsLatitude,"	private boolean containsLatitude(double latitude) {
		return latitude >= southLatitude && latitude <= northLatitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBox.java,containsLongitude,"	private boolean containsLongitude(double longitude) {
		if (intersects180Meridian) {
			return longitude <= eastLongitude || longitude >= westLongitude;",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBox.java,getEastLongitude,"	public double getEastLongitude() {
		return eastLongitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBox.java,getWestLongitude,"	public double getWestLongitude() {
		return westLongitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBox.java,getNorthLatitude,"	public double getNorthLatitude() {
		return northLatitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBox.java,getSouthLatitude,"	public double getSouthLatitude() {
		return southLatitude;
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBox.java,intersects180Meridian,"	public boolean intersects180Meridian() {
		return intersects180Meridian;
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,DoubleUtil.java,remainderWithFix,"	public static double remainderWithFix(double value, int remainder) {
		double res = value % remainder;
		
		// Fix for lower java versions, since the remainder-operator (%) changed in one version, idk which one
		return res < 0 ? res += remainder : res;
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBoxTest.java,setUp,"	public void setUp() {
		a = new BoundingBox(new WGS84Point(21, 20), new WGS84Point(30, 31));
		b = new BoundingBox(a);
		c = new BoundingBox(new WGS84Point(-45, -170), new WGS84Point(45, 170));
		d = new BoundingBox(new WGS84Point(-45, 170), new WGS84Point(-45, -170));
		e = new BoundingBox(d);
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBoxTest.java,testHashCode,"	public void testHashCode() {
		assertEquals(a.hashCode(), b.hashCode());
		assertFalse(a.hashCode() == c.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBoxTest.java,testEqualsObject,"	public void testEqualsObject() {
		assertEquals(a, b);
		assertEquals(b, a);
		assertFalse(a.equals(c));
		assertEquals(d, e);
		assertEquals(e, d);
		assertFalse(c.equals(d));
		assertFalse(c.equals(a));
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBoxTest.java,testContains,"	public void testContains() {
		BoundingBox bbox = new BoundingBox(45, 46, 120, 121);
		assertContains(bbox, new WGS84Point(45.5, 120.5));
		assertNotContains(bbox, new WGS84Point(90, 90));

		// Testing bounding box over 180-Meridian
		bbox = new BoundingBox(45, 46, 170, -170);
		assertContains(bbox, new WGS84Point(45.5, 175));
		assertContains(bbox, new WGS84Point(45.5, -175));
		assertNotContains(bbox, new WGS84Point(45.5, -165));
		assertNotContains(bbox, new WGS84Point(45.5, 165));
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBoxTest.java,testSize,"	public void testSize() {
		BoundingBox bbox = new BoundingBox(45, 90, 0, 30);
		assertHeightIs(bbox, 45);
		assertWidthIs(bbox, 30);
		bbox = new BoundingBox(-45, 45, -22.5, 30);
		assertHeightIs(bbox, 90);
		assertWidthIs(bbox, 52.5);
		bbox = new BoundingBox(-46.1, -44, -128, -127.2);
		assertHeightIs(bbox, 2.1);
		assertWidthIs(bbox, 0.8);

		// Testing bounding box over 180-Meridian
		bbox = new BoundingBox(45, 90, 170, -170);
		assertHeightIs(bbox, 45);
		assertWidthIs(bbox, 20);
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBoxTest.java,assertWidthIs,"	private void assertWidthIs(BoundingBox bbox, double width) {
		assertEquals(width, bbox.getLongitudeSize(), DELTA);
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBoxTest.java,assertHeightIs,"	private void assertHeightIs(BoundingBox bbox, double height) {
		assertEquals(height, bbox.getLatitudeSize(), DELTA);
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBoxTest.java,testIntersects,"	public void testIntersects() {
		BoundingBox bbox = new BoundingBox(-10, 10, 40, 41);
		assertIntersects(bbox, new BoundingBox(-15, 5, 40.5, 43));
		assertDoesNotIntersect(bbox, new BoundingBox(-15, 5, 42, 43));

		// Testing bounding box over 180-Meridian
		bbox = new BoundingBox(45, 90, 170, -170);
		assertIntersects(bbox, new BoundingBox(50, 55, 175, 176));
		assertIntersects(bbox, new BoundingBox(50, 55, 160, 176));
		assertIntersects(bbox, new BoundingBox(50, 55, -175, -176));
		assertIntersects(bbox, new BoundingBox(50, 55, -160, -176));
		assertIntersects(bbox, new BoundingBox(50, 55, 175, -175));
		assertIntersects(bbox, new BoundingBox(50, 55, -175, 175));

		assertDoesNotIntersect(bbox, new BoundingBox(-15, 5, 42, 43));
		assertDoesNotIntersect(bbox, new BoundingBox(-15, 5, 175, 176));
		assertDoesNotIntersect(bbox, new BoundingBox(-15, 5, 175, -175));
		assertDoesNotIntersect(bbox, new BoundingBox(50, 55, 160, 169));
		assertDoesNotIntersect(bbox, new BoundingBox(50, 55, -169, -160));
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBoxTest.java,testExpandToIncludePoint,"	public void testExpandToIncludePoint() {		
		// expand east
		BoundingBox bbox = new BoundingBox(-10, 10, 40, 41);
		WGS84Point point = new WGS84Point(0, 45);
		bbox.expandToInclude(point);
		assertContains(bbox, point);
		assertExpandToInclude(bbox, -10, 10, 40, 45);
		
		bbox = new BoundingBox(-10, 10, 40, 41);
		point = new WGS84Point(0, -140);
		bbox.expandToInclude(point);
		assertContains(bbox, point);
		assertExpandToInclude(bbox, -10, 10, 40, -140);
		assertEquals(true, bbox.intersects180Meridian());

		// expand west
		bbox = new BoundingBox(-10, 10, 40, 41);
		point = new WGS84Point(0, 35);
		bbox.expandToInclude(point);
		assertContains(bbox, point);
		assertExpandToInclude(bbox, -10, 10, 35, 41);
		
		bbox = new BoundingBox(-10, 10, 40, 41);
		point = new WGS84Point(0, -139);
		bbox.expandToInclude(point);
		assertContains(bbox, point);
		assertExpandToInclude(bbox, -10, 10, -139, 41);
		assertEquals(false, bbox.intersects180Meridian());

		// expand south
		bbox = new BoundingBox(-10, 10, 40, 41);
		point = new WGS84Point(-20, 40);
		bbox.expandToInclude(point);
		assertContains(bbox, point);
		assertExpandToInclude(bbox, -20, 10, 40, 41);
		
		// expand north
		bbox = new BoundingBox(-10, 10, 40, 41);
		point = new WGS84Point(20, 40);
		bbox.expandToInclude(point);
		assertContains(bbox, point);
		assertExpandToInclude(bbox, -10, 20, 40, 41);
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBoxTest.java,assertExpandToInclude,"	private void assertExpandToInclude(BoundingBox bbox, double southLatitude, double northLatitude, double westLongitude, double eastLongitude) {
		assertEquals(southLatitude, bbox.getSouthLatitude(), DELTA);
		assertEquals(northLatitude, bbox.getNorthLatitude(), DELTA);
		assertEquals(westLongitude, bbox.getWestLongitude(), DELTA);
		assertEquals(eastLongitude, bbox.getEastLongitude(), DELTA);
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBoxTest.java,assertDoesNotIntersect,"	private void assertDoesNotIntersect(BoundingBox bbox, BoundingBox boundingBox) {
		assertFalse(bbox + "" should NOT intersect "" + boundingBox, bbox.intersects(boundingBox));
		assertFalse(boundingBox + "" should NOT intersect "" + bbox, boundingBox.intersects(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBoxTest.java,assertIntersects,"	private void assertIntersects(BoundingBox bbox, BoundingBox boundingBox) {
		assertTrue(bbox + "" should intersect "" + boundingBox, bbox.intersects(boundingBox));
		assertTrue(boundingBox + "" should intersect "" + bbox, boundingBox.intersects(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBoxTest.java,assertContains,"	private void assertContains(BoundingBox box, WGS84Point p) {
		assertTrue(p + "" should be in "" + box, box.contains(p));
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,BoundingBoxTest.java,assertNotContains,"	private void assertNotContains(BoundingBox box, WGS84Point p) {
		assertFalse(p + "" should NOT be in "" + box, box.contains(p));
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,DoubleUtilTest.java,testPositiveValue,"	public void testPositiveValue() {
		assertEquals(58.1541,DoubleUtil.remainderWithFix(58.1541, 360), 0.00001);
		assertEquals(93.1541,DoubleUtil.remainderWithFix(453.1541, 360), 0.00001);
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
a255c79eef4fb2d23c9d9c47d60b93988466bf9d,DoubleUtilTest.java,testNegativeValue,"	public void testNegativeValue() {
		assertEquals(301.8459,DoubleUtil.remainderWithFix(-58.1541, 360), 0.00001);
		assertEquals(266.8459,DoubleUtil.remainderWithFix(-453.1541, 360), 0.00001);
	}",https://www.github.com/kungfoo/geohash-java/commit/a255c79eef4fb2d23c9d9c47d60b93988466bf9d
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		if (numberOfCharacters > MAX_CHARACTER_PRECISION) {
			throw new IllegalArgumentException(""A geohash can only be "" + MAX_CHARACTER_PRECISION + "" character long."");
		}
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (numberOfBits > MAX_BIT_PRECISION) {
			throw new IllegalArgumentException(""A Geohash can only be "" + MAX_BIT_PRECISION + "" bits long!"");
		}
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0) {
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		}
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,fromBinaryString,"	public static GeoHash fromBinaryString(String binaryString) {
		GeoHash geohash = new GeoHash();
		for (int i = 0; i < binaryString.length(); i++) {
			if (binaryString.charAt(i) == '1') {
				geohash.addOnBitToEnd();
			} else if (binaryString.charAt(i) == '0') {
				geohash.addOffBitToEnd();
			} else {
				throw new IllegalArgumentException(binaryString + "" is not a valid geohash as a binary string"");
			}
		}
		geohash.bits <<= (MAX_BIT_PRECISION - geohash.significantBits);
		long[] latitudeBits = geohash.getRightAlignedLatitudeBits();
		long[] longitudeBits = geohash.getRightAlignedLongitudeBits();
		return geohash.recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			int cd = decodeMap.get(geohash.charAt(i));
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (MAX_BIT_PRECISION - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,fromLongValue,"	public static GeoHash fromLongValue(long hashVal, int significantBits) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		String binaryString = Long.toBinaryString(hashVal);
		while (binaryString.length() < MAX_BIT_PRECISION) {
			binaryString = ""0"" + binaryString;
		}
		for (int j = 0; j < significantBits; j++) {
			if (isEvenBit) {
				divideRangeDecode(hash, longitudeRange, binaryString.charAt(j) != '0');
			} else {
				divideRangeDecode(hash, latitudeRange, binaryString.charAt(j) != '0');
			}
			isEvenBit = !isEvenBit;
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (MAX_BIT_PRECISION - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,geoHashStringWithCharacterPrecision,"	public static String geoHashStringWithCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		GeoHash hash = withCharacterPrecision(latitude, longitude, numberOfCharacters);
		return hash.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(latitudeRange[0], latitudeRange[1], longitudeRange[0], longitudeRange[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,next,"	public GeoHash next(int step) {
		return fromOrd(ord() + step, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,next,"	public GeoHash next() {
		return next(1);
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,prev,"	public GeoHash prev() {
		return next(-1);
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,ord,"	public long ord() {
		int insignificantBits = MAX_BIT_PRECISION - significantBits;
		return bits >>> insignificantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,getCharacterPrecision,"	public int getCharacterPrecision() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(
					""precision of GeoHash is not divisble by 5: "" + this);
		}
		return significantBits / 5;
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,fromOrd,"	public static GeoHash fromOrd(long ord, int significantBits) {
		int insignificantBits = MAX_BIT_PRECISION - significantBits;
		return fromLongValue(ord << insignificantBits, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,stepsBetween,"	public static long stepsBetween(GeoHash one, GeoHash two) {
		if (one.significantBits() != two.significantBits()) {
			throw new IllegalArgumentException(
					""It is only valid to compare the number of steps between two hashes if they have the same number of significant bits"");
		}
		return two.ord() - one.ord();
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern,",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,significantBits,"	public int significantBits() {
		return significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,longValue,"	public long longValue() {
		return bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,toBase32,"	public String toBase32() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(""Cannot convert a geohash to base32 if the precision is not a multiple of 5."");
		}
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,getOriginatingPoint,"	public WGS84Point getOriginatingPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,getBoundingBoxCenter,"	public WGS84Point getBoundingBoxCenter() {
		return boundingBox.getCenter();
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (MAX_BIT_PRECISION - latBits[1]);
		lonBits[0] <<= (MAX_BIT_PRECISION - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (MAX_BIT_PRECISION - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.point = hash.boundingBox.getCenter();
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", padLeft(Long.toBinaryString(bits), 64, ""0""), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,padLeft,"	private static String padLeft(String s, int n, String pad) {
		return String.format(""%"" + n + ""s"", s).replace("" "", pad);
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,toBinaryString,"	public String toBinaryString() {
		StringBuilder bui = new StringBuilder();
		long bitsCopy = bits;
		for (int i = 0; i < significantBits; i++) {
			if ((bitsCopy & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				bui.append('1');
			} else {
				bui.append('0');
			}
			bitsCopy <<= 1;
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,mask,"	private long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (MAX_BIT_PRECISION - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
13a06a19c8cb899b5d0908b28b36b6812d1084d6,GeoHash.java,compareTo,"	public int compareTo(GeoHash o) {
		int bitsCmp = Long.compare(bits ^ FIRST_BIT_FLAGGED, o.bits ^ FIRST_BIT_FLAGGED);
		if (bitsCmp != 0) {
			return bitsCmp;",https://www.github.com/kungfoo/geohash-java/commit/13a06a19c8cb899b5d0908b28b36b6812d1084d6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		if (numberOfCharacters > MAX_CHARACTER_PRECISION) {
			throw new IllegalArgumentException(""A geohash can only be "" + MAX_CHARACTER_PRECISION + "" character long."");
		}
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (numberOfBits > MAX_BIT_PRECISION) {
			throw new IllegalArgumentException(""A Geohash can only be "" + MAX_BIT_PRECISION + "" bits long!"");
		}
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0) {
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		}
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,fromBinaryString,"	public static GeoHash fromBinaryString(String binaryString) {
		GeoHash geohash = new GeoHash();
		for (int i = 0; i < binaryString.length(); i++) {
			if (binaryString.charAt(i) == '1') {
				geohash.addOnBitToEnd();
			} else if (binaryString.charAt(i) == '0') {
				geohash.addOffBitToEnd();
			} else {
				throw new IllegalArgumentException(binaryString + "" is not a valid geohash as a binary string"");
			}
		}
		geohash.bits <<= (MAX_BIT_PRECISION - geohash.significantBits);
		long[] latitudeBits = geohash.getRightAlignedLatitudeBits();
		long[] longitudeBits = geohash.getRightAlignedLongitudeBits();
		return geohash.recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			if(decodeMap.containsKey(geohash.charAt(i))) {
				int cd = decodeMap.get(geohash.charAt(i));
				for (int j = 0; j < BASE32_BITS; j++) {
					int mask = BITS[j];
					if (isEvenBit) {
						divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
					} else {
						divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
					}
					isEvenBit = !isEvenBit;
				}
			} else {
				throw new IllegalArgumentException(""Invalid character character '"" + geohash.charAt(i) + ""' in geohash '""+geohash+""'!"");
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (MAX_BIT_PRECISION - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,fromLongValue,"	public static GeoHash fromLongValue(long hashVal, int significantBits) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		String binaryString = Long.toBinaryString(hashVal);
		while (binaryString.length() < MAX_BIT_PRECISION) {
			binaryString = ""0"" + binaryString;
		}
		for (int j = 0; j < significantBits; j++) {
			if (isEvenBit) {
				divideRangeDecode(hash, longitudeRange, binaryString.charAt(j) != '0');
			} else {
				divideRangeDecode(hash, latitudeRange, binaryString.charAt(j) != '0');
			}
			isEvenBit = !isEvenBit;
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (MAX_BIT_PRECISION - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,geoHashStringWithCharacterPrecision,"	public static String geoHashStringWithCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		GeoHash hash = withCharacterPrecision(latitude, longitude, numberOfCharacters);
		return hash.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(latitudeRange[0], latitudeRange[1], longitudeRange[0], longitudeRange[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,next,"	public GeoHash next(int step) {
		return fromOrd(ord() + step, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,next,"	public GeoHash next() {
		return next(1);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,prev,"	public GeoHash prev() {
		return next(-1);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,ord,"	public long ord() {
		int insignificantBits = MAX_BIT_PRECISION - significantBits;
		return bits >>> insignificantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,getCharacterPrecision,"	public int getCharacterPrecision() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(
					""precision of GeoHash is not divisble by 5: "" + this);
		}
		return significantBits / 5;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,fromOrd,"	public static GeoHash fromOrd(long ord, int significantBits) {
		int insignificantBits = MAX_BIT_PRECISION - significantBits;
		return fromLongValue(ord << insignificantBits, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,stepsBetween,"	public static long stepsBetween(GeoHash one, GeoHash two) {
		if (one.significantBits() != two.significantBits()) {
			throw new IllegalArgumentException(
					""It is only valid to compare the number of steps between two hashes if they have the same number of significant bits"");
		}
		return two.ord() - one.ord();
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern,",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,significantBits,"	public int significantBits() {
		return significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,longValue,"	public long longValue() {
		return bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,toBase32,"	public String toBase32() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(""Cannot convert a geohash to base32 if the precision is not a multiple of 5."");
		}
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,getOriginatingPoint,"	public WGS84Point getOriginatingPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,getBoundingBoxCenter,"	public WGS84Point getBoundingBoxCenter() {
		return boundingBox.getCenter();
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (MAX_BIT_PRECISION - latBits[1]);
		lonBits[0] <<= (MAX_BIT_PRECISION - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (MAX_BIT_PRECISION - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.point = hash.boundingBox.getCenter();
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", padLeft(Long.toBinaryString(bits), 64, ""0""), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,padLeft,"	private static String padLeft(String s, int n, String pad) {
		return String.format(""%"" + n + ""s"", s).replace("" "", pad);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,toBinaryString,"	public String toBinaryString() {
		StringBuilder bui = new StringBuilder();
		long bitsCopy = bits;
		for (int i = 0; i < significantBits; i++) {
			if ((bitsCopy & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				bui.append('1');
			} else {
				bui.append('0');
			}
			bitsCopy <<= 1;
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,mask,"	private long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (MAX_BIT_PRECISION - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHash.java,compareTo,"	public int compareTo(GeoHash o) {
		int bitsCmp = Long.compare(bits ^ FIRST_BIT_FLAGGED, o.bits ^ FIRST_BIT_FLAGGED);
		if (bitsCmp != 0) {
			return bitsCmp;",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,toBase32ShouldThrowWhenPrecisionIsNotAMultipleOf5,"	public void toBase32ShouldThrowWhenPrecisionIsNotAMultipleOf5() {
		hash.bits = 0x6ff0413000000000l;
		hash.significantBits = 24;
		hash.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			BoundingBox bbox = gh.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testToAndFromBinaryString,"	public void testToAndFromBinaryString() {
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			String binaryString = gh.toBinaryString();",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertWithin(hash, bbox);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,assertWithin,"	private void assertWithin(GeoHash hash, GeoHash bbox) {
		assertTrue(hash + "" should be within "" + bbox, hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,itShouldCreateAHashWithMaximumPrecisionOf64Bits,"	public void itShouldCreateAHashWithMaximumPrecisionOf64Bits() {
		GeoHash.withBitPrecision(10.0, 10.0, 64);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,itShouldThrowWhenTheBitPrecisionIsMoreThan64Bits,"	public void itShouldThrowWhenTheBitPrecisionIsMoreThan64Bits() {
		GeoHash.withBitPrecision(46.0, 8.0, 70);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,itShouldThrowWhenTheCharacterPrecisionIsTooBig,"	public void itShouldThrowWhenTheCharacterPrecisionIsTooBig() {
		GeoHash.withCharacterPrecision(10.0, 120.0, 14);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash + "" should NOT be within "" + bbox, hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");

		String geoHashString = GeoHash.geoHashStringWithCharacterPrecision(point.getLatitude(), point.getLongitude(), 12);
		assertEquals(fullStringValue, geoHashString);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xd000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xc000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);
",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertEquals(start.getBoundingBox(), end.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testKnownNeighbouringHashes,"	public void testKnownNeighbouringHashes() {
		GeoHash h1 = GeoHash.fromGeohashString(""u1pb"");
		assertEquals(""u0zz"", h1.getSouthernNeighbour().toBase32());
		assertEquals(""u1pc"", h1.getNorthernNeighbour().toBase32());
		assertEquals(""u300"", h1.getEasternNeighbour().toBase32());
		assertEquals(""u302"", h1.getEasternNeighbour().getEasternNeighbour().toBase32());
		assertEquals(""u1p8"", h1.getWesternNeighbour().toBase32());

		assertEquals(""sp2j"", GeoHash.withCharacterPrecision(41.7, 0.08, 4).toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testKnownAdjacentNeighbours,"	public void testKnownAdjacentNeighbours() {
		String center = ""dqcjqc"";
		String[] adjacent = new String[] { ""dqcjqf"", ""dqcjqb"", ""dqcjr1"", ""dqcjq9"", ""dqcjqd"", ""dqcjr4"", ""dqcjr0"",
				""dqcjq8"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""u1x0dfg"";
		adjacent = new String[] { ""u1x0dg4"", ""u1x0dg5"", ""u1x0dgh"", ""u1x0dfu"", ""u1x0dfs"", ""u1x0dfe"", ""u1x0dfd"",
				""u1x0dff"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""sp2j"";
		adjacent = new String[] { ""ezry"", ""sp2n"", ""sp2q"", ""sp2m"", ""sp2k"", ""sp2h"", ""ezru"", ""ezrv"" };
		assertAdjacentHashesAre(center, adjacent);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testThatAdjacentHashesHavePointInitialized,"	public void testThatAdjacentHashesHavePointInitialized() {
		String center = ""dqcjqc"";
		GeoHash geohash = GeoHash.fromGeohashString(center);
		GeoHash[] adjacentHashes = geohash.getAdjacent();
		for (GeoHash adjacentHash : adjacentHashes) {
			assertNotNull(adjacentHash.getBoundingBox());",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,assertAdjacentHashesAre,"	private void assertAdjacentHashesAre(String centerString, String[] adjacentStrings) {
		GeoHash center = GeoHash.fromGeohashString(centerString);
		GeoHash[] adjacent = center.getAdjacent();
		for (String check : adjacentStrings) {
			assertArrayContainsGeoHash(check, adjacent);",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,assertArrayContainsGeoHash,"	private void assertArrayContainsGeoHash(String check, GeoHash[] hashes) {
		boolean found = false;
		for (GeoHash hash : hashes) {
			if (hash.toBase32().equals(check)) {
				found = true;
				break;
			}
		}
		assertTrue(""Array should contain "" + check, found);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testNeibouringHashesNearMeridian,"	public void testNeibouringHashesNearMeridian() {
		GeoHash hash = GeoHash.fromGeohashString(""sp2j"");
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(""ezrv"", west.toBase32());
		west = west.getWesternNeighbour();
		assertEquals(""ezrt"", west.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testSimpleWithin,"	public void testSimpleWithin() {
		GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
		GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
		assertWithin(inside, hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenter());
		System.out.print(""corners="");
		System.out.println(hash.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testToLongAndBack,"	public void testToLongAndBack() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		long lv = hash.longValue();
		assertEquals(lv + (1 << (64 - hash.significantBits())), hash.next().longValue());
		GeoHash hashFromLong = GeoHash.fromLongValue(lv, hash.significantBits());
		assertEquals(""dr4jb0bn21"", hashFromLong.toBase32());
		assertEquals(hash, hashFromLong);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testNext,"	public void testNext() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 10);
		GeoHash next = hash.next();
		assertTrue(hash.compareTo(next) < 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testNextPrev,"	public void testNextPrev() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 35);
		GeoHash next = hash.next(2);
		assertTrue(hash.compareTo(next) < 0);
		GeoHash prev1 = next.prev();
		GeoHash prev2 = prev1.next(-1);
		assertTrue(prev1.compareTo(next) < 0);
		System.out.println(""hash: "" + hash.toBase32());
		System.out.println(""next: "" + next.toBase32());
		System.out.println(""prev1: "" + prev1.toBase32());
		System.out.println(""prev2: "" + prev2.toBase32());

		assertTrue(prev2.compareTo(prev1) < 0);
		assertTrue(prev2.compareTo(hash) == 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testGetCharacterPrecisionThrows,"	public void testGetCharacterPrecisionThrows() throws Exception {
		GeoHash hash = GeoHash.withBitPrecision(37.7, -122.52, 32);
		hash.getCharacterPrecision();
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,itShouldThrowANiceExceptionOnIllegalCharacters,"	public void itShouldThrowANiceExceptionOnIllegalCharacters() {
		GeoHash.fromGeohashString(""abba"");
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testGetCharacterPrecisionWorksWhenPrecisionIsMultipleOfFive,"	public void testGetCharacterPrecisionWorksWhenPrecisionIsMultipleOfFive() throws Exception {
		GeoHash hash = GeoHash.withBitPrecision(37.7, -122.52, 60);
		int precision = hash.getCharacterPrecision();
		assertEquals(precision, 12);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testStepsBetween,"	public void testStepsBetween() {
		GeoHash bl = GeoHash.withBitPrecision(37.7, -122.52, 35);
		GeoHash ur = GeoHash.withBitPrecision(37.84, -122.35, 35);

		long steps = GeoHash.stepsBetween(bl, bl);
		assertEquals(steps, 0);

		steps = GeoHash.stepsBetween(bl, bl.next(4));
		assertEquals(steps, 4);

		BoundingBoxGeoHashIterator iter = new BoundingBoxGeoHashIterator(new TwoGeoHashBoundingBox(bl, ur));
		int count = 0;
		while (iter.hasNext()) {
			iter.next();
			count++;
		}
		assertEquals(12875, count);

		int allHashes = 0;
		int inBbox = 1;
		int latMore = 0;
		int lonMore = 0;
		int bothMore = 0;
		int latLess = 0;
		int lonLess = 0;
		int bothLess = 0;
		int latLessLonMore = 0;
		int latMoreLonLess = 0;
		GeoHash idx = bl;
		BoundingBox iterBbox = iter.getBoundingBox().getBoundingBox();
		while (idx.compareTo(ur) < 0) {
			idx = idx.next();
			allHashes++;
			if (iterBbox.contains(idx.getOriginatingPoint())) {
				inBbox++;
			}
			boolean latIsMore = false;
			boolean latIsLess = false;
			if (idx.getOriginatingPoint().getLatitude() > iterBbox.getNorthLatitude()) {
				latIsMore = true;
				latMore++;
			} else if (idx.getOriginatingPoint().getLatitude() < iterBbox.getSouthLatitude()) {
				latIsLess = true;
				latLess++;
			}
			if (idx.getOriginatingPoint().getLongitude() > iterBbox.getEastLongitude()) {
				lonMore++;
				if (latIsMore) {
					bothMore++;
				}
				if (latIsLess) {
					latLessLonMore++;
				}
			} else if (idx.getOriginatingPoint().getLongitude() < iterBbox.getWestLongitude()) {
				lonLess++;
				if (latIsLess) {
					bothLess++;
				}
				if (latIsMore) {
					latMoreLonLess++;
				}
			}
		}

		// Just trying to understand where these GeoHashes are with regard to
		// their bounding box.
		steps = GeoHash.stepsBetween(bl, ur);
		assertEquals(48472, steps);
		assertEquals(steps, allHashes);
		assertEquals(count, inBbox);
		assertEquals(14938, latMore);
		assertEquals(640, lonMore);
		assertEquals(0, bothMore);
		assertEquals(7680, latLess);
		assertEquals(24391, lonLess);
		assertEquals(0, bothLess);
		assertEquals(240, latLessLonMore);
		assertEquals(11811, latMoreLonLess);
		assertEquals(steps, lonLess + latLess + latMore + lonMore + inBbox - latLessLonMore - latMoreLonLess - 1);
",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testCompareTo,"	public void testCompareTo() {
		GeoHash prevHash = null;
		for (int i = 0; i < 10000; i++) {
			GeoHash hash = RandomGeohashes.createWith5BitsPrecision();",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testOrdIsPositive,"	public void testOrdIsPositive() {
		double lat = 40.390943;
		double lon = 75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);
		assertEquals(0xcf6915015410500l, hash.ord());
		assertTrue(hash.ord() >= 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
a6291bde52f954cbdff0bf397f05a2f8262f62e6,GeoHashTest.java,testSecondCaseWhereOrdMustBePositive,"	public void testSecondCaseWhereOrdMustBePositive() {
		GeoHash hash = GeoHash.withCharacterPrecision(-36.919550434870125,174.71024582237604,7);
		assertTrue(hash.ord() > 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/a6291bde52f954cbdff0bf397f05a2f8262f62e6
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		if (numberOfCharacters > MAX_CHARACTER_PRECISION) {
			throw new IllegalArgumentException(""A geohash can only be "" + MAX_CHARACTER_PRECISION + "" character long."");
		}
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (numberOfBits > MAX_BIT_PRECISION) {
			throw new IllegalArgumentException(""A Geohash can only be "" + MAX_BIT_PRECISION + "" bits long!"");
		}
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0) {
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		}
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,fromBinaryString,"	public static GeoHash fromBinaryString(String binaryString) {
		GeoHash geohash = new GeoHash();
		for (int i = 0; i < binaryString.length(); i++) {
			if (binaryString.charAt(i) == '1') {
				geohash.addOnBitToEnd();
			} else if (binaryString.charAt(i) == '0') {
				geohash.addOffBitToEnd();
			} else {
				throw new IllegalArgumentException(binaryString + "" is not a valid geohash as a binary string"");
			}
		}
		geohash.bits <<= (MAX_BIT_PRECISION - geohash.significantBits);
		long[] latitudeBits = geohash.getRightAlignedLatitudeBits();
		long[] longitudeBits = geohash.getRightAlignedLongitudeBits();
		return geohash.recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			char c = geohash.charAt(i);
			int cd;
			if (c >= decodeArray.length || (cd = decodeArray[c]) < 0) {
				throw new IllegalArgumentException(""Invalid character character '"" + c + ""' in geohash '""+geohash+""'!"");
			}
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (MAX_BIT_PRECISION - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,fromLongValue,"	public static GeoHash fromLongValue(long hashVal, int significantBits) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		String binaryString = Long.toBinaryString(hashVal);
		while (binaryString.length() < MAX_BIT_PRECISION) {
			binaryString = ""0"" + binaryString;
		}
		for (int j = 0; j < significantBits; j++) {
			if (isEvenBit) {
				divideRangeDecode(hash, longitudeRange, binaryString.charAt(j) != '0');
			} else {
				divideRangeDecode(hash, latitudeRange, binaryString.charAt(j) != '0');
			}
			isEvenBit = !isEvenBit;
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (MAX_BIT_PRECISION - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,geoHashStringWithCharacterPrecision,"	public static String geoHashStringWithCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		GeoHash hash = withCharacterPrecision(latitude, longitude, numberOfCharacters);
		return hash.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(latitudeRange[0], latitudeRange[1], longitudeRange[0], longitudeRange[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,next,"	public GeoHash next(int step) {
		return fromOrd(ord() + step, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,next,"	public GeoHash next() {
		return next(1);
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,prev,"	public GeoHash prev() {
		return next(-1);
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,ord,"	public long ord() {
		int insignificantBits = MAX_BIT_PRECISION - significantBits;
		return bits >>> insignificantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,getCharacterPrecision,"	public int getCharacterPrecision() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(
					""precision of GeoHash is not divisble by 5: "" + this);
		}
		return significantBits / 5;
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,fromOrd,"	public static GeoHash fromOrd(long ord, int significantBits) {
		int insignificantBits = MAX_BIT_PRECISION - significantBits;
		return fromLongValue(ord << insignificantBits, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,stepsBetween,"	public static long stepsBetween(GeoHash one, GeoHash two) {
		if (one.significantBits() != two.significantBits()) {
			throw new IllegalArgumentException(
					""It is only valid to compare the number of steps between two hashes if they have the same number of significant bits"");
		}
		return two.ord() - one.ord();
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern,",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,significantBits,"	public int significantBits() {
		return significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,longValue,"	public long longValue() {
		return bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,toBase32,"	public String toBase32() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(""Cannot convert a geohash to base32 if the precision is not a multiple of 5."");
		}
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,getOriginatingPoint,"	public WGS84Point getOriginatingPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,getBoundingBoxCenter,"	public WGS84Point getBoundingBoxCenter() {
		return boundingBox.getCenter();
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (MAX_BIT_PRECISION - latBits[1]);
		lonBits[0] <<= (MAX_BIT_PRECISION - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (MAX_BIT_PRECISION - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.point = hash.boundingBox.getCenter();
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", padLeft(Long.toBinaryString(bits), 64, ""0""), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,padLeft,"	private static String padLeft(String s, int n, String pad) {
		return String.format(""%"" + n + ""s"", s).replace("" "", pad);
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,toBinaryString,"	public String toBinaryString() {
		StringBuilder bui = new StringBuilder();
		long bitsCopy = bits;
		for (int i = 0; i < significantBits; i++) {
			if ((bitsCopy & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				bui.append('1');
			} else {
				bui.append('0');
			}
			bitsCopy <<= 1;
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,mask,"	private long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (MAX_BIT_PRECISION - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
3ed60d6321bd8c13fbb5df472ab48ccca014c1db,GeoHash.java,compareTo,"	public int compareTo(GeoHash o) {
		int bitsCmp = Long.compare(bits ^ FIRST_BIT_FLAGGED, o.bits ^ FIRST_BIT_FLAGGED);
		if (bitsCmp != 0) {
			return bitsCmp;",https://www.github.com/kungfoo/geohash-java/commit/3ed60d6321bd8c13fbb5df472ab48ccca014c1db
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,withCharacterPrecision,"	public static GeoHash withCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		if (numberOfCharacters > MAX_CHARACTER_PRECISION) {
			throw new IllegalArgumentException(""A geohash can only be "" + MAX_CHARACTER_PRECISION + "" character long."");
		}
		int desiredPrecision = (numberOfCharacters * 5 <= 60) ? numberOfCharacters * 5 : 60;
		return new GeoHash(latitude, longitude, desiredPrecision);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,withBitPrecision,"	public static GeoHash withBitPrecision(double latitude, double longitude, int numberOfBits) {
		if (numberOfBits < 0) {
			throw new IllegalArgumentException(""A Geohash can't be of negative bits long!"");
		}
		if (numberOfBits > MAX_BIT_PRECISION) {
			throw new IllegalArgumentException(""A Geohash can only be "" + MAX_BIT_PRECISION + "" bits long!"");
		}
		if (Math.abs(latitude) > 90.0 || Math.abs(longitude) > 180.0) {
			throw new IllegalArgumentException(""Can't have lat/lon values out of (-90,90)/(-180/180)"");
		}
		return new GeoHash(latitude, longitude, numberOfBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,fromBinaryString,"	public static GeoHash fromBinaryString(String binaryString) {
		GeoHash geohash = new GeoHash();
		for (int i = 0; i < binaryString.length(); i++) {
			if (binaryString.charAt(i) == '1') {
				geohash.addOnBitToEnd();
			} else if (binaryString.charAt(i) == '0') {
				geohash.addOffBitToEnd();
			} else {
				throw new IllegalArgumentException(binaryString + "" is not a valid geohash as a binary string"");
			}
		}
		geohash.bits <<= (MAX_BIT_PRECISION - geohash.significantBits);
		long[] latitudeBits = geohash.getRightAlignedLatitudeBits();
		long[] longitudeBits = geohash.getRightAlignedLongitudeBits();
		return geohash.recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,fromGeohashString,"	public static GeoHash fromGeohashString(String geohash) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		for (int i = 0; i < geohash.length(); i++) {
			char c = geohash.charAt(i);
			int cd;
			if (c >= decodeArray.length || (cd = decodeArray[c]) < 0) {
				throw new IllegalArgumentException(""Invalid character character '"" + c + ""' in geohash '""+geohash+""'!"");
			}
			for (int j = 0; j < BASE32_BITS; j++) {
				int mask = BITS[j];
				if (isEvenBit) {
					divideRangeDecode(hash, longitudeRange, (cd & mask) != 0);
				} else {
					divideRangeDecode(hash, latitudeRange, (cd & mask) != 0);
				}
				isEvenBit = !isEvenBit;
			}
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (MAX_BIT_PRECISION - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,fromLongValue,"	public static GeoHash fromLongValue(long hashVal, int significantBits) {
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		boolean isEvenBit = true;
		GeoHash hash = new GeoHash();

		String binaryString = Long.toBinaryString(hashVal);
		while (binaryString.length() < MAX_BIT_PRECISION) {
			binaryString = ""0"" + binaryString;
		}
		for (int j = 0; j < significantBits; j++) {
			if (isEvenBit) {
				divideRangeDecode(hash, longitudeRange, binaryString.charAt(j) != '0');
			} else {
				divideRangeDecode(hash, latitudeRange, binaryString.charAt(j) != '0');
			}
			isEvenBit = !isEvenBit;
		}

		double latitude = (latitudeRange[0] + latitudeRange[1]) / 2;
		double longitude = (longitudeRange[0] + longitudeRange[1]) / 2;

		hash.point = new WGS84Point(latitude, longitude);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.bits <<= (MAX_BIT_PRECISION - hash.significantBits);
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,geoHashStringWithCharacterPrecision,"	public static String geoHashStringWithCharacterPrecision(double latitude, double longitude, int numberOfCharacters) {
		GeoHash hash = withCharacterPrecision(latitude, longitude, numberOfCharacters);
		return hash.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,setBoundingBox,"	private static void setBoundingBox(GeoHash hash, double[] latitudeRange, double[] longitudeRange) {
		hash.boundingBox = new BoundingBox(latitudeRange[0], latitudeRange[1], longitudeRange[0], longitudeRange[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,next,"	public GeoHash next(int step) {
		return fromOrd(ord() + step, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,next,"	public GeoHash next() {
		return next(1);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,prev,"	public GeoHash prev() {
		return next(-1);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,ord,"	public long ord() {
		int insignificantBits = MAX_BIT_PRECISION - significantBits;
		return bits >>> insignificantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,getCharacterPrecision,"	public int getCharacterPrecision() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(
					""precision of GeoHash is not divisble by 5: "" + this);
		}
		return significantBits / 5;
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,fromOrd,"	public static GeoHash fromOrd(long ord, int significantBits) {
		int insignificantBits = MAX_BIT_PRECISION - significantBits;
		return fromLongValue(ord << insignificantBits, significantBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,stepsBetween,"	public static long stepsBetween(GeoHash one, GeoHash two) {
		if (one.significantBits() != two.significantBits()) {
			throw new IllegalArgumentException(
					""It is only valid to compare the number of steps between two hashes if they have the same number of significant bits"");
		}
		return two.ord() - one.ord();
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,divideRangeEncode,"	private void divideRangeEncode(double value, double[] range) {
		double mid = (range[0] + range[1]) / 2;
		if (value >= mid) {
			addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,divideRangeDecode,"	private static void divideRangeDecode(GeoHash hash, double[] range, boolean b) {
		double mid = (range[0] + range[1]) / 2;
		if (b) {
			hash.addOnBitToEnd();",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,getAdjacent,"	public GeoHash[] getAdjacent() {
		GeoHash northern = getNorthernNeighbour();
		GeoHash eastern = getEasternNeighbour();
		GeoHash southern = getSouthernNeighbour();
		GeoHash western = getWesternNeighbour();
		return new GeoHash[] { northern, northern.getEasternNeighbour(), eastern, southern.getEasternNeighbour(),
				southern,",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,significantBits,"	public int significantBits() {
		return significantBits;
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,longValue,"	public long longValue() {
		return bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,toBase32,"	public String toBase32() {
		if (significantBits % 5 != 0) {
			throw new IllegalStateException(""Cannot convert a geohash to base32 if the precision is not a multiple of 5."");
		}
		StringBuilder buf = new StringBuilder();

		long firstFiveBitsMask = 0xf800000000000000l;
		long bitsCopy = bits;
		int partialChunks = (int) Math.ceil(((double) significantBits / 5));

		for (int i = 0; i < partialChunks; i++) {
			int pointer = (int) ((bitsCopy & firstFiveBitsMask) >>> 59);
			buf.append(base32[pointer]);
			bitsCopy <<= 5;
		}
		return buf.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,within,"	public boolean within(GeoHash boundingBox) {
		return (bits & boundingBox.mask()) == boundingBox.bits;
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,contains,"	public boolean contains(WGS84Point point) {
		return boundingBox.contains(point);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,getOriginatingPoint,"	public WGS84Point getOriginatingPoint() {
		return point;
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,getBoundingBoxCenter,"	public WGS84Point getBoundingBoxCenter() {
		return boundingBox.getCenter();
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,getBoundingBox,"	public BoundingBox getBoundingBox() {
		return boundingBox;
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,enclosesCircleAroundPoint,"	public boolean enclosesCircleAroundPoint(WGS84Point point, double radius) {
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,recombineLatLonBitsToHash,"	protected GeoHash recombineLatLonBitsToHash(long[] latBits, long[] lonBits) {
		GeoHash hash = new GeoHash();
		boolean isEvenBit = false;
		latBits[0] <<= (MAX_BIT_PRECISION - latBits[1]);
		lonBits[0] <<= (MAX_BIT_PRECISION - lonBits[1]);
		double[] latitudeRange = { -90.0, 90.0 };
		double[] longitudeRange = { -180.0, 180.0 };

		for (int i = 0; i < latBits[1] + lonBits[1]; i++) {
			if (isEvenBit) {
				divideRangeDecode(hash, latitudeRange, (latBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				latBits[0] <<= 1;
			} else {
				divideRangeDecode(hash, longitudeRange, (lonBits[0] & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED);
				lonBits[0] <<= 1;
			}
			isEvenBit = !isEvenBit;
		}
		hash.bits <<= (MAX_BIT_PRECISION - hash.significantBits);
		setBoundingBox(hash, latitudeRange, longitudeRange);
		hash.point = hash.boundingBox.getCenter();
		return hash;
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,getNorthernNeighbour,"	public GeoHash getNorthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] += 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,getSouthernNeighbour,"	public GeoHash getSouthernNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		latitudeBits[0] -= 1;
		latitudeBits[0] = maskLastNBits(latitudeBits[0], latitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,getEasternNeighbour,"	public GeoHash getEasternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] += 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,getWesternNeighbour,"	public GeoHash getWesternNeighbour() {
		long[] latitudeBits = getRightAlignedLatitudeBits();
		long[] longitudeBits = getRightAlignedLongitudeBits();
		longitudeBits[0] -= 1;
		longitudeBits[0] = maskLastNBits(longitudeBits[0], longitudeBits[1]);
		return recombineLatLonBitsToHash(latitudeBits, longitudeBits);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,getRightAlignedLatitudeBits,"	protected long[] getRightAlignedLatitudeBits() {
		long copyOfBits = bits << 1;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[0]);
		return new long[] { value, getNumberOfLatLonBits()[0] };
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,getRightAlignedLongitudeBits,"	protected long[] getRightAlignedLongitudeBits() {
		long copyOfBits = bits;
		long value = extractEverySecondBit(copyOfBits, getNumberOfLatLonBits()[1]);
		return new long[] { value, getNumberOfLatLonBits()[1] };
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,extractEverySecondBit,"	private long extractEverySecondBit(long copyOfBits, int numberOfBits) {
		long value = 0;
		for (int i = 0; i < numberOfBits; i++) {
			if ((copyOfBits & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				value |= 0x1;
			}
			value <<= 1;
			copyOfBits <<= 2;
		}
		value >>>= 1;
		return value;
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,getNumberOfLatLonBits,"	protected int[] getNumberOfLatLonBits() {
		if (significantBits % 2 == 0) {
			return new int[] { significantBits / 2, significantBits / 2 };",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,addOnBitToEnd,"	protected final void addOnBitToEnd() {
		significantBits++;
		bits <<= 1;
		bits = bits | 0x1;
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,addOffBitToEnd,"	protected final void addOffBitToEnd() {
		significantBits++;
		bits <<= 1;
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,toString,"	public String toString() {
		if (significantBits % 5 == 0) {
			return String.format(""%s -> %s -> %s"", padLeft(Long.toBinaryString(bits), 64, ""0""), boundingBox, toBase32());",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,padLeft,"	private static String padLeft(String s, int n, String pad) {
		return String.format(""%"" + n + ""s"", s).replace("" "", pad);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,toBinaryString,"	public String toBinaryString() {
		StringBuilder bui = new StringBuilder();
		long bitsCopy = bits;
		for (int i = 0; i < significantBits; i++) {
			if ((bitsCopy & FIRST_BIT_FLAGGED) == FIRST_BIT_FLAGGED) {
				bui.append('1');
			} else {
				bui.append('0');
			}
			bitsCopy <<= 1;
		}
		return bui.toString();
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,equals,"	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj instanceof GeoHash) {
			GeoHash other = (GeoHash) obj;
			if (other.significantBits == significantBits && other.bits == bits) {
				return true;
			}
		}
		return false;
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,hashCode,"	public int hashCode() {
		int f = 17;
		f = 31 * f + (int) (bits ^ (bits >>> 32));
		f = 31 * f + significantBits;
		return f;
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,mask,"	private long mask() {
		if (significantBits == 0) {
			return 0;",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,maskLastNBits,"	private long maskLastNBits(long value, long n) {
		long mask = 0xffffffffffffffffl;
		mask >>>= (MAX_BIT_PRECISION - n);
		return value & mask;
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHash.java,compareTo,"	public int compareTo(GeoHash o) {
		int bitsCmp = Long.compare(bits ^ FIRST_BIT_FLAGGED, o.bits ^ FIRST_BIT_FLAGGED);
		if (bitsCmp != 0) {
			return bitsCmp;",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,toBase32ShouldThrowWhenPrecisionIsNotAMultipleOf5,"	public void toBase32ShouldThrowWhenPrecisionIsNotAMultipleOf5() {
		hash.bits = 0x6ff0413000000000l;
		hash.significantBits = 24;
		hash.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			BoundingBox bbox = gh.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testToAndFromBinaryString,"	public void testToAndFromBinaryString() {
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			String binaryString = gh.toBinaryString();",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertWithin(hash, bbox);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,assertWithin,"	private void assertWithin(GeoHash hash, GeoHash bbox) {
		assertTrue(hash + "" should be within "" + bbox, hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,itShouldCreateAHashWithMinimumPrecisionOf0Bits,"	public void itShouldCreateAHashWithMinimumPrecisionOf0Bits() {
		GeoHash.withBitPrecision(10.0, 10.0, 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,itShouldCreateAHashWithMaximumPrecisionOf64Bits,"	public void itShouldCreateAHashWithMaximumPrecisionOf64Bits() {
		GeoHash.withBitPrecision(10.0, 10.0, 64);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,itShouldThrowWhenTheBitPrecisionIsLessThan0Bits,"	public void itShouldThrowWhenTheBitPrecisionIsLessThan0Bits() {
		GeoHash.withBitPrecision(46.0, 8.0, -1);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,itShouldThrowWhenTheBitPrecisionIsMoreThan64Bits,"	public void itShouldThrowWhenTheBitPrecisionIsMoreThan64Bits() {
		GeoHash.withBitPrecision(46.0, 8.0, 70);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,itShouldThrowWhenTheCharacterPrecisionIsTooBig,"	public void itShouldThrowWhenTheCharacterPrecisionIsTooBig() {
		GeoHash.withCharacterPrecision(10.0, 120.0, 14);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash + "" should NOT be within "" + bbox, hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");

		String geoHashString = GeoHash.geoHashStringWithCharacterPrecision(point.getLatitude(), point.getLongitude(), 12);
		assertEquals(fullStringValue, geoHashString);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xd000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xc000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);
",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertEquals(start.getBoundingBox(), end.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testKnownNeighbouringHashes,"	public void testKnownNeighbouringHashes() {
		GeoHash h1 = GeoHash.fromGeohashString(""u1pb"");
		assertEquals(""u0zz"", h1.getSouthernNeighbour().toBase32());
		assertEquals(""u1pc"", h1.getNorthernNeighbour().toBase32());
		assertEquals(""u300"", h1.getEasternNeighbour().toBase32());
		assertEquals(""u302"", h1.getEasternNeighbour().getEasternNeighbour().toBase32());
		assertEquals(""u1p8"", h1.getWesternNeighbour().toBase32());

		assertEquals(""sp2j"", GeoHash.withCharacterPrecision(41.7, 0.08, 4).toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testKnownAdjacentNeighbours,"	public void testKnownAdjacentNeighbours() {
		String center = ""dqcjqc"";
		String[] adjacent = new String[] { ""dqcjqf"", ""dqcjqb"", ""dqcjr1"", ""dqcjq9"", ""dqcjqd"", ""dqcjr4"", ""dqcjr0"",
				""dqcjq8"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""u1x0dfg"";
		adjacent = new String[] { ""u1x0dg4"", ""u1x0dg5"", ""u1x0dgh"", ""u1x0dfu"", ""u1x0dfs"", ""u1x0dfe"", ""u1x0dfd"",
				""u1x0dff"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""sp2j"";
		adjacent = new String[] { ""ezry"", ""sp2n"", ""sp2q"", ""sp2m"", ""sp2k"", ""sp2h"", ""ezru"", ""ezrv"" };
		assertAdjacentHashesAre(center, adjacent);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testThatAdjacentHashesHavePointInitialized,"	public void testThatAdjacentHashesHavePointInitialized() {
		String center = ""dqcjqc"";
		GeoHash geohash = GeoHash.fromGeohashString(center);
		GeoHash[] adjacentHashes = geohash.getAdjacent();
		for (GeoHash adjacentHash : adjacentHashes) {
			assertNotNull(adjacentHash.getBoundingBox());",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,assertAdjacentHashesAre,"	private void assertAdjacentHashesAre(String centerString, String[] adjacentStrings) {
		GeoHash center = GeoHash.fromGeohashString(centerString);
		GeoHash[] adjacent = center.getAdjacent();
		for (String check : adjacentStrings) {
			assertArrayContainsGeoHash(check, adjacent);",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,assertArrayContainsGeoHash,"	private void assertArrayContainsGeoHash(String check, GeoHash[] hashes) {
		boolean found = false;
		for (GeoHash hash : hashes) {
			if (hash.toBase32().equals(check)) {
				found = true;
				break;
			}
		}
		assertTrue(""Array should contain "" + check, found);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testNeibouringHashesNearMeridian,"	public void testNeibouringHashesNearMeridian() {
		GeoHash hash = GeoHash.fromGeohashString(""sp2j"");
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(""ezrv"", west.toBase32());
		west = west.getWesternNeighbour();
		assertEquals(""ezrt"", west.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testSimpleWithin,"	public void testSimpleWithin() {
		GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
		GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
		assertWithin(inside, hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenter());
		System.out.print(""corners="");
		System.out.println(hash.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testToLongAndBack,"	public void testToLongAndBack() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		long lv = hash.longValue();
		assertEquals(lv + (1 << (64 - hash.significantBits())), hash.next().longValue());
		GeoHash hashFromLong = GeoHash.fromLongValue(lv, hash.significantBits());
		assertEquals(""dr4jb0bn21"", hashFromLong.toBase32());
		assertEquals(hash, hashFromLong);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testNext,"	public void testNext() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 10);
		GeoHash next = hash.next();
		assertTrue(hash.compareTo(next) < 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testNextPrev,"	public void testNextPrev() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 35);
		GeoHash next = hash.next(2);
		assertTrue(hash.compareTo(next) < 0);
		GeoHash prev1 = next.prev();
		GeoHash prev2 = prev1.next(-1);
		assertTrue(prev1.compareTo(next) < 0);
		System.out.println(""hash: "" + hash.toBase32());
		System.out.println(""next: "" + next.toBase32());
		System.out.println(""prev1: "" + prev1.toBase32());
		System.out.println(""prev2: "" + prev2.toBase32());

		assertTrue(prev2.compareTo(prev1) < 0);
		assertTrue(prev2.compareTo(hash) == 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testGetCharacterPrecisionThrows,"	public void testGetCharacterPrecisionThrows() throws Exception {
		GeoHash hash = GeoHash.withBitPrecision(37.7, -122.52, 32);
		hash.getCharacterPrecision();
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,itShouldThrowANiceExceptionOnIllegalCharacters,"	public void itShouldThrowANiceExceptionOnIllegalCharacters() {
		GeoHash.fromGeohashString(""abba"");
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testGetCharacterPrecisionWorksWhenPrecisionIsMultipleOfFive,"	public void testGetCharacterPrecisionWorksWhenPrecisionIsMultipleOfFive() throws Exception {
		GeoHash hash = GeoHash.withBitPrecision(37.7, -122.52, 60);
		int precision = hash.getCharacterPrecision();
		assertEquals(precision, 12);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testStepsBetween,"	public void testStepsBetween() {
		GeoHash bl = GeoHash.withBitPrecision(37.7, -122.52, 35);
		GeoHash ur = GeoHash.withBitPrecision(37.84, -122.35, 35);

		long steps = GeoHash.stepsBetween(bl, bl);
		assertEquals(steps, 0);

		steps = GeoHash.stepsBetween(bl, bl.next(4));
		assertEquals(steps, 4);

		BoundingBoxGeoHashIterator iter = new BoundingBoxGeoHashIterator(new TwoGeoHashBoundingBox(bl, ur));
		int count = 0;
		while (iter.hasNext()) {
			iter.next();
			count++;
		}
		assertEquals(12875, count);

		int allHashes = 0;
		int inBbox = 1;
		int latMore = 0;
		int lonMore = 0;
		int bothMore = 0;
		int latLess = 0;
		int lonLess = 0;
		int bothLess = 0;
		int latLessLonMore = 0;
		int latMoreLonLess = 0;
		GeoHash idx = bl;
		BoundingBox iterBbox = iter.getBoundingBox().getBoundingBox();
		while (idx.compareTo(ur) < 0) {
			idx = idx.next();
			allHashes++;
			if (iterBbox.contains(idx.getOriginatingPoint())) {
				inBbox++;
			}
			boolean latIsMore = false;
			boolean latIsLess = false;
			if (idx.getOriginatingPoint().getLatitude() > iterBbox.getNorthLatitude()) {
				latIsMore = true;
				latMore++;
			} else if (idx.getOriginatingPoint().getLatitude() < iterBbox.getSouthLatitude()) {
				latIsLess = true;
				latLess++;
			}
			if (idx.getOriginatingPoint().getLongitude() > iterBbox.getEastLongitude()) {
				lonMore++;
				if (latIsMore) {
					bothMore++;
				}
				if (latIsLess) {
					latLessLonMore++;
				}
			} else if (idx.getOriginatingPoint().getLongitude() < iterBbox.getWestLongitude()) {
				lonLess++;
				if (latIsLess) {
					bothLess++;
				}
				if (latIsMore) {
					latMoreLonLess++;
				}
			}
		}

		// Just trying to understand where these GeoHashes are with regard to
		// their bounding box.
		steps = GeoHash.stepsBetween(bl, ur);
		assertEquals(48472, steps);
		assertEquals(steps, allHashes);
		assertEquals(count, inBbox);
		assertEquals(14938, latMore);
		assertEquals(640, lonMore);
		assertEquals(0, bothMore);
		assertEquals(7680, latLess);
		assertEquals(24391, lonLess);
		assertEquals(0, bothLess);
		assertEquals(240, latLessLonMore);
		assertEquals(11811, latMoreLonLess);
		assertEquals(steps, lonLess + latLess + latMore + lonMore + inBbox - latLessLonMore - latMoreLonLess - 1);
",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testCompareTo,"	public void testCompareTo() {
		GeoHash prevHash = null;
		for (int i = 0; i < 10000; i++) {
			GeoHash hash = RandomGeohashes.createWith5BitsPrecision();",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testOrdIsPositive,"	public void testOrdIsPositive() {
		double lat = 40.390943;
		double lon = 75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);
		assertEquals(0xcf6915015410500l, hash.ord());
		assertTrue(hash.ord() >= 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2b45dc9eae6bb86521c55c9c70526a82bcf59420,GeoHashTest.java,testSecondCaseWhereOrdMustBePositive,"	public void testSecondCaseWhereOrdMustBePositive() {
		GeoHash hash = GeoHash.withCharacterPrecision(-36.919550434870125,174.71024582237604,7);
		assertTrue(hash.ord() > 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/2b45dc9eae6bb86521c55c9c70526a82bcf59420
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,setUp,"	public void setUp() {
		hash = new GeoHash();
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testAddingOnes,"	public void testAddingOnes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);
		assertEquals(1, hash.significantBits());
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		hash.addOnBitToEnd();
		assertEquals(0xfl, hash.bits);
		assertEquals(4, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testAddingZeroes,"	public void testAddingZeroes() {
		hash.addOnBitToEnd();
		assertEquals(0x1l, hash.bits);

		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		hash.addOffBitToEnd();
		assertEquals(0x10l, hash.bits);
		assertEquals(5, hash.significantBits());
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testToBase32,"	public void testToBase32() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;

		String base32 = hash.toBase32();
		assertEquals(""ezs42"", base32);
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,toBase32ShouldThrowWhenPrecisionIsNotAMultipleOf5,"	public void toBase32ShouldThrowWhenPrecisionIsNotAMultipleOf5() {
		hash.bits = 0x6ff0413000000000l;
		hash.significantBits = 24;
		hash.toBase32();
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testDecode,"	public void testDecode() {
		// for all lat/lon pairs check decoded point is in the same bbox as the
		// geohash formed by encoder
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			BoundingBox bbox = gh.getBoundingBox();",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testToAndFromBinaryString,"	public void testToAndFromBinaryString() {
		for (GeoHash gh : RandomGeohashes.fullRange()) {
			String binaryString = gh.toBinaryString();",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testWithin,"	public void testWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		System.out.println(hash.toBase32());
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6ff0000000000000l;
		bbox.significantBits = 12;

		assertWithin(hash, bbox);
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,assertWithin,"	private void assertWithin(GeoHash hash, GeoHash bbox) {
		assertTrue(hash + "" should be within "" + bbox, hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,itShouldCreateAHashWithMinimumPrecisionOf0Bits,"	public void itShouldCreateAHashWithMinimumPrecisionOf0Bits() {
		GeoHash geoHash = GeoHash.withBitPrecision(10.0, 10.0, 0);
		assertEquals(0, geoHash.significantBits());
		assertEquals(0, geoHash.longValue());
		assertEquals(new WGS84Point(10.0, 10.0), geoHash.getOriginatingPoint());
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,itShouldCreateAHashWithMaximumPrecisionOf64Bits,"	public void itShouldCreateAHashWithMaximumPrecisionOf64Bits() {
		GeoHash geoHash = GeoHash.withBitPrecision(10.0, 10.0, 64);
		assertEquals(64, geoHash.significantBits());
		assertEquals(0xc07e07e07e07e07eL, geoHash.longValue());
		assertEquals(new WGS84Point(10.0, 10.0), geoHash.getOriginatingPoint());
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,itShouldThrowWhenTheBitPrecisionIsLessThan0Bits,"	public void itShouldThrowWhenTheBitPrecisionIsLessThan0Bits() {
		GeoHash.withBitPrecision(46.0, 8.0, -1);
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,itShouldThrowWhenTheBitPrecisionIsMoreThan64Bits,"	public void itShouldThrowWhenTheBitPrecisionIsMoreThan64Bits() {
		GeoHash.withBitPrecision(46.0, 8.0, 70);
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,itShouldThrowWhenTheCharacterPrecisionIsTooBig,"	public void itShouldThrowWhenTheCharacterPrecisionIsTooBig() {
		GeoHash.withCharacterPrecision(10.0, 120.0, 14);
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testNotWithin,"	public void testNotWithin() {
		hash.bits = 0x6ff0414000000000l;
		hash.significantBits = 25;
		assertEquals(""ezs42"", hash.toBase32());

		GeoHash bbox = new GeoHash();
		bbox.bits = 0x6fc0000000000000l;
		bbox.significantBits = 12;

		assertFalse(hash + "" should NOT be within "" + bbox, hash.within(bbox));
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testConstructorWithBitPrecision,"	public void testConstructorWithBitPrecision() {
		GeoHash hash1 = GeoHash.withBitPrecision(45, 120, 20);
		assertEquals(hash1.significantBits, 20);
		System.out.println(hash1);
		System.out.println(hash1.toBase32());

		GeoHash hash2 = GeoHash.withBitPrecision(45, 120, 55);
		assertEquals(hash2.significantBits, 55);
		System.out.println(hash2);
		System.out.println(hash2.toBase32());

		assertTrue(hash2.within(hash1));

		// this should match Dave Troys Codebase. This is also his maximum
		// accuracy (12 5-nibbles).
		GeoHash hash3 = GeoHash.withBitPrecision(20, 31, 60);
		assertEquals(""sew1c2vs2q5r"", hash3.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testLatLonBoundingBoxes,"	public void testLatLonBoundingBoxes() {
		hash = GeoHash.withBitPrecision(40, 120, 10);
		System.out.println(hash.toBase32());
		printBoundingBox(hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testByCharacterPrecision,"	public void testByCharacterPrecision() {
		assertEncodingWithCharacterPrecision(new WGS84Point(20, 31), 12, ""sew1c2vs2q5r"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20, 31), 12, ""ksqn1rje83g2"");
		assertEncodingWithCharacterPrecision(new WGS84Point(-20.783236276, 31.9867127312312), 12, ""ksq9zbs0b7vw"");

		WGS84Point point = new WGS84Point(-76.5110040642321, 39.0247389581054);
		String fullStringValue = ""hf7u8p8gn747"";
		for (int characters = 12; characters > 1; characters--) {
			assertEncodingWithCharacterPrecision(point, characters, fullStringValue.substring(0, characters));
		}

		assertEncodingWithCharacterPrecision(new WGS84Point(39.0247389581054, -76.5110040642321), 12, ""dqcw4bnrs6s7"");

		String geoHashString = GeoHash.geoHashStringWithCharacterPrecision(point.getLatitude(), point.getLongitude(), 12);
		assertEquals(fullStringValue, geoHashString);
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,assertEncodingWithCharacterPrecision,"	private void assertEncodingWithCharacterPrecision(WGS84Point point, int numberOfCharacters, String stringValue) {
		GeoHash hash = GeoHash.withCharacterPrecision(point.getLatitude(), point.getLongitude(), numberOfCharacters);
		assertEquals(stringValue, hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testGetLatitudeBits,"	public void testGetLatitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] latitudeBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0xaal, latitudeBits[0]);
		assertEquals(8, latitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testGetLongitudeBits,"	public void testGetLongitudeBits() {
		hash = GeoHash.withBitPrecision(30, 30, 16);
		long[] longitudeBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x95l, longitudeBits[0]);
		assertEquals(8, longitudeBits[1]);
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testNeighbourLocationCode,"	public void testNeighbourLocationCode() {
		// set up corner case
		hash.bits = 0xc400000000000000l;
		hash.significantBits = 7;

		long[] lonBits = hash.getRightAlignedLongitudeBits();
		assertEquals(0x8, lonBits[0]);
		assertEquals(4, lonBits[1]);

		long[] latBits = hash.getRightAlignedLatitudeBits();
		assertEquals(0x5, latBits[0]);
		assertEquals(3, latBits[1]);

		GeoHash north = hash.getNorthernNeighbour();
		assertEquals(0xd000000000000000l, north.bits);
		assertEquals(7, north.significantBits);

		GeoHash south = hash.getSouthernNeighbour();
		assertEquals(0xc000000000000000l, south.bits);
		assertEquals(7, south.significantBits());

		GeoHash east = hash.getEasternNeighbour();
		assertEquals(0xc600000000000000l, east.bits);

		// NOTE: this is actually a corner case!
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(0x6e00000000000000l, west.bits);

		// NOTE: and now, for the most extreme corner case in 7-bit geohash-land
		hash.bits = 0xfe00000000000000l;

		east = hash.getEasternNeighbour();
		assertEquals(0x5400000000000000l, east.bits);
",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testEqualsAndHashCode,"	public void testEqualsAndHashCode() {
		GeoHash hash1 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash2 = GeoHash.withBitPrecision(30, 30, 24);
		GeoHash hash3 = GeoHash.withBitPrecision(30, 30, 10);

		assertTrue(hash1.equals(hash2) && hash2.equals(hash1));
		assertFalse(hash1.equals(hash3) && hash3.equals(hash1));

		assertEquals(hash1.hashCode(), hash2.hashCode());
		assertFalse(hash1.hashCode() == hash3.hashCode());
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testAdjacentHashes,"	public void testAdjacentHashes() {
		GeoHash[] adjacent = GeoHash.fromGeohashString(""dqcw4"").getAdjacent();
		assertEquals(8, adjacent.length);
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testMovingInCircle,"	public void testMovingInCircle() {
		// moving around hashes in a circle should be possible
		checkMovingInCircle(34.2, -45.123);
		// this should also work at the ""back"" of the earth
		checkMovingInCircle(45, 180);
		checkMovingInCircle(90, 180);
		checkMovingInCircle(0, -180);
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,checkMovingInCircle,"	private void checkMovingInCircle(double latitude, double longitude) {
		GeoHash start;
		GeoHash end;
		start = GeoHash.withCharacterPrecision(latitude, longitude, 12);
		end = start.getEasternNeighbour();
		end = end.getSouthernNeighbour();
		end = end.getWesternNeighbour();
		end = end.getNorthernNeighbour();
		assertEquals(start, end);
		assertEquals(start.getBoundingBox(), end.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testMovingAroundWorldOnHashStrips,"	public void testMovingAroundWorldOnHashStrips() throws Exception {
		String[] directions = { ""Northern"", ""Eastern"", ""Southern"", ""Western"" };
		for (String direction : directions) {
			checkMoveAroundStrip(direction);",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,checkMoveAroundStrip,"	private void checkMoveAroundStrip(String direction) throws Exception {
		for (int bits = 2; bits < 16; bits++) {
",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testKnownNeighbouringHashes,"	public void testKnownNeighbouringHashes() {
		GeoHash h1 = GeoHash.fromGeohashString(""u1pb"");
		assertEquals(""u0zz"", h1.getSouthernNeighbour().toBase32());
		assertEquals(""u1pc"", h1.getNorthernNeighbour().toBase32());
		assertEquals(""u300"", h1.getEasternNeighbour().toBase32());
		assertEquals(""u302"", h1.getEasternNeighbour().getEasternNeighbour().toBase32());
		assertEquals(""u1p8"", h1.getWesternNeighbour().toBase32());

		assertEquals(""sp2j"", GeoHash.withCharacterPrecision(41.7, 0.08, 4).toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testKnownAdjacentNeighbours,"	public void testKnownAdjacentNeighbours() {
		String center = ""dqcjqc"";
		String[] adjacent = new String[] { ""dqcjqf"", ""dqcjqb"", ""dqcjr1"", ""dqcjq9"", ""dqcjqd"", ""dqcjr4"", ""dqcjr0"",
				""dqcjq8"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""u1x0dfg"";
		adjacent = new String[] { ""u1x0dg4"", ""u1x0dg5"", ""u1x0dgh"", ""u1x0dfu"", ""u1x0dfs"", ""u1x0dfe"", ""u1x0dfd"",
				""u1x0dff"" };
		assertAdjacentHashesAre(center, adjacent);

		center = ""sp2j"";
		adjacent = new String[] { ""ezry"", ""sp2n"", ""sp2q"", ""sp2m"", ""sp2k"", ""sp2h"", ""ezru"", ""ezrv"" };
		assertAdjacentHashesAre(center, adjacent);
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testThatAdjacentHashesHavePointInitialized,"	public void testThatAdjacentHashesHavePointInitialized() {
		String center = ""dqcjqc"";
		GeoHash geohash = GeoHash.fromGeohashString(center);
		GeoHash[] adjacentHashes = geohash.getAdjacent();
		for (GeoHash adjacentHash : adjacentHashes) {
			assertNotNull(adjacentHash.getBoundingBox());",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,assertAdjacentHashesAre,"	private void assertAdjacentHashesAre(String centerString, String[] adjacentStrings) {
		GeoHash center = GeoHash.fromGeohashString(centerString);
		GeoHash[] adjacent = center.getAdjacent();
		for (String check : adjacentStrings) {
			assertArrayContainsGeoHash(check, adjacent);",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,assertArrayContainsGeoHash,"	private void assertArrayContainsGeoHash(String check, GeoHash[] hashes) {
		boolean found = false;
		for (GeoHash hash : hashes) {
			if (hash.toBase32().equals(check)) {
				found = true;
				break;
			}
		}
		assertTrue(""Array should contain "" + check, found);
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testNeibouringHashesNearMeridian,"	public void testNeibouringHashesNearMeridian() {
		GeoHash hash = GeoHash.fromGeohashString(""sp2j"");
		GeoHash west = hash.getWesternNeighbour();
		assertEquals(""ezrv"", west.toBase32());
		west = west.getWesternNeighbour();
		assertEquals(""ezrt"", west.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testIssue1,"	public void testIssue1() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);

		String base32 = ""dr4jb0bn2180"";
		GeoHash fromRef = GeoHash.fromGeohashString(base32);
		assertEquals(hash, fromRef);
		assertEquals(base32, hash.toBase32());
		assertEquals(base32, fromRef.toBase32());

		hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		assertEquals(""dr4jb0bn21"", hash.toBase32());
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testSimpleWithin,"	public void testSimpleWithin() {
		GeoHash hash = GeoHash.withBitPrecision(70, -120, 8);
		GeoHash inside = GeoHash.withBitPrecision(74, -130, 64);
		assertWithin(inside, hash);
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,printBoundingBox,"	private void printBoundingBox(GeoHash hash) {
		System.out.println(""Bounding Box: \ncenter ="" + hash.getBoundingBoxCenter());
		System.out.print(""corners="");
		System.out.println(hash.getBoundingBox());
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testToLongAndBack,"	public void testToLongAndBack() {
		double lat = 40.390943;
		double lon = -75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 10);
		long lv = hash.longValue();
		assertEquals(lv + (1 << (64 - hash.significantBits())), hash.next().longValue());
		GeoHash hashFromLong = GeoHash.fromLongValue(lv, hash.significantBits());
		assertEquals(""dr4jb0bn21"", hashFromLong.toBase32());
		assertEquals(hash, hashFromLong);
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testNext,"	public void testNext() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 10);
		GeoHash next = hash.next();
		assertTrue(hash.compareTo(next) < 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testNextPrev,"	public void testNextPrev() {
		double lat = 37.7;
		double lon = -122.52;
		GeoHash hash = GeoHash.withBitPrecision(lat, lon, 35);
		GeoHash next = hash.next(2);
		assertTrue(hash.compareTo(next) < 0);
		GeoHash prev1 = next.prev();
		GeoHash prev2 = prev1.next(-1);
		assertTrue(prev1.compareTo(next) < 0);
		System.out.println(""hash: "" + hash.toBase32());
		System.out.println(""next: "" + next.toBase32());
		System.out.println(""prev1: "" + prev1.toBase32());
		System.out.println(""prev2: "" + prev2.toBase32());

		assertTrue(prev2.compareTo(prev1) < 0);
		assertTrue(prev2.compareTo(hash) == 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testGetCharacterPrecisionThrows,"	public void testGetCharacterPrecisionThrows() throws Exception {
		GeoHash hash = GeoHash.withBitPrecision(37.7, -122.52, 32);
		hash.getCharacterPrecision();
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,itShouldThrowANiceExceptionOnIllegalCharacters,"	public void itShouldThrowANiceExceptionOnIllegalCharacters() {
		GeoHash.fromGeohashString(""abba"");
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testGetCharacterPrecisionWorksWhenPrecisionIsMultipleOfFive,"	public void testGetCharacterPrecisionWorksWhenPrecisionIsMultipleOfFive() throws Exception {
		GeoHash hash = GeoHash.withBitPrecision(37.7, -122.52, 60);
		int precision = hash.getCharacterPrecision();
		assertEquals(precision, 12);
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testStepsBetween,"	public void testStepsBetween() {
		GeoHash bl = GeoHash.withBitPrecision(37.7, -122.52, 35);
		GeoHash ur = GeoHash.withBitPrecision(37.84, -122.35, 35);

		long steps = GeoHash.stepsBetween(bl, bl);
		assertEquals(steps, 0);

		steps = GeoHash.stepsBetween(bl, bl.next(4));
		assertEquals(steps, 4);

		BoundingBoxGeoHashIterator iter = new BoundingBoxGeoHashIterator(new TwoGeoHashBoundingBox(bl, ur));
		int count = 0;
		while (iter.hasNext()) {
			iter.next();
			count++;
		}
		assertEquals(12875, count);

		int allHashes = 0;
		int inBbox = 1;
		int latMore = 0;
		int lonMore = 0;
		int bothMore = 0;
		int latLess = 0;
		int lonLess = 0;
		int bothLess = 0;
		int latLessLonMore = 0;
		int latMoreLonLess = 0;
		GeoHash idx = bl;
		BoundingBox iterBbox = iter.getBoundingBox().getBoundingBox();
		while (idx.compareTo(ur) < 0) {
			idx = idx.next();
			allHashes++;
			if (iterBbox.contains(idx.getOriginatingPoint())) {
				inBbox++;
			}
			boolean latIsMore = false;
			boolean latIsLess = false;
			if (idx.getOriginatingPoint().getLatitude() > iterBbox.getNorthLatitude()) {
				latIsMore = true;
				latMore++;
			} else if (idx.getOriginatingPoint().getLatitude() < iterBbox.getSouthLatitude()) {
				latIsLess = true;
				latLess++;
			}
			if (idx.getOriginatingPoint().getLongitude() > iterBbox.getEastLongitude()) {
				lonMore++;
				if (latIsMore) {
					bothMore++;
				}
				if (latIsLess) {
					latLessLonMore++;
				}
			} else if (idx.getOriginatingPoint().getLongitude() < iterBbox.getWestLongitude()) {
				lonLess++;
				if (latIsLess) {
					bothLess++;
				}
				if (latIsMore) {
					latMoreLonLess++;
				}
			}
		}

		// Just trying to understand where these GeoHashes are with regard to
		// their bounding box.
		steps = GeoHash.stepsBetween(bl, ur);
		assertEquals(48472, steps);
		assertEquals(steps, allHashes);
		assertEquals(count, inBbox);
		assertEquals(14938, latMore);
		assertEquals(640, lonMore);
		assertEquals(0, bothMore);
		assertEquals(7680, latLess);
		assertEquals(24391, lonLess);
		assertEquals(0, bothLess);
		assertEquals(240, latLessLonMore);
		assertEquals(11811, latMoreLonLess);
		assertEquals(steps, lonLess + latLess + latMore + lonMore + inBbox - latLessLonMore - latMoreLonLess - 1);
",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testCompareTo,"	public void testCompareTo() {
		GeoHash prevHash = null;
		for (int i = 0; i < 10000; i++) {
			GeoHash hash = RandomGeohashes.createWith5BitsPrecision();",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testOrdIsPositive,"	public void testOrdIsPositive() {
		double lat = 40.390943;
		double lon = 75.9375;
		GeoHash hash = GeoHash.withCharacterPrecision(lat, lon, 12);
		assertEquals(0xcf6915015410500l, hash.ord());
		assertTrue(hash.ord() >= 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
2cb753df20f4eb51f95840db27ff856562370f45,GeoHashTest.java,testSecondCaseWhereOrdMustBePositive,"	public void testSecondCaseWhereOrdMustBePositive() {
		GeoHash hash = GeoHash.withCharacterPrecision(-36.919550434870125,174.71024582237604,7);
		assertTrue(hash.ord() > 0);
	}",https://www.github.com/kungfoo/geohash-java/commit/2cb753df20f4eb51f95840db27ff856562370f45
